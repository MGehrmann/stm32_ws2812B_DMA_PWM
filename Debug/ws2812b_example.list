
ws2812b_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a90  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003b50  08003b50  00013b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b88  08003b88  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003b88  08003b88  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b88  08003b88  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b88  08003b88  00013b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b8c  08003b8c  00013b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  2000000c  08003b9c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08003b9c  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6c3  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000209f  00000000  00000000  0002e6f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  00030798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b58  00000000  00000000  000313d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188f9  00000000  00000000  00031f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ebf  00000000  00000000  0004a829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e1e2  00000000  00000000  0005b6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e98ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002af8  00000000  00000000  000e9920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003b38 	.word	0x08003b38

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003b38 	.word	0x08003b38

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000226:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <MX_DMA_Init+0x38>)
 8000228:	695a      	ldr	r2, [r3, #20]
 800022a:	4b0b      	ldr	r3, [pc, #44]	; (8000258 <MX_DMA_Init+0x38>)
 800022c:	2101      	movs	r1, #1
 800022e:	430a      	orrs	r2, r1
 8000230:	615a      	str	r2, [r3, #20]
 8000232:	4b09      	ldr	r3, [pc, #36]	; (8000258 <MX_DMA_Init+0x38>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	2201      	movs	r2, #1
 8000238:	4013      	ands	r3, r2
 800023a:	607b      	str	r3, [r7, #4]
 800023c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800023e:	2200      	movs	r2, #0
 8000240:	2100      	movs	r1, #0
 8000242:	200a      	movs	r0, #10
 8000244:	f000 fba6 	bl	8000994 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000248:	200a      	movs	r0, #10
 800024a:	f000 fbb8 	bl	80009be <HAL_NVIC_EnableIRQ>

}
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	46bd      	mov	sp, r7
 8000252:	b002      	add	sp, #8
 8000254:	bd80      	pop	{r7, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	40021000 	.word	0x40021000

0800025c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b084      	sub	sp, #16
 8000260:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000262:	4b17      	ldr	r3, [pc, #92]	; (80002c0 <MX_GPIO_Init+0x64>)
 8000264:	695a      	ldr	r2, [r3, #20]
 8000266:	4b16      	ldr	r3, [pc, #88]	; (80002c0 <MX_GPIO_Init+0x64>)
 8000268:	2180      	movs	r1, #128	; 0x80
 800026a:	03c9      	lsls	r1, r1, #15
 800026c:	430a      	orrs	r2, r1
 800026e:	615a      	str	r2, [r3, #20]
 8000270:	4b13      	ldr	r3, [pc, #76]	; (80002c0 <MX_GPIO_Init+0x64>)
 8000272:	695a      	ldr	r2, [r3, #20]
 8000274:	2380      	movs	r3, #128	; 0x80
 8000276:	03db      	lsls	r3, r3, #15
 8000278:	4013      	ands	r3, r2
 800027a:	60fb      	str	r3, [r7, #12]
 800027c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800027e:	4b10      	ldr	r3, [pc, #64]	; (80002c0 <MX_GPIO_Init+0x64>)
 8000280:	695a      	ldr	r2, [r3, #20]
 8000282:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <MX_GPIO_Init+0x64>)
 8000284:	2180      	movs	r1, #128	; 0x80
 8000286:	0289      	lsls	r1, r1, #10
 8000288:	430a      	orrs	r2, r1
 800028a:	615a      	str	r2, [r3, #20]
 800028c:	4b0c      	ldr	r3, [pc, #48]	; (80002c0 <MX_GPIO_Init+0x64>)
 800028e:	695a      	ldr	r2, [r3, #20]
 8000290:	2380      	movs	r3, #128	; 0x80
 8000292:	029b      	lsls	r3, r3, #10
 8000294:	4013      	ands	r3, r2
 8000296:	60bb      	str	r3, [r7, #8]
 8000298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800029a:	4b09      	ldr	r3, [pc, #36]	; (80002c0 <MX_GPIO_Init+0x64>)
 800029c:	695a      	ldr	r2, [r3, #20]
 800029e:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <MX_GPIO_Init+0x64>)
 80002a0:	2180      	movs	r1, #128	; 0x80
 80002a2:	02c9      	lsls	r1, r1, #11
 80002a4:	430a      	orrs	r2, r1
 80002a6:	615a      	str	r2, [r3, #20]
 80002a8:	4b05      	ldr	r3, [pc, #20]	; (80002c0 <MX_GPIO_Init+0x64>)
 80002aa:	695a      	ldr	r2, [r3, #20]
 80002ac:	2380      	movs	r3, #128	; 0x80
 80002ae:	02db      	lsls	r3, r3, #11
 80002b0:	4013      	ands	r3, r2
 80002b2:	607b      	str	r3, [r7, #4]
 80002b4:	687b      	ldr	r3, [r7, #4]

}
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	46bd      	mov	sp, r7
 80002ba:	b004      	add	sp, #16
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	46c0      	nop			; (mov r8, r8)
 80002c0:	40021000 	.word	0x40021000

080002c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c8:	f000 fa54 	bl	8000774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002cc:	f000 f80d 	bl	80002ea <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002d0:	f7ff ffc4 	bl	800025c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002d4:	f000 f98e 	bl	80005f4 <MX_USART2_UART_Init>
  MX_DMA_Init();
 80002d8:	f7ff ffa2 	bl	8000220 <MX_DMA_Init>
  MX_TIM3_Init();
 80002dc:	f000 f894 	bl	8000408 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  ws2812b_init();
 80002e0:	f002 ff24 	bl	800312c <ws2812b_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ws2812b_main();
 80002e4:	f002 ff50 	bl	8003188 <ws2812b_main>
 80002e8:	e7fc      	b.n	80002e4 <main+0x20>

080002ea <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ea:	b590      	push	{r4, r7, lr}
 80002ec:	b093      	sub	sp, #76	; 0x4c
 80002ee:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f0:	2414      	movs	r4, #20
 80002f2:	193b      	adds	r3, r7, r4
 80002f4:	0018      	movs	r0, r3
 80002f6:	2334      	movs	r3, #52	; 0x34
 80002f8:	001a      	movs	r2, r3
 80002fa:	2100      	movs	r1, #0
 80002fc:	f003 fc14 	bl	8003b28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	0018      	movs	r0, r3
 8000304:	2310      	movs	r3, #16
 8000306:	001a      	movs	r2, r3
 8000308:	2100      	movs	r1, #0
 800030a:	f003 fc0d 	bl	8003b28 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800030e:	193b      	adds	r3, r7, r4
 8000310:	2220      	movs	r2, #32
 8000312:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000314:	193b      	adds	r3, r7, r4
 8000316:	2201      	movs	r2, #1
 8000318:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800031a:	193b      	adds	r3, r7, r4
 800031c:	2200      	movs	r2, #0
 800031e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000320:	193b      	adds	r3, r7, r4
 8000322:	0018      	movs	r0, r3
 8000324:	f000 feae 	bl	8001084 <HAL_RCC_OscConfig>
 8000328:	1e03      	subs	r3, r0, #0
 800032a:	d001      	beq.n	8000330 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800032c:	f000 f819 	bl	8000362 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	2207      	movs	r2, #7
 8000334:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	2203      	movs	r2, #3
 800033a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2200      	movs	r2, #0
 8000346:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	2101      	movs	r1, #1
 800034c:	0018      	movs	r0, r3
 800034e:	f001 fa1f 	bl	8001790 <HAL_RCC_ClockConfig>
 8000352:	1e03      	subs	r3, r0, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000356:	f000 f804 	bl	8000362 <Error_Handler>
  }
}
 800035a:	46c0      	nop			; (mov r8, r8)
 800035c:	46bd      	mov	sp, r7
 800035e:	b013      	add	sp, #76	; 0x4c
 8000360:	bd90      	pop	{r4, r7, pc}

08000362 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000362:	b580      	push	{r7, lr}
 8000364:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000366:	b672      	cpsid	i
}
 8000368:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800036a:	e7fe      	b.n	800036a <Error_Handler+0x8>

0800036c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000372:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <HAL_MspInit+0x44>)
 8000374:	699a      	ldr	r2, [r3, #24]
 8000376:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <HAL_MspInit+0x44>)
 8000378:	2101      	movs	r1, #1
 800037a:	430a      	orrs	r2, r1
 800037c:	619a      	str	r2, [r3, #24]
 800037e:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <HAL_MspInit+0x44>)
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	2201      	movs	r2, #1
 8000384:	4013      	ands	r3, r2
 8000386:	607b      	str	r3, [r7, #4]
 8000388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800038a:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <HAL_MspInit+0x44>)
 800038c:	69da      	ldr	r2, [r3, #28]
 800038e:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <HAL_MspInit+0x44>)
 8000390:	2180      	movs	r1, #128	; 0x80
 8000392:	0549      	lsls	r1, r1, #21
 8000394:	430a      	orrs	r2, r1
 8000396:	61da      	str	r2, [r3, #28]
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <HAL_MspInit+0x44>)
 800039a:	69da      	ldr	r2, [r3, #28]
 800039c:	2380      	movs	r3, #128	; 0x80
 800039e:	055b      	lsls	r3, r3, #21
 80003a0:	4013      	ands	r3, r2
 80003a2:	603b      	str	r3, [r7, #0]
 80003a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	46bd      	mov	sp, r7
 80003aa:	b002      	add	sp, #8
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	40021000 	.word	0x40021000

080003b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003b8:	e7fe      	b.n	80003b8 <NMI_Handler+0x4>

080003ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003ba:	b580      	push	{r7, lr}
 80003bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003be:	e7fe      	b.n	80003be <HardFault_Handler+0x4>

080003c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80003c4:	46c0      	nop			; (mov r8, r8)
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}

080003ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003ca:	b580      	push	{r7, lr}
 80003cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003d8:	f000 fa14 	bl	8000804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003dc:	46c0      	nop			; (mov r8, r8)
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
	...

080003e4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 80003e8:	4b03      	ldr	r3, [pc, #12]	; (80003f8 <DMA1_Channel2_3_IRQHandler+0x14>)
 80003ea:	0018      	movs	r0, r3
 80003ec:	f000 fbf7 	bl	8000bde <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80003f0:	46c0      	nop			; (mov r8, r8)
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	20000130 	.word	0x20000130

080003fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000400:	46c0      	nop			; (mov r8, r8)
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
	...

08000408 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim3_ch4_up;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b08a      	sub	sp, #40	; 0x28
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800040e:	2320      	movs	r3, #32
 8000410:	18fb      	adds	r3, r7, r3
 8000412:	0018      	movs	r0, r3
 8000414:	2308      	movs	r3, #8
 8000416:	001a      	movs	r2, r3
 8000418:	2100      	movs	r1, #0
 800041a:	f003 fb85 	bl	8003b28 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	0018      	movs	r0, r3
 8000422:	231c      	movs	r3, #28
 8000424:	001a      	movs	r2, r3
 8000426:	2100      	movs	r1, #0
 8000428:	f003 fb7e 	bl	8003b28 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800042c:	4b24      	ldr	r3, [pc, #144]	; (80004c0 <MX_TIM3_Init+0xb8>)
 800042e:	4a25      	ldr	r2, [pc, #148]	; (80004c4 <MX_TIM3_Init+0xbc>)
 8000430:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000432:	4b23      	ldr	r3, [pc, #140]	; (80004c0 <MX_TIM3_Init+0xb8>)
 8000434:	2200      	movs	r2, #0
 8000436:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000438:	4b21      	ldr	r3, [pc, #132]	; (80004c0 <MX_TIM3_Init+0xb8>)
 800043a:	2200      	movs	r2, #0
 800043c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60;
 800043e:	4b20      	ldr	r3, [pc, #128]	; (80004c0 <MX_TIM3_Init+0xb8>)
 8000440:	223c      	movs	r2, #60	; 0x3c
 8000442:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000444:	4b1e      	ldr	r3, [pc, #120]	; (80004c0 <MX_TIM3_Init+0xb8>)
 8000446:	2200      	movs	r2, #0
 8000448:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800044a:	4b1d      	ldr	r3, [pc, #116]	; (80004c0 <MX_TIM3_Init+0xb8>)
 800044c:	2200      	movs	r2, #0
 800044e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000450:	4b1b      	ldr	r3, [pc, #108]	; (80004c0 <MX_TIM3_Init+0xb8>)
 8000452:	0018      	movs	r0, r3
 8000454:	f001 fb16 	bl	8001a84 <HAL_TIM_PWM_Init>
 8000458:	1e03      	subs	r3, r0, #0
 800045a:	d001      	beq.n	8000460 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800045c:	f7ff ff81 	bl	8000362 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000460:	2120      	movs	r1, #32
 8000462:	187b      	adds	r3, r7, r1
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000468:	187b      	adds	r3, r7, r1
 800046a:	2200      	movs	r2, #0
 800046c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800046e:	187a      	adds	r2, r7, r1
 8000470:	4b13      	ldr	r3, [pc, #76]	; (80004c0 <MX_TIM3_Init+0xb8>)
 8000472:	0011      	movs	r1, r2
 8000474:	0018      	movs	r0, r3
 8000476:	f002 fa95 	bl	80029a4 <HAL_TIMEx_MasterConfigSynchronization>
 800047a:	1e03      	subs	r3, r0, #0
 800047c:	d001      	beq.n	8000482 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800047e:	f7ff ff70 	bl	8000362 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	2260      	movs	r2, #96	; 0x60
 8000486:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	2200      	movs	r2, #0
 800048c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	2200      	movs	r2, #0
 8000492:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000494:	1d3b      	adds	r3, r7, #4
 8000496:	2200      	movs	r2, #0
 8000498:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800049a:	1d39      	adds	r1, r7, #4
 800049c:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <MX_TIM3_Init+0xb8>)
 800049e:	220c      	movs	r2, #12
 80004a0:	0018      	movs	r0, r3
 80004a2:	f001 fdcf 	bl	8002044 <HAL_TIM_PWM_ConfigChannel>
 80004a6:	1e03      	subs	r3, r0, #0
 80004a8:	d001      	beq.n	80004ae <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80004aa:	f7ff ff5a 	bl	8000362 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80004ae:	4b04      	ldr	r3, [pc, #16]	; (80004c0 <MX_TIM3_Init+0xb8>)
 80004b0:	0018      	movs	r0, r3
 80004b2:	f000 f85f 	bl	8000574 <HAL_TIM_MspPostInit>

}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b00a      	add	sp, #40	; 0x28
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	2000007c 	.word	0x2000007c
 80004c4:	40000400 	.word	0x40000400

080004c8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a23      	ldr	r2, [pc, #140]	; (8000564 <HAL_TIM_PWM_MspInit+0x9c>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d140      	bne.n	800055c <HAL_TIM_PWM_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80004da:	4b23      	ldr	r3, [pc, #140]	; (8000568 <HAL_TIM_PWM_MspInit+0xa0>)
 80004dc:	69da      	ldr	r2, [r3, #28]
 80004de:	4b22      	ldr	r3, [pc, #136]	; (8000568 <HAL_TIM_PWM_MspInit+0xa0>)
 80004e0:	2102      	movs	r1, #2
 80004e2:	430a      	orrs	r2, r1
 80004e4:	61da      	str	r2, [r3, #28]
 80004e6:	4b20      	ldr	r3, [pc, #128]	; (8000568 <HAL_TIM_PWM_MspInit+0xa0>)
 80004e8:	69db      	ldr	r3, [r3, #28]
 80004ea:	2202      	movs	r2, #2
 80004ec:	4013      	ands	r3, r2
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 80004f2:	4b1e      	ldr	r3, [pc, #120]	; (800056c <HAL_TIM_PWM_MspInit+0xa4>)
 80004f4:	4a1e      	ldr	r2, [pc, #120]	; (8000570 <HAL_TIM_PWM_MspInit+0xa8>)
 80004f6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80004f8:	4b1c      	ldr	r3, [pc, #112]	; (800056c <HAL_TIM_PWM_MspInit+0xa4>)
 80004fa:	2210      	movs	r2, #16
 80004fc:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80004fe:	4b1b      	ldr	r3, [pc, #108]	; (800056c <HAL_TIM_PWM_MspInit+0xa4>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8000504:	4b19      	ldr	r3, [pc, #100]	; (800056c <HAL_TIM_PWM_MspInit+0xa4>)
 8000506:	2280      	movs	r2, #128	; 0x80
 8000508:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800050a:	4b18      	ldr	r3, [pc, #96]	; (800056c <HAL_TIM_PWM_MspInit+0xa4>)
 800050c:	2280      	movs	r2, #128	; 0x80
 800050e:	0052      	lsls	r2, r2, #1
 8000510:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000512:	4b16      	ldr	r3, [pc, #88]	; (800056c <HAL_TIM_PWM_MspInit+0xa4>)
 8000514:	2200      	movs	r2, #0
 8000516:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_CIRCULAR;
 8000518:	4b14      	ldr	r3, [pc, #80]	; (800056c <HAL_TIM_PWM_MspInit+0xa4>)
 800051a:	2220      	movs	r2, #32
 800051c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 800051e:	4b13      	ldr	r3, [pc, #76]	; (800056c <HAL_TIM_PWM_MspInit+0xa4>)
 8000520:	2200      	movs	r2, #0
 8000522:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8000524:	4b11      	ldr	r3, [pc, #68]	; (800056c <HAL_TIM_PWM_MspInit+0xa4>)
 8000526:	0018      	movs	r0, r3
 8000528:	f000 fa66 	bl	80009f8 <HAL_DMA_Init>
 800052c:	1e03      	subs	r3, r0, #0
 800052e:	d001      	beq.n	8000534 <HAL_TIM_PWM_MspInit+0x6c>
    {
      Error_Handler();
 8000530:	f7ff ff17 	bl	8000362 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4a0d      	ldr	r2, [pc, #52]	; (800056c <HAL_TIM_PWM_MspInit+0xa4>)
 8000538:	631a      	str	r2, [r3, #48]	; 0x30
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <HAL_TIM_PWM_MspInit+0xa4>)
 800053c:	687a      	ldr	r2, [r7, #4]
 800053e:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4a0a      	ldr	r2, [pc, #40]	; (800056c <HAL_TIM_PWM_MspInit+0xa4>)
 8000544:	621a      	str	r2, [r3, #32]
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <HAL_TIM_PWM_MspInit+0xa4>)
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN TIM3_MspInit 1 */

	HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, 0, 0);
 800054c:	2200      	movs	r2, #0
 800054e:	2100      	movs	r1, #0
 8000550:	200b      	movs	r0, #11
 8000552:	f000 fa1f 	bl	8000994 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 8000556:	200b      	movs	r0, #11
 8000558:	f000 fa31 	bl	80009be <HAL_NVIC_EnableIRQ>
//

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	b004      	add	sp, #16
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40000400 	.word	0x40000400
 8000568:	40021000 	.word	0x40021000
 800056c:	20000130 	.word	0x20000130
 8000570:	40020030 	.word	0x40020030

08000574 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000574:	b590      	push	{r4, r7, lr}
 8000576:	b089      	sub	sp, #36	; 0x24
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057c:	240c      	movs	r4, #12
 800057e:	193b      	adds	r3, r7, r4
 8000580:	0018      	movs	r0, r3
 8000582:	2314      	movs	r3, #20
 8000584:	001a      	movs	r2, r3
 8000586:	2100      	movs	r1, #0
 8000588:	f003 face 	bl	8003b28 <memset>
  if(timHandle->Instance==TIM3)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a15      	ldr	r2, [pc, #84]	; (80005e8 <HAL_TIM_MspPostInit+0x74>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d123      	bne.n	80005de <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000596:	4b15      	ldr	r3, [pc, #84]	; (80005ec <HAL_TIM_MspPostInit+0x78>)
 8000598:	695a      	ldr	r2, [r3, #20]
 800059a:	4b14      	ldr	r3, [pc, #80]	; (80005ec <HAL_TIM_MspPostInit+0x78>)
 800059c:	2180      	movs	r1, #128	; 0x80
 800059e:	02c9      	lsls	r1, r1, #11
 80005a0:	430a      	orrs	r2, r1
 80005a2:	615a      	str	r2, [r3, #20]
 80005a4:	4b11      	ldr	r3, [pc, #68]	; (80005ec <HAL_TIM_MspPostInit+0x78>)
 80005a6:	695a      	ldr	r2, [r3, #20]
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	02db      	lsls	r3, r3, #11
 80005ac:	4013      	ands	r3, r2
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005b2:	0021      	movs	r1, r4
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	2202      	movs	r2, #2
 80005b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ba:	187b      	adds	r3, r7, r1
 80005bc:	2202      	movs	r2, #2
 80005be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	2200      	movs	r2, #0
 80005ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2201      	movs	r2, #1
 80005d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <HAL_TIM_MspPostInit+0x7c>)
 80005d6:	0019      	movs	r1, r3
 80005d8:	0010      	movs	r0, r2
 80005da:	f000 fbeb 	bl	8000db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b009      	add	sp, #36	; 0x24
 80005e4:	bd90      	pop	{r4, r7, pc}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	40000400 	.word	0x40000400
 80005ec:	40021000 	.word	0x40021000
 80005f0:	48000400 	.word	0x48000400

080005f4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <MX_USART2_UART_Init+0x58>)
 80005fa:	4a15      	ldr	r2, [pc, #84]	; (8000650 <MX_USART2_UART_Init+0x5c>)
 80005fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80005fe:	4b13      	ldr	r3, [pc, #76]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000600:	2296      	movs	r2, #150	; 0x96
 8000602:	0212      	lsls	r2, r2, #8
 8000604:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_USART2_UART_Init+0x58>)
 800060e:	2200      	movs	r2, #0
 8000610:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <MX_USART2_UART_Init+0x58>)
 800061a:	220c      	movs	r2, #12
 800061c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000624:	4b09      	ldr	r3, [pc, #36]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000626:	2200      	movs	r2, #0
 8000628:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <MX_USART2_UART_Init+0x58>)
 800062c:	2200      	movs	r2, #0
 800062e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000632:	2200      	movs	r2, #0
 8000634:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000636:	4b05      	ldr	r3, [pc, #20]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000638:	0018      	movs	r0, r3
 800063a:	f002 fa23 	bl	8002a84 <HAL_UART_Init>
 800063e:	1e03      	subs	r3, r0, #0
 8000640:	d001      	beq.n	8000646 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000642:	f7ff fe8e 	bl	8000362 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000174 	.word	0x20000174
 8000650:	40004400 	.word	0x40004400

08000654 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000654:	b590      	push	{r4, r7, lr}
 8000656:	b08b      	sub	sp, #44	; 0x2c
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	2414      	movs	r4, #20
 800065e:	193b      	adds	r3, r7, r4
 8000660:	0018      	movs	r0, r3
 8000662:	2314      	movs	r3, #20
 8000664:	001a      	movs	r2, r3
 8000666:	2100      	movs	r1, #0
 8000668:	f003 fa5e 	bl	8003b28 <memset>
  if(uartHandle->Instance==USART2)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a1c      	ldr	r2, [pc, #112]	; (80006e4 <HAL_UART_MspInit+0x90>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d132      	bne.n	80006dc <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000676:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <HAL_UART_MspInit+0x94>)
 8000678:	69da      	ldr	r2, [r3, #28]
 800067a:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <HAL_UART_MspInit+0x94>)
 800067c:	2180      	movs	r1, #128	; 0x80
 800067e:	0289      	lsls	r1, r1, #10
 8000680:	430a      	orrs	r2, r1
 8000682:	61da      	str	r2, [r3, #28]
 8000684:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <HAL_UART_MspInit+0x94>)
 8000686:	69da      	ldr	r2, [r3, #28]
 8000688:	2380      	movs	r3, #128	; 0x80
 800068a:	029b      	lsls	r3, r3, #10
 800068c:	4013      	ands	r3, r2
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <HAL_UART_MspInit+0x94>)
 8000694:	695a      	ldr	r2, [r3, #20]
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <HAL_UART_MspInit+0x94>)
 8000698:	2180      	movs	r1, #128	; 0x80
 800069a:	0289      	lsls	r1, r1, #10
 800069c:	430a      	orrs	r2, r1
 800069e:	615a      	str	r2, [r3, #20]
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <HAL_UART_MspInit+0x94>)
 80006a2:	695a      	ldr	r2, [r3, #20]
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	029b      	lsls	r3, r3, #10
 80006a8:	4013      	ands	r3, r2
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80006ae:	0021      	movs	r1, r4
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	4a0e      	ldr	r2, [pc, #56]	; (80006ec <HAL_UART_MspInit+0x98>)
 80006b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2202      	movs	r2, #2
 80006ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2203      	movs	r2, #3
 80006c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2201      	movs	r2, #1
 80006cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ce:	187a      	adds	r2, r7, r1
 80006d0:	2390      	movs	r3, #144	; 0x90
 80006d2:	05db      	lsls	r3, r3, #23
 80006d4:	0011      	movs	r1, r2
 80006d6:	0018      	movs	r0, r3
 80006d8:	f000 fb6c 	bl	8000db4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80006dc:	46c0      	nop			; (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	b00b      	add	sp, #44	; 0x2c
 80006e2:	bd90      	pop	{r4, r7, pc}
 80006e4:	40004400 	.word	0x40004400
 80006e8:	40021000 	.word	0x40021000
 80006ec:	00008004 	.word	0x00008004

080006f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006f0:	4813      	ldr	r0, [pc, #76]	; (8000740 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006f2:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80006f4:	4813      	ldr	r0, [pc, #76]	; (8000744 <LoopForever+0x6>)
    LDR R1, [R0]
 80006f6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80006f8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80006fa:	4a13      	ldr	r2, [pc, #76]	; (8000748 <LoopForever+0xa>)
    CMP R1, R2
 80006fc:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80006fe:	d105      	bne.n	800070c <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000700:	4812      	ldr	r0, [pc, #72]	; (800074c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000702:	4913      	ldr	r1, [pc, #76]	; (8000750 <LoopForever+0x12>)
    STR R1, [R0]
 8000704:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000706:	4813      	ldr	r0, [pc, #76]	; (8000754 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000708:	4913      	ldr	r1, [pc, #76]	; (8000758 <LoopForever+0x1a>)
    STR R1, [R0]
 800070a:	6001      	str	r1, [r0, #0]

0800070c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800070c:	4813      	ldr	r0, [pc, #76]	; (800075c <LoopForever+0x1e>)
  ldr r1, =_edata
 800070e:	4914      	ldr	r1, [pc, #80]	; (8000760 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000710:	4a14      	ldr	r2, [pc, #80]	; (8000764 <LoopForever+0x26>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000714:	e002      	b.n	800071c <LoopCopyDataInit>

08000716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800071a:	3304      	adds	r3, #4

0800071c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800071c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000720:	d3f9      	bcc.n	8000716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000722:	4a11      	ldr	r2, [pc, #68]	; (8000768 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000724:	4c11      	ldr	r4, [pc, #68]	; (800076c <LoopForever+0x2e>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000728:	e001      	b.n	800072e <LoopFillZerobss>

0800072a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800072a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800072c:	3204      	adds	r2, #4

0800072e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000730:	d3fb      	bcc.n	800072a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000732:	f7ff fe63 	bl	80003fc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000736:	f003 f9d3 	bl	8003ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800073a:	f7ff fdc3 	bl	80002c4 <main>

0800073e <LoopForever>:

LoopForever:
    b LoopForever
 800073e:	e7fe      	b.n	800073e <LoopForever>
  ldr   r0, =_estack
 8000740:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000744:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000748:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 800074c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000750:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000754:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000758:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800075c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000760:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000764:	08003b90 	.word	0x08003b90
  ldr r2, =_sbss
 8000768:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800076c:	200001fc 	.word	0x200001fc

08000770 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000770:	e7fe      	b.n	8000770 <ADC1_IRQHandler>
	...

08000774 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <HAL_Init+0x24>)
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <HAL_Init+0x24>)
 800077e:	2110      	movs	r1, #16
 8000780:	430a      	orrs	r2, r1
 8000782:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000784:	2000      	movs	r0, #0
 8000786:	f000 f809 	bl	800079c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800078a:	f7ff fdef 	bl	800036c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800078e:	2300      	movs	r3, #0
}
 8000790:	0018      	movs	r0, r3
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	40022000 	.word	0x40022000

0800079c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <HAL_InitTick+0x5c>)
 80007a6:	681c      	ldr	r4, [r3, #0]
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <HAL_InitTick+0x60>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	0019      	movs	r1, r3
 80007ae:	23fa      	movs	r3, #250	; 0xfa
 80007b0:	0098      	lsls	r0, r3, #2
 80007b2:	f7ff fca9 	bl	8000108 <__udivsi3>
 80007b6:	0003      	movs	r3, r0
 80007b8:	0019      	movs	r1, r3
 80007ba:	0020      	movs	r0, r4
 80007bc:	f7ff fca4 	bl	8000108 <__udivsi3>
 80007c0:	0003      	movs	r3, r0
 80007c2:	0018      	movs	r0, r3
 80007c4:	f000 f90b 	bl	80009de <HAL_SYSTICK_Config>
 80007c8:	1e03      	subs	r3, r0, #0
 80007ca:	d001      	beq.n	80007d0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80007cc:	2301      	movs	r3, #1
 80007ce:	e00f      	b.n	80007f0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b03      	cmp	r3, #3
 80007d4:	d80b      	bhi.n	80007ee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d6:	6879      	ldr	r1, [r7, #4]
 80007d8:	2301      	movs	r3, #1
 80007da:	425b      	negs	r3, r3
 80007dc:	2200      	movs	r2, #0
 80007de:	0018      	movs	r0, r3
 80007e0:	f000 f8d8 	bl	8000994 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_InitTick+0x64>)
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80007ea:	2300      	movs	r3, #0
 80007ec:	e000      	b.n	80007f0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
}
 80007f0:	0018      	movs	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b003      	add	sp, #12
 80007f6:	bd90      	pop	{r4, r7, pc}
 80007f8:	20000000 	.word	0x20000000
 80007fc:	20000008 	.word	0x20000008
 8000800:	20000004 	.word	0x20000004

08000804 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <HAL_IncTick+0x1c>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	001a      	movs	r2, r3
 800080e:	4b05      	ldr	r3, [pc, #20]	; (8000824 <HAL_IncTick+0x20>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	18d2      	adds	r2, r2, r3
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <HAL_IncTick+0x20>)
 8000816:	601a      	str	r2, [r3, #0]
}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	20000008 	.word	0x20000008
 8000824:	200001f8 	.word	0x200001f8

08000828 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  return uwTick;
 800082c:	4b02      	ldr	r3, [pc, #8]	; (8000838 <HAL_GetTick+0x10>)
 800082e:	681b      	ldr	r3, [r3, #0]
}
 8000830:	0018      	movs	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	200001f8 	.word	0x200001f8

0800083c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	0002      	movs	r2, r0
 8000844:	1dfb      	adds	r3, r7, #7
 8000846:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000848:	1dfb      	adds	r3, r7, #7
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b7f      	cmp	r3, #127	; 0x7f
 800084e:	d809      	bhi.n	8000864 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000850:	1dfb      	adds	r3, r7, #7
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	001a      	movs	r2, r3
 8000856:	231f      	movs	r3, #31
 8000858:	401a      	ands	r2, r3
 800085a:	4b04      	ldr	r3, [pc, #16]	; (800086c <__NVIC_EnableIRQ+0x30>)
 800085c:	2101      	movs	r1, #1
 800085e:	4091      	lsls	r1, r2
 8000860:	000a      	movs	r2, r1
 8000862:	601a      	str	r2, [r3, #0]
  }
}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	b002      	add	sp, #8
 800086a:	bd80      	pop	{r7, pc}
 800086c:	e000e100 	.word	0xe000e100

08000870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000870:	b590      	push	{r4, r7, lr}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	0002      	movs	r2, r0
 8000878:	6039      	str	r1, [r7, #0]
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800087e:	1dfb      	adds	r3, r7, #7
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b7f      	cmp	r3, #127	; 0x7f
 8000884:	d828      	bhi.n	80008d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000886:	4a2f      	ldr	r2, [pc, #188]	; (8000944 <__NVIC_SetPriority+0xd4>)
 8000888:	1dfb      	adds	r3, r7, #7
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	b25b      	sxtb	r3, r3
 800088e:	089b      	lsrs	r3, r3, #2
 8000890:	33c0      	adds	r3, #192	; 0xc0
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	589b      	ldr	r3, [r3, r2]
 8000896:	1dfa      	adds	r2, r7, #7
 8000898:	7812      	ldrb	r2, [r2, #0]
 800089a:	0011      	movs	r1, r2
 800089c:	2203      	movs	r2, #3
 800089e:	400a      	ands	r2, r1
 80008a0:	00d2      	lsls	r2, r2, #3
 80008a2:	21ff      	movs	r1, #255	; 0xff
 80008a4:	4091      	lsls	r1, r2
 80008a6:	000a      	movs	r2, r1
 80008a8:	43d2      	mvns	r2, r2
 80008aa:	401a      	ands	r2, r3
 80008ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	019b      	lsls	r3, r3, #6
 80008b2:	22ff      	movs	r2, #255	; 0xff
 80008b4:	401a      	ands	r2, r3
 80008b6:	1dfb      	adds	r3, r7, #7
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	0018      	movs	r0, r3
 80008bc:	2303      	movs	r3, #3
 80008be:	4003      	ands	r3, r0
 80008c0:	00db      	lsls	r3, r3, #3
 80008c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008c4:	481f      	ldr	r0, [pc, #124]	; (8000944 <__NVIC_SetPriority+0xd4>)
 80008c6:	1dfb      	adds	r3, r7, #7
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	b25b      	sxtb	r3, r3
 80008cc:	089b      	lsrs	r3, r3, #2
 80008ce:	430a      	orrs	r2, r1
 80008d0:	33c0      	adds	r3, #192	; 0xc0
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008d6:	e031      	b.n	800093c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d8:	4a1b      	ldr	r2, [pc, #108]	; (8000948 <__NVIC_SetPriority+0xd8>)
 80008da:	1dfb      	adds	r3, r7, #7
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	0019      	movs	r1, r3
 80008e0:	230f      	movs	r3, #15
 80008e2:	400b      	ands	r3, r1
 80008e4:	3b08      	subs	r3, #8
 80008e6:	089b      	lsrs	r3, r3, #2
 80008e8:	3306      	adds	r3, #6
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	18d3      	adds	r3, r2, r3
 80008ee:	3304      	adds	r3, #4
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	1dfa      	adds	r2, r7, #7
 80008f4:	7812      	ldrb	r2, [r2, #0]
 80008f6:	0011      	movs	r1, r2
 80008f8:	2203      	movs	r2, #3
 80008fa:	400a      	ands	r2, r1
 80008fc:	00d2      	lsls	r2, r2, #3
 80008fe:	21ff      	movs	r1, #255	; 0xff
 8000900:	4091      	lsls	r1, r2
 8000902:	000a      	movs	r2, r1
 8000904:	43d2      	mvns	r2, r2
 8000906:	401a      	ands	r2, r3
 8000908:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	019b      	lsls	r3, r3, #6
 800090e:	22ff      	movs	r2, #255	; 0xff
 8000910:	401a      	ands	r2, r3
 8000912:	1dfb      	adds	r3, r7, #7
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	0018      	movs	r0, r3
 8000918:	2303      	movs	r3, #3
 800091a:	4003      	ands	r3, r0
 800091c:	00db      	lsls	r3, r3, #3
 800091e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000920:	4809      	ldr	r0, [pc, #36]	; (8000948 <__NVIC_SetPriority+0xd8>)
 8000922:	1dfb      	adds	r3, r7, #7
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	001c      	movs	r4, r3
 8000928:	230f      	movs	r3, #15
 800092a:	4023      	ands	r3, r4
 800092c:	3b08      	subs	r3, #8
 800092e:	089b      	lsrs	r3, r3, #2
 8000930:	430a      	orrs	r2, r1
 8000932:	3306      	adds	r3, #6
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	18c3      	adds	r3, r0, r3
 8000938:	3304      	adds	r3, #4
 800093a:	601a      	str	r2, [r3, #0]
}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	b003      	add	sp, #12
 8000942:	bd90      	pop	{r4, r7, pc}
 8000944:	e000e100 	.word	0xe000e100
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	1e5a      	subs	r2, r3, #1
 8000958:	2380      	movs	r3, #128	; 0x80
 800095a:	045b      	lsls	r3, r3, #17
 800095c:	429a      	cmp	r2, r3
 800095e:	d301      	bcc.n	8000964 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000960:	2301      	movs	r3, #1
 8000962:	e010      	b.n	8000986 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <SysTick_Config+0x44>)
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	3a01      	subs	r2, #1
 800096a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800096c:	2301      	movs	r3, #1
 800096e:	425b      	negs	r3, r3
 8000970:	2103      	movs	r1, #3
 8000972:	0018      	movs	r0, r3
 8000974:	f7ff ff7c 	bl	8000870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <SysTick_Config+0x44>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800097e:	4b04      	ldr	r3, [pc, #16]	; (8000990 <SysTick_Config+0x44>)
 8000980:	2207      	movs	r2, #7
 8000982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000984:	2300      	movs	r3, #0
}
 8000986:	0018      	movs	r0, r3
 8000988:	46bd      	mov	sp, r7
 800098a:	b002      	add	sp, #8
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	e000e010 	.word	0xe000e010

08000994 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	60b9      	str	r1, [r7, #8]
 800099c:	607a      	str	r2, [r7, #4]
 800099e:	210f      	movs	r1, #15
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	1c02      	adds	r2, r0, #0
 80009a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009a6:	68ba      	ldr	r2, [r7, #8]
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	b25b      	sxtb	r3, r3
 80009ae:	0011      	movs	r1, r2
 80009b0:	0018      	movs	r0, r3
 80009b2:	f7ff ff5d 	bl	8000870 <__NVIC_SetPriority>
}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b004      	add	sp, #16
 80009bc:	bd80      	pop	{r7, pc}

080009be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	0002      	movs	r2, r0
 80009c6:	1dfb      	adds	r3, r7, #7
 80009c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009ca:	1dfb      	adds	r3, r7, #7
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b25b      	sxtb	r3, r3
 80009d0:	0018      	movs	r0, r3
 80009d2:	f7ff ff33 	bl	800083c <__NVIC_EnableIRQ>
}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	b002      	add	sp, #8
 80009dc:	bd80      	pop	{r7, pc}

080009de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	0018      	movs	r0, r3
 80009ea:	f7ff ffaf 	bl	800094c <SysTick_Config>
 80009ee:	0003      	movs	r3, r0
}
 80009f0:	0018      	movs	r0, r3
 80009f2:	46bd      	mov	sp, r7
 80009f4:	b002      	add	sp, #8
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d101      	bne.n	8000a0e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e036      	b.n	8000a7c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2221      	movs	r2, #33	; 0x21
 8000a12:	2102      	movs	r1, #2
 8000a14:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	4a18      	ldr	r2, [pc, #96]	; (8000a84 <HAL_DMA_Init+0x8c>)
 8000a22:	4013      	ands	r3, r2
 8000a24:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000a2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	695b      	ldr	r3, [r3, #20]
 8000a40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	69db      	ldr	r3, [r3, #28]
 8000a4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	68fa      	ldr	r2, [r7, #12]
 8000a5a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f000 f98c 	bl	8000d7c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2221      	movs	r2, #33	; 0x21
 8000a6e:	2101      	movs	r1, #1
 8000a70:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2220      	movs	r2, #32
 8000a76:	2100      	movs	r1, #0
 8000a78:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000a7a:	2300      	movs	r3, #0
}  
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	b004      	add	sp, #16
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	ffffc00f 	.word	0xffffc00f

08000a88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
 8000a94:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000a96:	2317      	movs	r3, #23
 8000a98:	18fb      	adds	r3, r7, r3
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	2220      	movs	r2, #32
 8000aa2:	5c9b      	ldrb	r3, [r3, r2]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d101      	bne.n	8000aac <HAL_DMA_Start_IT+0x24>
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	e04f      	b.n	8000b4c <HAL_DMA_Start_IT+0xc4>
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	2220      	movs	r2, #32
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	2221      	movs	r2, #33	; 0x21
 8000ab8:	5c9b      	ldrb	r3, [r3, r2]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d13a      	bne.n	8000b36 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	2221      	movs	r2, #33	; 0x21
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	2200      	movs	r2, #0
 8000acc:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2101      	movs	r1, #1
 8000ada:	438a      	bics	r2, r1
 8000adc:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	68b9      	ldr	r1, [r7, #8]
 8000ae4:	68f8      	ldr	r0, [r7, #12]
 8000ae6:	f000 f91c 	bl	8000d22 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d008      	beq.n	8000b04 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	210e      	movs	r1, #14
 8000afe:	430a      	orrs	r2, r1
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	e00f      	b.n	8000b24 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	210a      	movs	r1, #10
 8000b10:	430a      	orrs	r2, r1
 8000b12:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2104      	movs	r1, #4
 8000b20:	438a      	bics	r2, r1
 8000b22:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2101      	movs	r1, #1
 8000b30:	430a      	orrs	r2, r1
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	e007      	b.n	8000b46 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	2220      	movs	r2, #32
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000b3e:	2317      	movs	r3, #23
 8000b40:	18fb      	adds	r3, r7, r3
 8000b42:	2202      	movs	r2, #2
 8000b44:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8000b46:	2317      	movs	r3, #23
 8000b48:	18fb      	adds	r3, r7, r3
 8000b4a:	781b      	ldrb	r3, [r3, #0]
} 
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b006      	add	sp, #24
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b5c:	210f      	movs	r1, #15
 8000b5e:	187b      	adds	r3, r7, r1
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2221      	movs	r2, #33	; 0x21
 8000b68:	5c9b      	ldrb	r3, [r3, r2]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d006      	beq.n	8000b7e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2204      	movs	r2, #4
 8000b74:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b76:	187b      	adds	r3, r7, r1
 8000b78:	2201      	movs	r2, #1
 8000b7a:	701a      	strb	r2, [r3, #0]
 8000b7c:	e028      	b.n	8000bd0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	210e      	movs	r1, #14
 8000b8a:	438a      	bics	r2, r1
 8000b8c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2101      	movs	r1, #1
 8000b9a:	438a      	bics	r2, r1
 8000b9c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	4091      	lsls	r1, r2
 8000baa:	000a      	movs	r2, r1
 8000bac:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2221      	movs	r2, #33	; 0x21
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2220      	movs	r2, #32
 8000bba:	2100      	movs	r1, #0
 8000bbc:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d004      	beq.n	8000bd0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	0010      	movs	r0, r2
 8000bce:	4798      	blx	r3
    } 
  }
  return status;
 8000bd0:	230f      	movs	r3, #15
 8000bd2:	18fb      	adds	r3, r7, r3
 8000bd4:	781b      	ldrb	r3, [r3, #0]
}
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	b004      	add	sp, #16
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b084      	sub	sp, #16
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	2204      	movs	r2, #4
 8000bfc:	409a      	lsls	r2, r3
 8000bfe:	0013      	movs	r3, r2
 8000c00:	68fa      	ldr	r2, [r7, #12]
 8000c02:	4013      	ands	r3, r2
 8000c04:	d024      	beq.n	8000c50 <HAL_DMA_IRQHandler+0x72>
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	2204      	movs	r2, #4
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	d020      	beq.n	8000c50 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2220      	movs	r2, #32
 8000c16:	4013      	ands	r3, r2
 8000c18:	d107      	bne.n	8000c2a <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2104      	movs	r1, #4
 8000c26:	438a      	bics	r2, r1
 8000c28:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c32:	2104      	movs	r1, #4
 8000c34:	4091      	lsls	r1, r2
 8000c36:	000a      	movs	r2, r1
 8000c38:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d100      	bne.n	8000c44 <HAL_DMA_IRQHandler+0x66>
 8000c42:	e06a      	b.n	8000d1a <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	0010      	movs	r0, r2
 8000c4c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000c4e:	e064      	b.n	8000d1a <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c54:	2202      	movs	r2, #2
 8000c56:	409a      	lsls	r2, r3
 8000c58:	0013      	movs	r3, r2
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	d02b      	beq.n	8000cb8 <HAL_DMA_IRQHandler+0xda>
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	2202      	movs	r2, #2
 8000c64:	4013      	ands	r3, r2
 8000c66:	d027      	beq.n	8000cb8 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2220      	movs	r2, #32
 8000c70:	4013      	ands	r3, r2
 8000c72:	d10b      	bne.n	8000c8c <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	210a      	movs	r1, #10
 8000c80:	438a      	bics	r2, r1
 8000c82:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2221      	movs	r2, #33	; 0x21
 8000c88:	2101      	movs	r1, #1
 8000c8a:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c94:	2102      	movs	r1, #2
 8000c96:	4091      	lsls	r1, r2
 8000c98:	000a      	movs	r2, r1
 8000c9a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2220      	movs	r2, #32
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d036      	beq.n	8000d1a <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	0010      	movs	r0, r2
 8000cb4:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000cb6:	e030      	b.n	8000d1a <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbc:	2208      	movs	r2, #8
 8000cbe:	409a      	lsls	r2, r3
 8000cc0:	0013      	movs	r3, r2
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	d028      	beq.n	8000d1a <HAL_DMA_IRQHandler+0x13c>
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	2208      	movs	r2, #8
 8000ccc:	4013      	ands	r3, r2
 8000cce:	d024      	beq.n	8000d1a <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	210e      	movs	r1, #14
 8000cdc:	438a      	bics	r2, r1
 8000cde:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ce8:	2101      	movs	r1, #1
 8000cea:	4091      	lsls	r1, r2
 8000cec:	000a      	movs	r2, r1
 8000cee:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2221      	movs	r2, #33	; 0x21
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2220      	movs	r2, #32
 8000d02:	2100      	movs	r1, #0
 8000d04:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d005      	beq.n	8000d1a <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	0010      	movs	r0, r2
 8000d16:	4798      	blx	r3
    }
   }
}  
 8000d18:	e7ff      	b.n	8000d1a <HAL_DMA_IRQHandler+0x13c>
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	b004      	add	sp, #16
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b084      	sub	sp, #16
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	60f8      	str	r0, [r7, #12]
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
 8000d2e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d38:	2101      	movs	r1, #1
 8000d3a:	4091      	lsls	r1, r2
 8000d3c:	000a      	movs	r2, r1
 8000d3e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	683a      	ldr	r2, [r7, #0]
 8000d46:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	2b10      	cmp	r3, #16
 8000d4e:	d108      	bne.n	8000d62 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	68ba      	ldr	r2, [r7, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000d60:	e007      	b.n	8000d72 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	60da      	str	r2, [r3, #12]
}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b004      	add	sp, #16
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a08      	ldr	r2, [pc, #32]	; (8000dac <DMA_CalcBaseAndBitshift+0x30>)
 8000d8a:	4694      	mov	ip, r2
 8000d8c:	4463      	add	r3, ip
 8000d8e:	2114      	movs	r1, #20
 8000d90:	0018      	movs	r0, r3
 8000d92:	f7ff f9b9 	bl	8000108 <__udivsi3>
 8000d96:	0003      	movs	r3, r0
 8000d98:	009a      	lsls	r2, r3, #2
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a03      	ldr	r2, [pc, #12]	; (8000db0 <DMA_CalcBaseAndBitshift+0x34>)
 8000da2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000da4:	46c0      	nop			; (mov r8, r8)
 8000da6:	46bd      	mov	sp, r7
 8000da8:	b002      	add	sp, #8
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	bffdfff8 	.word	0xbffdfff8
 8000db0:	40020000 	.word	0x40020000

08000db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc2:	e149      	b.n	8001058 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2101      	movs	r1, #1
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	4091      	lsls	r1, r2
 8000dce:	000a      	movs	r2, r1
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d100      	bne.n	8000ddc <HAL_GPIO_Init+0x28>
 8000dda:	e13a      	b.n	8001052 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	2203      	movs	r2, #3
 8000de2:	4013      	ands	r3, r2
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d005      	beq.n	8000df4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	2203      	movs	r2, #3
 8000dee:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d130      	bne.n	8000e56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	2203      	movs	r2, #3
 8000e00:	409a      	lsls	r2, r3
 8000e02:	0013      	movs	r3, r2
 8000e04:	43da      	mvns	r2, r3
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	68da      	ldr	r2, [r3, #12]
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	409a      	lsls	r2, r3
 8000e16:	0013      	movs	r3, r2
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	409a      	lsls	r2, r3
 8000e30:	0013      	movs	r3, r2
 8000e32:	43da      	mvns	r2, r3
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	091b      	lsrs	r3, r3, #4
 8000e40:	2201      	movs	r2, #1
 8000e42:	401a      	ands	r2, r3
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	409a      	lsls	r2, r3
 8000e48:	0013      	movs	r3, r2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	2b03      	cmp	r3, #3
 8000e60:	d017      	beq.n	8000e92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	68db      	ldr	r3, [r3, #12]
 8000e66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	409a      	lsls	r2, r3
 8000e70:	0013      	movs	r3, r2
 8000e72:	43da      	mvns	r2, r3
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	4013      	ands	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	689a      	ldr	r2, [r3, #8]
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	409a      	lsls	r2, r3
 8000e84:	0013      	movs	r3, r2
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	2203      	movs	r2, #3
 8000e98:	4013      	ands	r3, r2
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d123      	bne.n	8000ee6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	08da      	lsrs	r2, r3, #3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	3208      	adds	r2, #8
 8000ea6:	0092      	lsls	r2, r2, #2
 8000ea8:	58d3      	ldr	r3, [r2, r3]
 8000eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	2207      	movs	r2, #7
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	220f      	movs	r2, #15
 8000eb6:	409a      	lsls	r2, r3
 8000eb8:	0013      	movs	r3, r2
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	691a      	ldr	r2, [r3, #16]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	2107      	movs	r1, #7
 8000eca:	400b      	ands	r3, r1
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	409a      	lsls	r2, r3
 8000ed0:	0013      	movs	r3, r2
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	08da      	lsrs	r2, r3, #3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3208      	adds	r2, #8
 8000ee0:	0092      	lsls	r2, r2, #2
 8000ee2:	6939      	ldr	r1, [r7, #16]
 8000ee4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	409a      	lsls	r2, r3
 8000ef4:	0013      	movs	r3, r2
 8000ef6:	43da      	mvns	r2, r3
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	4013      	ands	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2203      	movs	r2, #3
 8000f04:	401a      	ands	r2, r3
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	409a      	lsls	r2, r3
 8000f0c:	0013      	movs	r3, r2
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685a      	ldr	r2, [r3, #4]
 8000f1e:	23c0      	movs	r3, #192	; 0xc0
 8000f20:	029b      	lsls	r3, r3, #10
 8000f22:	4013      	ands	r3, r2
 8000f24:	d100      	bne.n	8000f28 <HAL_GPIO_Init+0x174>
 8000f26:	e094      	b.n	8001052 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f28:	4b51      	ldr	r3, [pc, #324]	; (8001070 <HAL_GPIO_Init+0x2bc>)
 8000f2a:	699a      	ldr	r2, [r3, #24]
 8000f2c:	4b50      	ldr	r3, [pc, #320]	; (8001070 <HAL_GPIO_Init+0x2bc>)
 8000f2e:	2101      	movs	r1, #1
 8000f30:	430a      	orrs	r2, r1
 8000f32:	619a      	str	r2, [r3, #24]
 8000f34:	4b4e      	ldr	r3, [pc, #312]	; (8001070 <HAL_GPIO_Init+0x2bc>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f40:	4a4c      	ldr	r2, [pc, #304]	; (8001074 <HAL_GPIO_Init+0x2c0>)
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	089b      	lsrs	r3, r3, #2
 8000f46:	3302      	adds	r3, #2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	589b      	ldr	r3, [r3, r2]
 8000f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	2203      	movs	r2, #3
 8000f52:	4013      	ands	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	220f      	movs	r2, #15
 8000f58:	409a      	lsls	r2, r3
 8000f5a:	0013      	movs	r3, r2
 8000f5c:	43da      	mvns	r2, r3
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	4013      	ands	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	2390      	movs	r3, #144	; 0x90
 8000f68:	05db      	lsls	r3, r3, #23
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d00d      	beq.n	8000f8a <HAL_GPIO_Init+0x1d6>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a41      	ldr	r2, [pc, #260]	; (8001078 <HAL_GPIO_Init+0x2c4>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d007      	beq.n	8000f86 <HAL_GPIO_Init+0x1d2>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a40      	ldr	r2, [pc, #256]	; (800107c <HAL_GPIO_Init+0x2c8>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d101      	bne.n	8000f82 <HAL_GPIO_Init+0x1ce>
 8000f7e:	2302      	movs	r3, #2
 8000f80:	e004      	b.n	8000f8c <HAL_GPIO_Init+0x1d8>
 8000f82:	2305      	movs	r3, #5
 8000f84:	e002      	b.n	8000f8c <HAL_GPIO_Init+0x1d8>
 8000f86:	2301      	movs	r3, #1
 8000f88:	e000      	b.n	8000f8c <HAL_GPIO_Init+0x1d8>
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	2103      	movs	r1, #3
 8000f90:	400a      	ands	r2, r1
 8000f92:	0092      	lsls	r2, r2, #2
 8000f94:	4093      	lsls	r3, r2
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f9c:	4935      	ldr	r1, [pc, #212]	; (8001074 <HAL_GPIO_Init+0x2c0>)
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	089b      	lsrs	r3, r3, #2
 8000fa2:	3302      	adds	r3, #2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000faa:	4b35      	ldr	r3, [pc, #212]	; (8001080 <HAL_GPIO_Init+0x2cc>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	43da      	mvns	r2, r3
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	2380      	movs	r3, #128	; 0x80
 8000fc0:	025b      	lsls	r3, r3, #9
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fce:	4b2c      	ldr	r3, [pc, #176]	; (8001080 <HAL_GPIO_Init+0x2cc>)
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000fd4:	4b2a      	ldr	r3, [pc, #168]	; (8001080 <HAL_GPIO_Init+0x2cc>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	43da      	mvns	r2, r3
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685a      	ldr	r2, [r3, #4]
 8000fe8:	2380      	movs	r3, #128	; 0x80
 8000fea:	029b      	lsls	r3, r3, #10
 8000fec:	4013      	ands	r3, r2
 8000fee:	d003      	beq.n	8000ff8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ff8:	4b21      	ldr	r3, [pc, #132]	; (8001080 <HAL_GPIO_Init+0x2cc>)
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ffe:	4b20      	ldr	r3, [pc, #128]	; (8001080 <HAL_GPIO_Init+0x2cc>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	43da      	mvns	r2, r3
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	4013      	ands	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685a      	ldr	r2, [r3, #4]
 8001012:	2380      	movs	r3, #128	; 0x80
 8001014:	035b      	lsls	r3, r3, #13
 8001016:	4013      	ands	r3, r2
 8001018:	d003      	beq.n	8001022 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4313      	orrs	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001022:	4b17      	ldr	r3, [pc, #92]	; (8001080 <HAL_GPIO_Init+0x2cc>)
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001028:	4b15      	ldr	r3, [pc, #84]	; (8001080 <HAL_GPIO_Init+0x2cc>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	43da      	mvns	r2, r3
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685a      	ldr	r2, [r3, #4]
 800103c:	2380      	movs	r3, #128	; 0x80
 800103e:	039b      	lsls	r3, r3, #14
 8001040:	4013      	ands	r3, r2
 8001042:	d003      	beq.n	800104c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <HAL_GPIO_Init+0x2cc>)
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	3301      	adds	r3, #1
 8001056:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	40da      	lsrs	r2, r3
 8001060:	1e13      	subs	r3, r2, #0
 8001062:	d000      	beq.n	8001066 <HAL_GPIO_Init+0x2b2>
 8001064:	e6ae      	b.n	8000dc4 <HAL_GPIO_Init+0x10>
  } 
}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	46c0      	nop			; (mov r8, r8)
 800106a:	46bd      	mov	sp, r7
 800106c:	b006      	add	sp, #24
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40021000 	.word	0x40021000
 8001074:	40010000 	.word	0x40010000
 8001078:	48000400 	.word	0x48000400
 800107c:	48000800 	.word	0x48000800
 8001080:	40010400 	.word	0x40010400

08001084 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d102      	bne.n	8001098 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	f000 fb76 	bl	8001784 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2201      	movs	r2, #1
 800109e:	4013      	ands	r3, r2
 80010a0:	d100      	bne.n	80010a4 <HAL_RCC_OscConfig+0x20>
 80010a2:	e08e      	b.n	80011c2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010a4:	4bc5      	ldr	r3, [pc, #788]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	220c      	movs	r2, #12
 80010aa:	4013      	ands	r3, r2
 80010ac:	2b04      	cmp	r3, #4
 80010ae:	d00e      	beq.n	80010ce <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010b0:	4bc2      	ldr	r3, [pc, #776]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	220c      	movs	r2, #12
 80010b6:	4013      	ands	r3, r2
 80010b8:	2b08      	cmp	r3, #8
 80010ba:	d117      	bne.n	80010ec <HAL_RCC_OscConfig+0x68>
 80010bc:	4bbf      	ldr	r3, [pc, #764]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 80010be:	685a      	ldr	r2, [r3, #4]
 80010c0:	23c0      	movs	r3, #192	; 0xc0
 80010c2:	025b      	lsls	r3, r3, #9
 80010c4:	401a      	ands	r2, r3
 80010c6:	2380      	movs	r3, #128	; 0x80
 80010c8:	025b      	lsls	r3, r3, #9
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d10e      	bne.n	80010ec <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ce:	4bbb      	ldr	r3, [pc, #748]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	2380      	movs	r3, #128	; 0x80
 80010d4:	029b      	lsls	r3, r3, #10
 80010d6:	4013      	ands	r3, r2
 80010d8:	d100      	bne.n	80010dc <HAL_RCC_OscConfig+0x58>
 80010da:	e071      	b.n	80011c0 <HAL_RCC_OscConfig+0x13c>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d000      	beq.n	80010e6 <HAL_RCC_OscConfig+0x62>
 80010e4:	e06c      	b.n	80011c0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	f000 fb4c 	bl	8001784 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d107      	bne.n	8001104 <HAL_RCC_OscConfig+0x80>
 80010f4:	4bb1      	ldr	r3, [pc, #708]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4bb0      	ldr	r3, [pc, #704]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 80010fa:	2180      	movs	r1, #128	; 0x80
 80010fc:	0249      	lsls	r1, r1, #9
 80010fe:	430a      	orrs	r2, r1
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	e02f      	b.n	8001164 <HAL_RCC_OscConfig+0xe0>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d10c      	bne.n	8001126 <HAL_RCC_OscConfig+0xa2>
 800110c:	4bab      	ldr	r3, [pc, #684]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4baa      	ldr	r3, [pc, #680]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 8001112:	49ab      	ldr	r1, [pc, #684]	; (80013c0 <HAL_RCC_OscConfig+0x33c>)
 8001114:	400a      	ands	r2, r1
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	4ba8      	ldr	r3, [pc, #672]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4ba7      	ldr	r3, [pc, #668]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 800111e:	49a9      	ldr	r1, [pc, #676]	; (80013c4 <HAL_RCC_OscConfig+0x340>)
 8001120:	400a      	ands	r2, r1
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	e01e      	b.n	8001164 <HAL_RCC_OscConfig+0xe0>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b05      	cmp	r3, #5
 800112c:	d10e      	bne.n	800114c <HAL_RCC_OscConfig+0xc8>
 800112e:	4ba3      	ldr	r3, [pc, #652]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	4ba2      	ldr	r3, [pc, #648]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 8001134:	2180      	movs	r1, #128	; 0x80
 8001136:	02c9      	lsls	r1, r1, #11
 8001138:	430a      	orrs	r2, r1
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	4b9f      	ldr	r3, [pc, #636]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	4b9e      	ldr	r3, [pc, #632]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 8001142:	2180      	movs	r1, #128	; 0x80
 8001144:	0249      	lsls	r1, r1, #9
 8001146:	430a      	orrs	r2, r1
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	e00b      	b.n	8001164 <HAL_RCC_OscConfig+0xe0>
 800114c:	4b9b      	ldr	r3, [pc, #620]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b9a      	ldr	r3, [pc, #616]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 8001152:	499b      	ldr	r1, [pc, #620]	; (80013c0 <HAL_RCC_OscConfig+0x33c>)
 8001154:	400a      	ands	r2, r1
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	4b98      	ldr	r3, [pc, #608]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4b97      	ldr	r3, [pc, #604]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 800115e:	4999      	ldr	r1, [pc, #612]	; (80013c4 <HAL_RCC_OscConfig+0x340>)
 8001160:	400a      	ands	r2, r1
 8001162:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d014      	beq.n	8001196 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116c:	f7ff fb5c 	bl	8000828 <HAL_GetTick>
 8001170:	0003      	movs	r3, r0
 8001172:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001174:	e008      	b.n	8001188 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001176:	f7ff fb57 	bl	8000828 <HAL_GetTick>
 800117a:	0002      	movs	r2, r0
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b64      	cmp	r3, #100	; 0x64
 8001182:	d901      	bls.n	8001188 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e2fd      	b.n	8001784 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001188:	4b8c      	ldr	r3, [pc, #560]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	029b      	lsls	r3, r3, #10
 8001190:	4013      	ands	r3, r2
 8001192:	d0f0      	beq.n	8001176 <HAL_RCC_OscConfig+0xf2>
 8001194:	e015      	b.n	80011c2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001196:	f7ff fb47 	bl	8000828 <HAL_GetTick>
 800119a:	0003      	movs	r3, r0
 800119c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800119e:	e008      	b.n	80011b2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011a0:	f7ff fb42 	bl	8000828 <HAL_GetTick>
 80011a4:	0002      	movs	r2, r0
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b64      	cmp	r3, #100	; 0x64
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e2e8      	b.n	8001784 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011b2:	4b82      	ldr	r3, [pc, #520]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	2380      	movs	r3, #128	; 0x80
 80011b8:	029b      	lsls	r3, r3, #10
 80011ba:	4013      	ands	r3, r2
 80011bc:	d1f0      	bne.n	80011a0 <HAL_RCC_OscConfig+0x11c>
 80011be:	e000      	b.n	80011c2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2202      	movs	r2, #2
 80011c8:	4013      	ands	r3, r2
 80011ca:	d100      	bne.n	80011ce <HAL_RCC_OscConfig+0x14a>
 80011cc:	e06c      	b.n	80012a8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011ce:	4b7b      	ldr	r3, [pc, #492]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	220c      	movs	r2, #12
 80011d4:	4013      	ands	r3, r2
 80011d6:	d00e      	beq.n	80011f6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011d8:	4b78      	ldr	r3, [pc, #480]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	220c      	movs	r2, #12
 80011de:	4013      	ands	r3, r2
 80011e0:	2b08      	cmp	r3, #8
 80011e2:	d11f      	bne.n	8001224 <HAL_RCC_OscConfig+0x1a0>
 80011e4:	4b75      	ldr	r3, [pc, #468]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	23c0      	movs	r3, #192	; 0xc0
 80011ea:	025b      	lsls	r3, r3, #9
 80011ec:	401a      	ands	r2, r3
 80011ee:	2380      	movs	r3, #128	; 0x80
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d116      	bne.n	8001224 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011f6:	4b71      	ldr	r3, [pc, #452]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2202      	movs	r2, #2
 80011fc:	4013      	ands	r3, r2
 80011fe:	d005      	beq.n	800120c <HAL_RCC_OscConfig+0x188>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d001      	beq.n	800120c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e2bb      	b.n	8001784 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800120c:	4b6b      	ldr	r3, [pc, #428]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	22f8      	movs	r2, #248	; 0xf8
 8001212:	4393      	bics	r3, r2
 8001214:	0019      	movs	r1, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	00da      	lsls	r2, r3, #3
 800121c:	4b67      	ldr	r3, [pc, #412]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 800121e:	430a      	orrs	r2, r1
 8001220:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001222:	e041      	b.n	80012a8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d024      	beq.n	8001276 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800122c:	4b63      	ldr	r3, [pc, #396]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b62      	ldr	r3, [pc, #392]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 8001232:	2101      	movs	r1, #1
 8001234:	430a      	orrs	r2, r1
 8001236:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001238:	f7ff faf6 	bl	8000828 <HAL_GetTick>
 800123c:	0003      	movs	r3, r0
 800123e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001240:	e008      	b.n	8001254 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001242:	f7ff faf1 	bl	8000828 <HAL_GetTick>
 8001246:	0002      	movs	r2, r0
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e297      	b.n	8001784 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001254:	4b59      	ldr	r3, [pc, #356]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2202      	movs	r2, #2
 800125a:	4013      	ands	r3, r2
 800125c:	d0f1      	beq.n	8001242 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800125e:	4b57      	ldr	r3, [pc, #348]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	22f8      	movs	r2, #248	; 0xf8
 8001264:	4393      	bics	r3, r2
 8001266:	0019      	movs	r1, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	00da      	lsls	r2, r3, #3
 800126e:	4b53      	ldr	r3, [pc, #332]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 8001270:	430a      	orrs	r2, r1
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	e018      	b.n	80012a8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001276:	4b51      	ldr	r3, [pc, #324]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	4b50      	ldr	r3, [pc, #320]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 800127c:	2101      	movs	r1, #1
 800127e:	438a      	bics	r2, r1
 8001280:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001282:	f7ff fad1 	bl	8000828 <HAL_GetTick>
 8001286:	0003      	movs	r3, r0
 8001288:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800128c:	f7ff facc 	bl	8000828 <HAL_GetTick>
 8001290:	0002      	movs	r2, r0
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b02      	cmp	r3, #2
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e272      	b.n	8001784 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800129e:	4b47      	ldr	r3, [pc, #284]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2202      	movs	r2, #2
 80012a4:	4013      	ands	r3, r2
 80012a6:	d1f1      	bne.n	800128c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2208      	movs	r2, #8
 80012ae:	4013      	ands	r3, r2
 80012b0:	d036      	beq.n	8001320 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d019      	beq.n	80012ee <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ba:	4b40      	ldr	r3, [pc, #256]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 80012bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012be:	4b3f      	ldr	r3, [pc, #252]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 80012c0:	2101      	movs	r1, #1
 80012c2:	430a      	orrs	r2, r1
 80012c4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c6:	f7ff faaf 	bl	8000828 <HAL_GetTick>
 80012ca:	0003      	movs	r3, r0
 80012cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012d0:	f7ff faaa 	bl	8000828 <HAL_GetTick>
 80012d4:	0002      	movs	r2, r0
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e250      	b.n	8001784 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012e2:	4b36      	ldr	r3, [pc, #216]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 80012e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e6:	2202      	movs	r2, #2
 80012e8:	4013      	ands	r3, r2
 80012ea:	d0f1      	beq.n	80012d0 <HAL_RCC_OscConfig+0x24c>
 80012ec:	e018      	b.n	8001320 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012ee:	4b33      	ldr	r3, [pc, #204]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 80012f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012f2:	4b32      	ldr	r3, [pc, #200]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 80012f4:	2101      	movs	r1, #1
 80012f6:	438a      	bics	r2, r1
 80012f8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012fa:	f7ff fa95 	bl	8000828 <HAL_GetTick>
 80012fe:	0003      	movs	r3, r0
 8001300:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001304:	f7ff fa90 	bl	8000828 <HAL_GetTick>
 8001308:	0002      	movs	r2, r0
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e236      	b.n	8001784 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001316:	4b29      	ldr	r3, [pc, #164]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 8001318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131a:	2202      	movs	r2, #2
 800131c:	4013      	ands	r3, r2
 800131e:	d1f1      	bne.n	8001304 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2204      	movs	r2, #4
 8001326:	4013      	ands	r3, r2
 8001328:	d100      	bne.n	800132c <HAL_RCC_OscConfig+0x2a8>
 800132a:	e0b5      	b.n	8001498 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800132c:	201f      	movs	r0, #31
 800132e:	183b      	adds	r3, r7, r0
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001334:	4b21      	ldr	r3, [pc, #132]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 8001336:	69da      	ldr	r2, [r3, #28]
 8001338:	2380      	movs	r3, #128	; 0x80
 800133a:	055b      	lsls	r3, r3, #21
 800133c:	4013      	ands	r3, r2
 800133e:	d110      	bne.n	8001362 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001340:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 8001342:	69da      	ldr	r2, [r3, #28]
 8001344:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 8001346:	2180      	movs	r1, #128	; 0x80
 8001348:	0549      	lsls	r1, r1, #21
 800134a:	430a      	orrs	r2, r1
 800134c:	61da      	str	r2, [r3, #28]
 800134e:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 8001350:	69da      	ldr	r2, [r3, #28]
 8001352:	2380      	movs	r3, #128	; 0x80
 8001354:	055b      	lsls	r3, r3, #21
 8001356:	4013      	ands	r3, r2
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800135c:	183b      	adds	r3, r7, r0
 800135e:	2201      	movs	r2, #1
 8001360:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001362:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <HAL_RCC_OscConfig+0x344>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	2380      	movs	r3, #128	; 0x80
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	4013      	ands	r3, r2
 800136c:	d11a      	bne.n	80013a4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800136e:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <HAL_RCC_OscConfig+0x344>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_RCC_OscConfig+0x344>)
 8001374:	2180      	movs	r1, #128	; 0x80
 8001376:	0049      	lsls	r1, r1, #1
 8001378:	430a      	orrs	r2, r1
 800137a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800137c:	f7ff fa54 	bl	8000828 <HAL_GetTick>
 8001380:	0003      	movs	r3, r0
 8001382:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001386:	f7ff fa4f 	bl	8000828 <HAL_GetTick>
 800138a:	0002      	movs	r2, r0
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b64      	cmp	r3, #100	; 0x64
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e1f5      	b.n	8001784 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001398:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <HAL_RCC_OscConfig+0x344>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	2380      	movs	r3, #128	; 0x80
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	4013      	ands	r3, r2
 80013a2:	d0f0      	beq.n	8001386 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d10f      	bne.n	80013cc <HAL_RCC_OscConfig+0x348>
 80013ac:	4b03      	ldr	r3, [pc, #12]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 80013ae:	6a1a      	ldr	r2, [r3, #32]
 80013b0:	4b02      	ldr	r3, [pc, #8]	; (80013bc <HAL_RCC_OscConfig+0x338>)
 80013b2:	2101      	movs	r1, #1
 80013b4:	430a      	orrs	r2, r1
 80013b6:	621a      	str	r2, [r3, #32]
 80013b8:	e036      	b.n	8001428 <HAL_RCC_OscConfig+0x3a4>
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	40021000 	.word	0x40021000
 80013c0:	fffeffff 	.word	0xfffeffff
 80013c4:	fffbffff 	.word	0xfffbffff
 80013c8:	40007000 	.word	0x40007000
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d10c      	bne.n	80013ee <HAL_RCC_OscConfig+0x36a>
 80013d4:	4bca      	ldr	r3, [pc, #808]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 80013d6:	6a1a      	ldr	r2, [r3, #32]
 80013d8:	4bc9      	ldr	r3, [pc, #804]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 80013da:	2101      	movs	r1, #1
 80013dc:	438a      	bics	r2, r1
 80013de:	621a      	str	r2, [r3, #32]
 80013e0:	4bc7      	ldr	r3, [pc, #796]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 80013e2:	6a1a      	ldr	r2, [r3, #32]
 80013e4:	4bc6      	ldr	r3, [pc, #792]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 80013e6:	2104      	movs	r1, #4
 80013e8:	438a      	bics	r2, r1
 80013ea:	621a      	str	r2, [r3, #32]
 80013ec:	e01c      	b.n	8001428 <HAL_RCC_OscConfig+0x3a4>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	2b05      	cmp	r3, #5
 80013f4:	d10c      	bne.n	8001410 <HAL_RCC_OscConfig+0x38c>
 80013f6:	4bc2      	ldr	r3, [pc, #776]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 80013f8:	6a1a      	ldr	r2, [r3, #32]
 80013fa:	4bc1      	ldr	r3, [pc, #772]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 80013fc:	2104      	movs	r1, #4
 80013fe:	430a      	orrs	r2, r1
 8001400:	621a      	str	r2, [r3, #32]
 8001402:	4bbf      	ldr	r3, [pc, #764]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 8001404:	6a1a      	ldr	r2, [r3, #32]
 8001406:	4bbe      	ldr	r3, [pc, #760]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 8001408:	2101      	movs	r1, #1
 800140a:	430a      	orrs	r2, r1
 800140c:	621a      	str	r2, [r3, #32]
 800140e:	e00b      	b.n	8001428 <HAL_RCC_OscConfig+0x3a4>
 8001410:	4bbb      	ldr	r3, [pc, #748]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 8001412:	6a1a      	ldr	r2, [r3, #32]
 8001414:	4bba      	ldr	r3, [pc, #744]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 8001416:	2101      	movs	r1, #1
 8001418:	438a      	bics	r2, r1
 800141a:	621a      	str	r2, [r3, #32]
 800141c:	4bb8      	ldr	r3, [pc, #736]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 800141e:	6a1a      	ldr	r2, [r3, #32]
 8001420:	4bb7      	ldr	r3, [pc, #732]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 8001422:	2104      	movs	r1, #4
 8001424:	438a      	bics	r2, r1
 8001426:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d014      	beq.n	800145a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001430:	f7ff f9fa 	bl	8000828 <HAL_GetTick>
 8001434:	0003      	movs	r3, r0
 8001436:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001438:	e009      	b.n	800144e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800143a:	f7ff f9f5 	bl	8000828 <HAL_GetTick>
 800143e:	0002      	movs	r2, r0
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	4aaf      	ldr	r2, [pc, #700]	; (8001704 <HAL_RCC_OscConfig+0x680>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e19a      	b.n	8001784 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800144e:	4bac      	ldr	r3, [pc, #688]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	2202      	movs	r2, #2
 8001454:	4013      	ands	r3, r2
 8001456:	d0f0      	beq.n	800143a <HAL_RCC_OscConfig+0x3b6>
 8001458:	e013      	b.n	8001482 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145a:	f7ff f9e5 	bl	8000828 <HAL_GetTick>
 800145e:	0003      	movs	r3, r0
 8001460:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001462:	e009      	b.n	8001478 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001464:	f7ff f9e0 	bl	8000828 <HAL_GetTick>
 8001468:	0002      	movs	r2, r0
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	4aa5      	ldr	r2, [pc, #660]	; (8001704 <HAL_RCC_OscConfig+0x680>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e185      	b.n	8001784 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001478:	4ba1      	ldr	r3, [pc, #644]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	2202      	movs	r2, #2
 800147e:	4013      	ands	r3, r2
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001482:	231f      	movs	r3, #31
 8001484:	18fb      	adds	r3, r7, r3
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d105      	bne.n	8001498 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800148c:	4b9c      	ldr	r3, [pc, #624]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 800148e:	69da      	ldr	r2, [r3, #28]
 8001490:	4b9b      	ldr	r3, [pc, #620]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 8001492:	499d      	ldr	r1, [pc, #628]	; (8001708 <HAL_RCC_OscConfig+0x684>)
 8001494:	400a      	ands	r2, r1
 8001496:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2210      	movs	r2, #16
 800149e:	4013      	ands	r3, r2
 80014a0:	d063      	beq.n	800156a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d12a      	bne.n	8001500 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014aa:	4b95      	ldr	r3, [pc, #596]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 80014ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ae:	4b94      	ldr	r3, [pc, #592]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 80014b0:	2104      	movs	r1, #4
 80014b2:	430a      	orrs	r2, r1
 80014b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80014b6:	4b92      	ldr	r3, [pc, #584]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 80014b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ba:	4b91      	ldr	r3, [pc, #580]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 80014bc:	2101      	movs	r1, #1
 80014be:	430a      	orrs	r2, r1
 80014c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c2:	f7ff f9b1 	bl	8000828 <HAL_GetTick>
 80014c6:	0003      	movs	r3, r0
 80014c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014cc:	f7ff f9ac 	bl	8000828 <HAL_GetTick>
 80014d0:	0002      	movs	r2, r0
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e152      	b.n	8001784 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80014de:	4b88      	ldr	r3, [pc, #544]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 80014e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014e2:	2202      	movs	r2, #2
 80014e4:	4013      	ands	r3, r2
 80014e6:	d0f1      	beq.n	80014cc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80014e8:	4b85      	ldr	r3, [pc, #532]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 80014ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ec:	22f8      	movs	r2, #248	; 0xf8
 80014ee:	4393      	bics	r3, r2
 80014f0:	0019      	movs	r1, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	00da      	lsls	r2, r3, #3
 80014f8:	4b81      	ldr	r3, [pc, #516]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 80014fa:	430a      	orrs	r2, r1
 80014fc:	635a      	str	r2, [r3, #52]	; 0x34
 80014fe:	e034      	b.n	800156a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	3305      	adds	r3, #5
 8001506:	d111      	bne.n	800152c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001508:	4b7d      	ldr	r3, [pc, #500]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 800150a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800150c:	4b7c      	ldr	r3, [pc, #496]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 800150e:	2104      	movs	r1, #4
 8001510:	438a      	bics	r2, r1
 8001512:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001514:	4b7a      	ldr	r3, [pc, #488]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 8001516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001518:	22f8      	movs	r2, #248	; 0xf8
 800151a:	4393      	bics	r3, r2
 800151c:	0019      	movs	r1, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	00da      	lsls	r2, r3, #3
 8001524:	4b76      	ldr	r3, [pc, #472]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 8001526:	430a      	orrs	r2, r1
 8001528:	635a      	str	r2, [r3, #52]	; 0x34
 800152a:	e01e      	b.n	800156a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800152c:	4b74      	ldr	r3, [pc, #464]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 800152e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001530:	4b73      	ldr	r3, [pc, #460]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 8001532:	2104      	movs	r1, #4
 8001534:	430a      	orrs	r2, r1
 8001536:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001538:	4b71      	ldr	r3, [pc, #452]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 800153a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800153c:	4b70      	ldr	r3, [pc, #448]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 800153e:	2101      	movs	r1, #1
 8001540:	438a      	bics	r2, r1
 8001542:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001544:	f7ff f970 	bl	8000828 <HAL_GetTick>
 8001548:	0003      	movs	r3, r0
 800154a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800154e:	f7ff f96b 	bl	8000828 <HAL_GetTick>
 8001552:	0002      	movs	r2, r0
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e111      	b.n	8001784 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001560:	4b67      	ldr	r3, [pc, #412]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 8001562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001564:	2202      	movs	r2, #2
 8001566:	4013      	ands	r3, r2
 8001568:	d1f1      	bne.n	800154e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2220      	movs	r2, #32
 8001570:	4013      	ands	r3, r2
 8001572:	d05c      	beq.n	800162e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001574:	4b62      	ldr	r3, [pc, #392]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	220c      	movs	r2, #12
 800157a:	4013      	ands	r3, r2
 800157c:	2b0c      	cmp	r3, #12
 800157e:	d00e      	beq.n	800159e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001580:	4b5f      	ldr	r3, [pc, #380]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	220c      	movs	r2, #12
 8001586:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001588:	2b08      	cmp	r3, #8
 800158a:	d114      	bne.n	80015b6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800158c:	4b5c      	ldr	r3, [pc, #368]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	23c0      	movs	r3, #192	; 0xc0
 8001592:	025b      	lsls	r3, r3, #9
 8001594:	401a      	ands	r2, r3
 8001596:	23c0      	movs	r3, #192	; 0xc0
 8001598:	025b      	lsls	r3, r3, #9
 800159a:	429a      	cmp	r2, r3
 800159c:	d10b      	bne.n	80015b6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800159e:	4b58      	ldr	r3, [pc, #352]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 80015a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015a2:	2380      	movs	r3, #128	; 0x80
 80015a4:	025b      	lsls	r3, r3, #9
 80015a6:	4013      	ands	r3, r2
 80015a8:	d040      	beq.n	800162c <HAL_RCC_OscConfig+0x5a8>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a1b      	ldr	r3, [r3, #32]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d03c      	beq.n	800162c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e0e6      	b.n	8001784 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a1b      	ldr	r3, [r3, #32]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d01b      	beq.n	80015f6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80015be:	4b50      	ldr	r3, [pc, #320]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 80015c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015c2:	4b4f      	ldr	r3, [pc, #316]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 80015c4:	2180      	movs	r1, #128	; 0x80
 80015c6:	0249      	lsls	r1, r1, #9
 80015c8:	430a      	orrs	r2, r1
 80015ca:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015cc:	f7ff f92c 	bl	8000828 <HAL_GetTick>
 80015d0:	0003      	movs	r3, r0
 80015d2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015d6:	f7ff f927 	bl	8000828 <HAL_GetTick>
 80015da:	0002      	movs	r2, r0
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e0cd      	b.n	8001784 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80015e8:	4b45      	ldr	r3, [pc, #276]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 80015ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	025b      	lsls	r3, r3, #9
 80015f0:	4013      	ands	r3, r2
 80015f2:	d0f0      	beq.n	80015d6 <HAL_RCC_OscConfig+0x552>
 80015f4:	e01b      	b.n	800162e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80015f6:	4b42      	ldr	r3, [pc, #264]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 80015f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015fa:	4b41      	ldr	r3, [pc, #260]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 80015fc:	4943      	ldr	r1, [pc, #268]	; (800170c <HAL_RCC_OscConfig+0x688>)
 80015fe:	400a      	ands	r2, r1
 8001600:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001602:	f7ff f911 	bl	8000828 <HAL_GetTick>
 8001606:	0003      	movs	r3, r0
 8001608:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800160c:	f7ff f90c 	bl	8000828 <HAL_GetTick>
 8001610:	0002      	movs	r2, r0
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e0b2      	b.n	8001784 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800161e:	4b38      	ldr	r3, [pc, #224]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 8001620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001622:	2380      	movs	r3, #128	; 0x80
 8001624:	025b      	lsls	r3, r3, #9
 8001626:	4013      	ands	r3, r2
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0x588>
 800162a:	e000      	b.n	800162e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800162c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001632:	2b00      	cmp	r3, #0
 8001634:	d100      	bne.n	8001638 <HAL_RCC_OscConfig+0x5b4>
 8001636:	e0a4      	b.n	8001782 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001638:	4b31      	ldr	r3, [pc, #196]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	220c      	movs	r2, #12
 800163e:	4013      	ands	r3, r2
 8001640:	2b08      	cmp	r3, #8
 8001642:	d100      	bne.n	8001646 <HAL_RCC_OscConfig+0x5c2>
 8001644:	e078      	b.n	8001738 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164a:	2b02      	cmp	r3, #2
 800164c:	d14c      	bne.n	80016e8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800164e:	4b2c      	ldr	r3, [pc, #176]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4b2b      	ldr	r3, [pc, #172]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 8001654:	492e      	ldr	r1, [pc, #184]	; (8001710 <HAL_RCC_OscConfig+0x68c>)
 8001656:	400a      	ands	r2, r1
 8001658:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165a:	f7ff f8e5 	bl	8000828 <HAL_GetTick>
 800165e:	0003      	movs	r3, r0
 8001660:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001664:	f7ff f8e0 	bl	8000828 <HAL_GetTick>
 8001668:	0002      	movs	r2, r0
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e086      	b.n	8001784 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001676:	4b22      	ldr	r3, [pc, #136]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	2380      	movs	r3, #128	; 0x80
 800167c:	049b      	lsls	r3, r3, #18
 800167e:	4013      	ands	r3, r2
 8001680:	d1f0      	bne.n	8001664 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001682:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 8001684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001686:	220f      	movs	r2, #15
 8001688:	4393      	bics	r3, r2
 800168a:	0019      	movs	r1, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001690:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 8001692:	430a      	orrs	r2, r1
 8001694:	62da      	str	r2, [r3, #44]	; 0x2c
 8001696:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	4a1e      	ldr	r2, [pc, #120]	; (8001714 <HAL_RCC_OscConfig+0x690>)
 800169c:	4013      	ands	r3, r2
 800169e:	0019      	movs	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a8:	431a      	orrs	r2, r3
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 80016ac:	430a      	orrs	r2, r1
 80016ae:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016b0:	4b13      	ldr	r3, [pc, #76]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 80016b6:	2180      	movs	r1, #128	; 0x80
 80016b8:	0449      	lsls	r1, r1, #17
 80016ba:	430a      	orrs	r2, r1
 80016bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016be:	f7ff f8b3 	bl	8000828 <HAL_GetTick>
 80016c2:	0003      	movs	r3, r0
 80016c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c8:	f7ff f8ae 	bl	8000828 <HAL_GetTick>
 80016cc:	0002      	movs	r2, r0
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e054      	b.n	8001784 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	049b      	lsls	r3, r3, #18
 80016e2:	4013      	ands	r3, r2
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0x644>
 80016e6:	e04c      	b.n	8001782 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b04      	ldr	r3, [pc, #16]	; (8001700 <HAL_RCC_OscConfig+0x67c>)
 80016ee:	4908      	ldr	r1, [pc, #32]	; (8001710 <HAL_RCC_OscConfig+0x68c>)
 80016f0:	400a      	ands	r2, r1
 80016f2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f4:	f7ff f898 	bl	8000828 <HAL_GetTick>
 80016f8:	0003      	movs	r3, r0
 80016fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016fc:	e015      	b.n	800172a <HAL_RCC_OscConfig+0x6a6>
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	40021000 	.word	0x40021000
 8001704:	00001388 	.word	0x00001388
 8001708:	efffffff 	.word	0xefffffff
 800170c:	fffeffff 	.word	0xfffeffff
 8001710:	feffffff 	.word	0xfeffffff
 8001714:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001718:	f7ff f886 	bl	8000828 <HAL_GetTick>
 800171c:	0002      	movs	r2, r0
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e02c      	b.n	8001784 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800172a:	4b18      	ldr	r3, [pc, #96]	; (800178c <HAL_RCC_OscConfig+0x708>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	2380      	movs	r3, #128	; 0x80
 8001730:	049b      	lsls	r3, r3, #18
 8001732:	4013      	ands	r3, r2
 8001734:	d1f0      	bne.n	8001718 <HAL_RCC_OscConfig+0x694>
 8001736:	e024      	b.n	8001782 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	2b01      	cmp	r3, #1
 800173e:	d101      	bne.n	8001744 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e01f      	b.n	8001784 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <HAL_RCC_OscConfig+0x708>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <HAL_RCC_OscConfig+0x708>)
 800174c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	23c0      	movs	r3, #192	; 0xc0
 8001754:	025b      	lsls	r3, r3, #9
 8001756:	401a      	ands	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175c:	429a      	cmp	r2, r3
 800175e:	d10e      	bne.n	800177e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	220f      	movs	r2, #15
 8001764:	401a      	ands	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800176a:	429a      	cmp	r2, r3
 800176c:	d107      	bne.n	800177e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	23f0      	movs	r3, #240	; 0xf0
 8001772:	039b      	lsls	r3, r3, #14
 8001774:	401a      	ands	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800177a:	429a      	cmp	r2, r3
 800177c:	d001      	beq.n	8001782 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e000      	b.n	8001784 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	0018      	movs	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	b008      	add	sp, #32
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40021000 	.word	0x40021000

08001790 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d101      	bne.n	80017a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e0bf      	b.n	8001924 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017a4:	4b61      	ldr	r3, [pc, #388]	; (800192c <HAL_RCC_ClockConfig+0x19c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2201      	movs	r2, #1
 80017aa:	4013      	ands	r3, r2
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d911      	bls.n	80017d6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b2:	4b5e      	ldr	r3, [pc, #376]	; (800192c <HAL_RCC_ClockConfig+0x19c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2201      	movs	r2, #1
 80017b8:	4393      	bics	r3, r2
 80017ba:	0019      	movs	r1, r3
 80017bc:	4b5b      	ldr	r3, [pc, #364]	; (800192c <HAL_RCC_ClockConfig+0x19c>)
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c4:	4b59      	ldr	r3, [pc, #356]	; (800192c <HAL_RCC_ClockConfig+0x19c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2201      	movs	r2, #1
 80017ca:	4013      	ands	r3, r2
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d001      	beq.n	80017d6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e0a6      	b.n	8001924 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2202      	movs	r2, #2
 80017dc:	4013      	ands	r3, r2
 80017de:	d015      	beq.n	800180c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2204      	movs	r2, #4
 80017e6:	4013      	ands	r3, r2
 80017e8:	d006      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80017ea:	4b51      	ldr	r3, [pc, #324]	; (8001930 <HAL_RCC_ClockConfig+0x1a0>)
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	4b50      	ldr	r3, [pc, #320]	; (8001930 <HAL_RCC_ClockConfig+0x1a0>)
 80017f0:	21e0      	movs	r1, #224	; 0xe0
 80017f2:	00c9      	lsls	r1, r1, #3
 80017f4:	430a      	orrs	r2, r1
 80017f6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f8:	4b4d      	ldr	r3, [pc, #308]	; (8001930 <HAL_RCC_ClockConfig+0x1a0>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	22f0      	movs	r2, #240	; 0xf0
 80017fe:	4393      	bics	r3, r2
 8001800:	0019      	movs	r1, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	4b4a      	ldr	r3, [pc, #296]	; (8001930 <HAL_RCC_ClockConfig+0x1a0>)
 8001808:	430a      	orrs	r2, r1
 800180a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2201      	movs	r2, #1
 8001812:	4013      	ands	r3, r2
 8001814:	d04c      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d107      	bne.n	800182e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181e:	4b44      	ldr	r3, [pc, #272]	; (8001930 <HAL_RCC_ClockConfig+0x1a0>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	2380      	movs	r3, #128	; 0x80
 8001824:	029b      	lsls	r3, r3, #10
 8001826:	4013      	ands	r3, r2
 8001828:	d120      	bne.n	800186c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e07a      	b.n	8001924 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b02      	cmp	r3, #2
 8001834:	d107      	bne.n	8001846 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001836:	4b3e      	ldr	r3, [pc, #248]	; (8001930 <HAL_RCC_ClockConfig+0x1a0>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	2380      	movs	r3, #128	; 0x80
 800183c:	049b      	lsls	r3, r3, #18
 800183e:	4013      	ands	r3, r2
 8001840:	d114      	bne.n	800186c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e06e      	b.n	8001924 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b03      	cmp	r3, #3
 800184c:	d107      	bne.n	800185e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800184e:	4b38      	ldr	r3, [pc, #224]	; (8001930 <HAL_RCC_ClockConfig+0x1a0>)
 8001850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001852:	2380      	movs	r3, #128	; 0x80
 8001854:	025b      	lsls	r3, r3, #9
 8001856:	4013      	ands	r3, r2
 8001858:	d108      	bne.n	800186c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e062      	b.n	8001924 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185e:	4b34      	ldr	r3, [pc, #208]	; (8001930 <HAL_RCC_ClockConfig+0x1a0>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2202      	movs	r2, #2
 8001864:	4013      	ands	r3, r2
 8001866:	d101      	bne.n	800186c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e05b      	b.n	8001924 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800186c:	4b30      	ldr	r3, [pc, #192]	; (8001930 <HAL_RCC_ClockConfig+0x1a0>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2203      	movs	r2, #3
 8001872:	4393      	bics	r3, r2
 8001874:	0019      	movs	r1, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	4b2d      	ldr	r3, [pc, #180]	; (8001930 <HAL_RCC_ClockConfig+0x1a0>)
 800187c:	430a      	orrs	r2, r1
 800187e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001880:	f7fe ffd2 	bl	8000828 <HAL_GetTick>
 8001884:	0003      	movs	r3, r0
 8001886:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001888:	e009      	b.n	800189e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800188a:	f7fe ffcd 	bl	8000828 <HAL_GetTick>
 800188e:	0002      	movs	r2, r0
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	4a27      	ldr	r2, [pc, #156]	; (8001934 <HAL_RCC_ClockConfig+0x1a4>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d901      	bls.n	800189e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e042      	b.n	8001924 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189e:	4b24      	ldr	r3, [pc, #144]	; (8001930 <HAL_RCC_ClockConfig+0x1a0>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	220c      	movs	r2, #12
 80018a4:	401a      	ands	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d1ec      	bne.n	800188a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018b0:	4b1e      	ldr	r3, [pc, #120]	; (800192c <HAL_RCC_ClockConfig+0x19c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2201      	movs	r2, #1
 80018b6:	4013      	ands	r3, r2
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d211      	bcs.n	80018e2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018be:	4b1b      	ldr	r3, [pc, #108]	; (800192c <HAL_RCC_ClockConfig+0x19c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2201      	movs	r2, #1
 80018c4:	4393      	bics	r3, r2
 80018c6:	0019      	movs	r1, r3
 80018c8:	4b18      	ldr	r3, [pc, #96]	; (800192c <HAL_RCC_ClockConfig+0x19c>)
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d0:	4b16      	ldr	r3, [pc, #88]	; (800192c <HAL_RCC_ClockConfig+0x19c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2201      	movs	r2, #1
 80018d6:	4013      	ands	r3, r2
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d001      	beq.n	80018e2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e020      	b.n	8001924 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2204      	movs	r2, #4
 80018e8:	4013      	ands	r3, r2
 80018ea:	d009      	beq.n	8001900 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018ec:	4b10      	ldr	r3, [pc, #64]	; (8001930 <HAL_RCC_ClockConfig+0x1a0>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	4a11      	ldr	r2, [pc, #68]	; (8001938 <HAL_RCC_ClockConfig+0x1a8>)
 80018f2:	4013      	ands	r3, r2
 80018f4:	0019      	movs	r1, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68da      	ldr	r2, [r3, #12]
 80018fa:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <HAL_RCC_ClockConfig+0x1a0>)
 80018fc:	430a      	orrs	r2, r1
 80018fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001900:	f000 f820 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 8001904:	0001      	movs	r1, r0
 8001906:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <HAL_RCC_ClockConfig+0x1a0>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	091b      	lsrs	r3, r3, #4
 800190c:	220f      	movs	r2, #15
 800190e:	4013      	ands	r3, r2
 8001910:	4a0a      	ldr	r2, [pc, #40]	; (800193c <HAL_RCC_ClockConfig+0x1ac>)
 8001912:	5cd3      	ldrb	r3, [r2, r3]
 8001914:	000a      	movs	r2, r1
 8001916:	40da      	lsrs	r2, r3
 8001918:	4b09      	ldr	r3, [pc, #36]	; (8001940 <HAL_RCC_ClockConfig+0x1b0>)
 800191a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800191c:	2000      	movs	r0, #0
 800191e:	f7fe ff3d 	bl	800079c <HAL_InitTick>
  
  return HAL_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	0018      	movs	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	b004      	add	sp, #16
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40022000 	.word	0x40022000
 8001930:	40021000 	.word	0x40021000
 8001934:	00001388 	.word	0x00001388
 8001938:	fffff8ff 	.word	0xfffff8ff
 800193c:	08003b70 	.word	0x08003b70
 8001940:	20000000 	.word	0x20000000

08001944 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001944:	b590      	push	{r4, r7, lr}
 8001946:	b08f      	sub	sp, #60	; 0x3c
 8001948:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800194a:	2314      	movs	r3, #20
 800194c:	18fb      	adds	r3, r7, r3
 800194e:	4a38      	ldr	r2, [pc, #224]	; (8001a30 <HAL_RCC_GetSysClockFreq+0xec>)
 8001950:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001952:	c313      	stmia	r3!, {r0, r1, r4}
 8001954:	6812      	ldr	r2, [r2, #0]
 8001956:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	4a36      	ldr	r2, [pc, #216]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xf0>)
 800195c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800195e:	c313      	stmia	r3!, {r0, r1, r4}
 8001960:	6812      	ldr	r2, [r2, #0]
 8001962:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001964:	2300      	movs	r3, #0
 8001966:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001968:	2300      	movs	r3, #0
 800196a:	62bb      	str	r3, [r7, #40]	; 0x28
 800196c:	2300      	movs	r3, #0
 800196e:	637b      	str	r3, [r7, #52]	; 0x34
 8001970:	2300      	movs	r3, #0
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001978:	4b2f      	ldr	r3, [pc, #188]	; (8001a38 <HAL_RCC_GetSysClockFreq+0xf4>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800197e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001980:	220c      	movs	r2, #12
 8001982:	4013      	ands	r3, r2
 8001984:	2b0c      	cmp	r3, #12
 8001986:	d047      	beq.n	8001a18 <HAL_RCC_GetSysClockFreq+0xd4>
 8001988:	d849      	bhi.n	8001a1e <HAL_RCC_GetSysClockFreq+0xda>
 800198a:	2b04      	cmp	r3, #4
 800198c:	d002      	beq.n	8001994 <HAL_RCC_GetSysClockFreq+0x50>
 800198e:	2b08      	cmp	r3, #8
 8001990:	d003      	beq.n	800199a <HAL_RCC_GetSysClockFreq+0x56>
 8001992:	e044      	b.n	8001a1e <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001994:	4b29      	ldr	r3, [pc, #164]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001996:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001998:	e044      	b.n	8001a24 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800199a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800199c:	0c9b      	lsrs	r3, r3, #18
 800199e:	220f      	movs	r2, #15
 80019a0:	4013      	ands	r3, r2
 80019a2:	2214      	movs	r2, #20
 80019a4:	18ba      	adds	r2, r7, r2
 80019a6:	5cd3      	ldrb	r3, [r2, r3]
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80019aa:	4b23      	ldr	r3, [pc, #140]	; (8001a38 <HAL_RCC_GetSysClockFreq+0xf4>)
 80019ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ae:	220f      	movs	r2, #15
 80019b0:	4013      	ands	r3, r2
 80019b2:	1d3a      	adds	r2, r7, #4
 80019b4:	5cd3      	ldrb	r3, [r2, r3]
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80019b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ba:	23c0      	movs	r3, #192	; 0xc0
 80019bc:	025b      	lsls	r3, r3, #9
 80019be:	401a      	ands	r2, r3
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	025b      	lsls	r3, r3, #9
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d109      	bne.n	80019dc <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019ca:	481c      	ldr	r0, [pc, #112]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019cc:	f7fe fb9c 	bl	8000108 <__udivsi3>
 80019d0:	0003      	movs	r3, r0
 80019d2:	001a      	movs	r2, r3
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	4353      	muls	r3, r2
 80019d8:	637b      	str	r3, [r7, #52]	; 0x34
 80019da:	e01a      	b.n	8001a12 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80019dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019de:	23c0      	movs	r3, #192	; 0xc0
 80019e0:	025b      	lsls	r3, r3, #9
 80019e2:	401a      	ands	r2, r3
 80019e4:	23c0      	movs	r3, #192	; 0xc0
 80019e6:	025b      	lsls	r3, r3, #9
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d109      	bne.n	8001a00 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019ee:	4814      	ldr	r0, [pc, #80]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xfc>)
 80019f0:	f7fe fb8a 	bl	8000108 <__udivsi3>
 80019f4:	0003      	movs	r3, r0
 80019f6:	001a      	movs	r2, r3
 80019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fa:	4353      	muls	r3, r2
 80019fc:	637b      	str	r3, [r7, #52]	; 0x34
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a02:	480e      	ldr	r0, [pc, #56]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a04:	f7fe fb80 	bl	8000108 <__udivsi3>
 8001a08:	0003      	movs	r3, r0
 8001a0a:	001a      	movs	r2, r3
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	4353      	muls	r3, r2
 8001a10:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a14:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a16:	e005      	b.n	8001a24 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001a18:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a1a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a1c:	e002      	b.n	8001a24 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a1e:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a20:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a22:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001a26:	0018      	movs	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	b00f      	add	sp, #60	; 0x3c
 8001a2c:	bd90      	pop	{r4, r7, pc}
 8001a2e:	46c0      	nop			; (mov r8, r8)
 8001a30:	08003b50 	.word	0x08003b50
 8001a34:	08003b60 	.word	0x08003b60
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	007a1200 	.word	0x007a1200
 8001a40:	02dc6c00 	.word	0x02dc6c00

08001a44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a48:	4b02      	ldr	r3, [pc, #8]	; (8001a54 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
}
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	20000000 	.word	0x20000000

08001a58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001a5c:	f7ff fff2 	bl	8001a44 <HAL_RCC_GetHCLKFreq>
 8001a60:	0001      	movs	r1, r0
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	0a1b      	lsrs	r3, r3, #8
 8001a68:	2207      	movs	r2, #7
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	4a04      	ldr	r2, [pc, #16]	; (8001a80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a6e:	5cd3      	ldrb	r3, [r2, r3]
 8001a70:	40d9      	lsrs	r1, r3
 8001a72:	000b      	movs	r3, r1
}    
 8001a74:	0018      	movs	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	08003b80 	.word	0x08003b80

08001a84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e04e      	b.n	8001b34 <HAL_TIM_PWM_Init+0xb0>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	223d      	movs	r2, #61	; 0x3d
 8001a9a:	5c9b      	ldrb	r3, [r3, r2]
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d113      	bne.n	8001aca <HAL_TIM_PWM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	223c      	movs	r2, #60	; 0x3c
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	0018      	movs	r0, r3
 8001aae:	f000 ff23 	bl	80028f8 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d102      	bne.n	8001ac0 <HAL_TIM_PWM_Init+0x3c>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a1f      	ldr	r2, [pc, #124]	; (8001b3c <HAL_TIM_PWM_Init+0xb8>)
 8001abe:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	0010      	movs	r0, r2
 8001ac8:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	223d      	movs	r2, #61	; 0x3d
 8001ace:	2102      	movs	r1, #2
 8001ad0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	0019      	movs	r1, r3
 8001adc:	0010      	movs	r0, r2
 8001ade:	f000 fc91 	bl	8002404 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2246      	movs	r2, #70	; 0x46
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	223e      	movs	r2, #62	; 0x3e
 8001aee:	2101      	movs	r1, #1
 8001af0:	5499      	strb	r1, [r3, r2]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	223f      	movs	r2, #63	; 0x3f
 8001af6:	2101      	movs	r1, #1
 8001af8:	5499      	strb	r1, [r3, r2]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2240      	movs	r2, #64	; 0x40
 8001afe:	2101      	movs	r1, #1
 8001b00:	5499      	strb	r1, [r3, r2]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2241      	movs	r2, #65	; 0x41
 8001b06:	2101      	movs	r1, #1
 8001b08:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2242      	movs	r2, #66	; 0x42
 8001b0e:	2101      	movs	r1, #1
 8001b10:	5499      	strb	r1, [r3, r2]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2243      	movs	r2, #67	; 0x43
 8001b16:	2101      	movs	r1, #1
 8001b18:	5499      	strb	r1, [r3, r2]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2244      	movs	r2, #68	; 0x44
 8001b1e:	2101      	movs	r1, #1
 8001b20:	5499      	strb	r1, [r3, r2]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2245      	movs	r2, #69	; 0x45
 8001b26:	2101      	movs	r1, #1
 8001b28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	223d      	movs	r2, #61	; 0x3d
 8001b2e:	2101      	movs	r1, #1
 8001b30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	0018      	movs	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	b002      	add	sp, #8
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	080004c9 	.word	0x080004c9

08001b40 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
 8001b4c:	001a      	movs	r2, r3
 8001b4e:	1cbb      	adds	r3, r7, #2
 8001b50:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b52:	2317      	movs	r3, #23
 8001b54:	18fb      	adds	r3, r7, r3
 8001b56:	2200      	movs	r2, #0
 8001b58:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d108      	bne.n	8001b72 <HAL_TIM_PWM_Start_DMA+0x32>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	223e      	movs	r2, #62	; 0x3e
 8001b64:	5c9b      	ldrb	r3, [r3, r2]
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	3b02      	subs	r3, #2
 8001b6a:	425a      	negs	r2, r3
 8001b6c:	4153      	adcs	r3, r2
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	e01f      	b.n	8001bb2 <HAL_TIM_PWM_Start_DMA+0x72>
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	2b04      	cmp	r3, #4
 8001b76:	d108      	bne.n	8001b8a <HAL_TIM_PWM_Start_DMA+0x4a>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	223f      	movs	r2, #63	; 0x3f
 8001b7c:	5c9b      	ldrb	r3, [r3, r2]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	3b02      	subs	r3, #2
 8001b82:	425a      	negs	r2, r3
 8001b84:	4153      	adcs	r3, r2
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	e013      	b.n	8001bb2 <HAL_TIM_PWM_Start_DMA+0x72>
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	d108      	bne.n	8001ba2 <HAL_TIM_PWM_Start_DMA+0x62>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2240      	movs	r2, #64	; 0x40
 8001b94:	5c9b      	ldrb	r3, [r3, r2]
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	3b02      	subs	r3, #2
 8001b9a:	425a      	negs	r2, r3
 8001b9c:	4153      	adcs	r3, r2
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	e007      	b.n	8001bb2 <HAL_TIM_PWM_Start_DMA+0x72>
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2241      	movs	r2, #65	; 0x41
 8001ba6:	5c9b      	ldrb	r3, [r3, r2]
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	3b02      	subs	r3, #2
 8001bac:	425a      	negs	r2, r3
 8001bae:	4153      	adcs	r3, r2
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	e15a      	b.n	8001e70 <HAL_TIM_PWM_Start_DMA+0x330>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d108      	bne.n	8001bd2 <HAL_TIM_PWM_Start_DMA+0x92>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	223e      	movs	r2, #62	; 0x3e
 8001bc4:	5c9b      	ldrb	r3, [r3, r2]
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	425a      	negs	r2, r3
 8001bcc:	4153      	adcs	r3, r2
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	e01f      	b.n	8001c12 <HAL_TIM_PWM_Start_DMA+0xd2>
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	d108      	bne.n	8001bea <HAL_TIM_PWM_Start_DMA+0xaa>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	223f      	movs	r2, #63	; 0x3f
 8001bdc:	5c9b      	ldrb	r3, [r3, r2]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	3b01      	subs	r3, #1
 8001be2:	425a      	negs	r2, r3
 8001be4:	4153      	adcs	r3, r2
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	e013      	b.n	8001c12 <HAL_TIM_PWM_Start_DMA+0xd2>
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d108      	bne.n	8001c02 <HAL_TIM_PWM_Start_DMA+0xc2>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2240      	movs	r2, #64	; 0x40
 8001bf4:	5c9b      	ldrb	r3, [r3, r2]
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	425a      	negs	r2, r3
 8001bfc:	4153      	adcs	r3, r2
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	e007      	b.n	8001c12 <HAL_TIM_PWM_Start_DMA+0xd2>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2241      	movs	r2, #65	; 0x41
 8001c06:	5c9b      	ldrb	r3, [r3, r2]
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	425a      	negs	r2, r3
 8001c0e:	4153      	adcs	r3, r2
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d025      	beq.n	8001c62 <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) && (Length > 0U))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d105      	bne.n	8001c28 <HAL_TIM_PWM_Start_DMA+0xe8>
 8001c1c:	1cbb      	adds	r3, r7, #2
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e123      	b.n	8001e70 <HAL_TIM_PWM_Start_DMA+0x330>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d104      	bne.n	8001c38 <HAL_TIM_PWM_Start_DMA+0xf8>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	223e      	movs	r2, #62	; 0x3e
 8001c32:	2102      	movs	r1, #2
 8001c34:	5499      	strb	r1, [r3, r2]
 8001c36:	e016      	b.n	8001c66 <HAL_TIM_PWM_Start_DMA+0x126>
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	d104      	bne.n	8001c48 <HAL_TIM_PWM_Start_DMA+0x108>
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	223f      	movs	r2, #63	; 0x3f
 8001c42:	2102      	movs	r1, #2
 8001c44:	5499      	strb	r1, [r3, r2]
 8001c46:	e00e      	b.n	8001c66 <HAL_TIM_PWM_Start_DMA+0x126>
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2b08      	cmp	r3, #8
 8001c4c:	d104      	bne.n	8001c58 <HAL_TIM_PWM_Start_DMA+0x118>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2240      	movs	r2, #64	; 0x40
 8001c52:	2102      	movs	r1, #2
 8001c54:	5499      	strb	r1, [r3, r2]
 8001c56:	e006      	b.n	8001c66 <HAL_TIM_PWM_Start_DMA+0x126>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2241      	movs	r2, #65	; 0x41
 8001c5c:	2102      	movs	r1, #2
 8001c5e:	5499      	strb	r1, [r3, r2]
 8001c60:	e001      	b.n	8001c66 <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e104      	b.n	8001e70 <HAL_TIM_PWM_Start_DMA+0x330>
  }

  switch (Channel)
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	2b0c      	cmp	r3, #12
 8001c6a:	d100      	bne.n	8001c6e <HAL_TIM_PWM_Start_DMA+0x12e>
 8001c6c:	e080      	b.n	8001d70 <HAL_TIM_PWM_Start_DMA+0x230>
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	2b0c      	cmp	r3, #12
 8001c72:	d900      	bls.n	8001c76 <HAL_TIM_PWM_Start_DMA+0x136>
 8001c74:	e0a1      	b.n	8001dba <HAL_TIM_PWM_Start_DMA+0x27a>
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d054      	beq.n	8001d26 <HAL_TIM_PWM_Start_DMA+0x1e6>
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d900      	bls.n	8001c84 <HAL_TIM_PWM_Start_DMA+0x144>
 8001c82:	e09a      	b.n	8001dba <HAL_TIM_PWM_Start_DMA+0x27a>
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_TIM_PWM_Start_DMA+0x152>
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d025      	beq.n	8001cdc <HAL_TIM_PWM_Start_DMA+0x19c>
 8001c90:	e093      	b.n	8001dba <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	4a78      	ldr	r2, [pc, #480]	; (8001e78 <HAL_TIM_PWM_Start_DMA+0x338>)
 8001c98:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9e:	4a77      	ldr	r2, [pc, #476]	; (8001e7c <HAL_TIM_PWM_Start_DMA+0x33c>)
 8001ca0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	4a76      	ldr	r2, [pc, #472]	; (8001e80 <HAL_TIM_PWM_Start_DMA+0x340>)
 8001ca8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	3334      	adds	r3, #52	; 0x34
 8001cb6:	001a      	movs	r2, r3
 8001cb8:	1cbb      	adds	r3, r7, #2
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	f7fe fee4 	bl	8000a88 <HAL_DMA_Start_IT>
 8001cc0:	1e03      	subs	r3, r0, #0
 8001cc2:	d001      	beq.n	8001cc8 <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e0d3      	b.n	8001e70 <HAL_TIM_PWM_Start_DMA+0x330>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2180      	movs	r1, #128	; 0x80
 8001cd4:	0089      	lsls	r1, r1, #2
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	60da      	str	r2, [r3, #12]
      break;
 8001cda:	e073      	b.n	8001dc4 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce0:	4a65      	ldr	r2, [pc, #404]	; (8001e78 <HAL_TIM_PWM_Start_DMA+0x338>)
 8001ce2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce8:	4a64      	ldr	r2, [pc, #400]	; (8001e7c <HAL_TIM_PWM_Start_DMA+0x33c>)
 8001cea:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf0:	4a63      	ldr	r2, [pc, #396]	; (8001e80 <HAL_TIM_PWM_Start_DMA+0x340>)
 8001cf2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	3338      	adds	r3, #56	; 0x38
 8001d00:	001a      	movs	r2, r3
 8001d02:	1cbb      	adds	r3, r7, #2
 8001d04:	881b      	ldrh	r3, [r3, #0]
 8001d06:	f7fe febf 	bl	8000a88 <HAL_DMA_Start_IT>
 8001d0a:	1e03      	subs	r3, r0, #0
 8001d0c:	d001      	beq.n	8001d12 <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e0ae      	b.n	8001e70 <HAL_TIM_PWM_Start_DMA+0x330>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2180      	movs	r1, #128	; 0x80
 8001d1e:	00c9      	lsls	r1, r1, #3
 8001d20:	430a      	orrs	r2, r1
 8001d22:	60da      	str	r2, [r3, #12]
      break;
 8001d24:	e04e      	b.n	8001dc4 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2a:	4a53      	ldr	r2, [pc, #332]	; (8001e78 <HAL_TIM_PWM_Start_DMA+0x338>)
 8001d2c:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d32:	4a52      	ldr	r2, [pc, #328]	; (8001e7c <HAL_TIM_PWM_Start_DMA+0x33c>)
 8001d34:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3a:	4a51      	ldr	r2, [pc, #324]	; (8001e80 <HAL_TIM_PWM_Start_DMA+0x340>)
 8001d3c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	333c      	adds	r3, #60	; 0x3c
 8001d4a:	001a      	movs	r2, r3
 8001d4c:	1cbb      	adds	r3, r7, #2
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	f7fe fe9a 	bl	8000a88 <HAL_DMA_Start_IT>
 8001d54:	1e03      	subs	r3, r0, #0
 8001d56:	d001      	beq.n	8001d5c <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e089      	b.n	8001e70 <HAL_TIM_PWM_Start_DMA+0x330>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68da      	ldr	r2, [r3, #12]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2180      	movs	r1, #128	; 0x80
 8001d68:	0109      	lsls	r1, r1, #4
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	60da      	str	r2, [r3, #12]
      break;
 8001d6e:	e029      	b.n	8001dc4 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	4a40      	ldr	r2, [pc, #256]	; (8001e78 <HAL_TIM_PWM_Start_DMA+0x338>)
 8001d76:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7c:	4a3f      	ldr	r2, [pc, #252]	; (8001e7c <HAL_TIM_PWM_Start_DMA+0x33c>)
 8001d7e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d84:	4a3e      	ldr	r2, [pc, #248]	; (8001e80 <HAL_TIM_PWM_Start_DMA+0x340>)
 8001d86:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	3340      	adds	r3, #64	; 0x40
 8001d94:	001a      	movs	r2, r3
 8001d96:	1cbb      	adds	r3, r7, #2
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	f7fe fe75 	bl	8000a88 <HAL_DMA_Start_IT>
 8001d9e:	1e03      	subs	r3, r0, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e064      	b.n	8001e70 <HAL_TIM_PWM_Start_DMA+0x330>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68da      	ldr	r2, [r3, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2180      	movs	r1, #128	; 0x80
 8001db2:	0149      	lsls	r1, r1, #5
 8001db4:	430a      	orrs	r2, r1
 8001db6:	60da      	str	r2, [r3, #12]
      break;
 8001db8:	e004      	b.n	8001dc4 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 8001dba:	2317      	movs	r3, #23
 8001dbc:	18fb      	adds	r3, r7, r3
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	701a      	strb	r2, [r3, #0]
      break;
 8001dc2:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8001dc4:	2317      	movs	r3, #23
 8001dc6:	18fb      	adds	r3, r7, r3
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d14d      	bne.n	8001e6a <HAL_TIM_PWM_Start_DMA+0x32a>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68b9      	ldr	r1, [r7, #8]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f000 fd6a 	bl	80028b0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a28      	ldr	r2, [pc, #160]	; (8001e84 <HAL_TIM_PWM_Start_DMA+0x344>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d009      	beq.n	8001dfa <HAL_TIM_PWM_Start_DMA+0x2ba>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a27      	ldr	r2, [pc, #156]	; (8001e88 <HAL_TIM_PWM_Start_DMA+0x348>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d004      	beq.n	8001dfa <HAL_TIM_PWM_Start_DMA+0x2ba>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a25      	ldr	r2, [pc, #148]	; (8001e8c <HAL_TIM_PWM_Start_DMA+0x34c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d101      	bne.n	8001dfe <HAL_TIM_PWM_Start_DMA+0x2be>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <HAL_TIM_PWM_Start_DMA+0x2c0>
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d008      	beq.n	8001e16 <HAL_TIM_PWM_Start_DMA+0x2d6>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2180      	movs	r1, #128	; 0x80
 8001e10:	0209      	lsls	r1, r1, #8
 8001e12:	430a      	orrs	r2, r1
 8001e14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a1a      	ldr	r2, [pc, #104]	; (8001e84 <HAL_TIM_PWM_Start_DMA+0x344>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d00a      	beq.n	8001e36 <HAL_TIM_PWM_Start_DMA+0x2f6>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	2380      	movs	r3, #128	; 0x80
 8001e26:	05db      	lsls	r3, r3, #23
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d004      	beq.n	8001e36 <HAL_TIM_PWM_Start_DMA+0x2f6>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a17      	ldr	r2, [pc, #92]	; (8001e90 <HAL_TIM_PWM_Start_DMA+0x350>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d111      	bne.n	8001e5a <HAL_TIM_PWM_Start_DMA+0x31a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	2207      	movs	r2, #7
 8001e3e:	4013      	ands	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	2b06      	cmp	r3, #6
 8001e46:	d010      	beq.n	8001e6a <HAL_TIM_PWM_Start_DMA+0x32a>
      {
        __HAL_TIM_ENABLE(htim);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2101      	movs	r1, #1
 8001e54:	430a      	orrs	r2, r1
 8001e56:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e58:	e007      	b.n	8001e6a <HAL_TIM_PWM_Start_DMA+0x32a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2101      	movs	r1, #1
 8001e66:	430a      	orrs	r2, r1
 8001e68:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001e6a:	2317      	movs	r3, #23
 8001e6c:	18fb      	adds	r3, r7, r3
 8001e6e:	781b      	ldrb	r3, [r3, #0]
}
 8001e70:	0018      	movs	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	b006      	add	sp, #24
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	080022e9 	.word	0x080022e9
 8001e7c:	08002397 	.word	0x08002397
 8001e80:	08002251 	.word	0x08002251
 8001e84:	40012c00 	.word	0x40012c00
 8001e88:	40014400 	.word	0x40014400
 8001e8c:	40014800 	.word	0x40014800
 8001e90:	40000400 	.word	0x40000400

08001e94 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e9e:	230f      	movs	r3, #15
 8001ea0:	18fb      	adds	r3, r7, r3
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	2b0c      	cmp	r3, #12
 8001eaa:	d039      	beq.n	8001f20 <HAL_TIM_PWM_Stop_DMA+0x8c>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	2b0c      	cmp	r3, #12
 8001eb0:	d844      	bhi.n	8001f3c <HAL_TIM_PWM_Stop_DMA+0xa8>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d025      	beq.n	8001f04 <HAL_TIM_PWM_Stop_DMA+0x70>
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	2b08      	cmp	r3, #8
 8001ebc:	d83e      	bhi.n	8001f3c <HAL_TIM_PWM_Stop_DMA+0xa8>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_TIM_PWM_Stop_DMA+0x38>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d00e      	beq.n	8001ee8 <HAL_TIM_PWM_Stop_DMA+0x54>
 8001eca:	e037      	b.n	8001f3c <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4951      	ldr	r1, [pc, #324]	; (800201c <HAL_TIM_PWM_Stop_DMA+0x188>)
 8001ed8:	400a      	ands	r2, r1
 8001eda:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f7fe fe37 	bl	8000b54 <HAL_DMA_Abort_IT>
      break;
 8001ee6:	e02e      	b.n	8001f46 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	494b      	ldr	r1, [pc, #300]	; (8002020 <HAL_TIM_PWM_Stop_DMA+0x18c>)
 8001ef4:	400a      	ands	r2, r1
 8001ef6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efc:	0018      	movs	r0, r3
 8001efe:	f7fe fe29 	bl	8000b54 <HAL_DMA_Abort_IT>
      break;
 8001f02:	e020      	b.n	8001f46 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4945      	ldr	r1, [pc, #276]	; (8002024 <HAL_TIM_PWM_Stop_DMA+0x190>)
 8001f10:	400a      	ands	r2, r1
 8001f12:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f7fe fe1b 	bl	8000b54 <HAL_DMA_Abort_IT>
      break;
 8001f1e:	e012      	b.n	8001f46 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	493f      	ldr	r1, [pc, #252]	; (8002028 <HAL_TIM_PWM_Stop_DMA+0x194>)
 8001f2c:	400a      	ands	r2, r1
 8001f2e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f34:	0018      	movs	r0, r3
 8001f36:	f7fe fe0d 	bl	8000b54 <HAL_DMA_Abort_IT>
      break;
 8001f3a:	e004      	b.n	8001f46 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8001f3c:	230f      	movs	r3, #15
 8001f3e:	18fb      	adds	r3, r7, r3
 8001f40:	2201      	movs	r2, #1
 8001f42:	701a      	strb	r2, [r3, #0]
      break;
 8001f44:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8001f46:	230f      	movs	r3, #15
 8001f48:	18fb      	adds	r3, r7, r3
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d15e      	bne.n	800200e <HAL_TIM_PWM_Stop_DMA+0x17a>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6839      	ldr	r1, [r7, #0]
 8001f56:	2200      	movs	r2, #0
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f000 fca9 	bl	80028b0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a32      	ldr	r2, [pc, #200]	; (800202c <HAL_TIM_PWM_Stop_DMA+0x198>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d009      	beq.n	8001f7c <HAL_TIM_PWM_Stop_DMA+0xe8>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a30      	ldr	r2, [pc, #192]	; (8002030 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d004      	beq.n	8001f7c <HAL_TIM_PWM_Stop_DMA+0xe8>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a2f      	ldr	r2, [pc, #188]	; (8002034 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d101      	bne.n	8001f80 <HAL_TIM_PWM_Stop_DMA+0xec>
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e000      	b.n	8001f82 <HAL_TIM_PWM_Stop_DMA+0xee>
 8001f80:	2300      	movs	r3, #0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d013      	beq.n	8001fae <HAL_TIM_PWM_Stop_DMA+0x11a>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	4a2a      	ldr	r2, [pc, #168]	; (8002038 <HAL_TIM_PWM_Stop_DMA+0x1a4>)
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d10d      	bne.n	8001fae <HAL_TIM_PWM_Stop_DMA+0x11a>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	4a28      	ldr	r2, [pc, #160]	; (800203c <HAL_TIM_PWM_Stop_DMA+0x1a8>)
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d107      	bne.n	8001fae <HAL_TIM_PWM_Stop_DMA+0x11a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4925      	ldr	r1, [pc, #148]	; (8002040 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 8001faa:	400a      	ands	r2, r1
 8001fac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	4a20      	ldr	r2, [pc, #128]	; (8002038 <HAL_TIM_PWM_Stop_DMA+0x1a4>)
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d10d      	bne.n	8001fd6 <HAL_TIM_PWM_Stop_DMA+0x142>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	4a1e      	ldr	r2, [pc, #120]	; (800203c <HAL_TIM_PWM_Stop_DMA+0x1a8>)
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	d107      	bne.n	8001fd6 <HAL_TIM_PWM_Stop_DMA+0x142>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	438a      	bics	r2, r1
 8001fd4:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d104      	bne.n	8001fe6 <HAL_TIM_PWM_Stop_DMA+0x152>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	223e      	movs	r2, #62	; 0x3e
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	5499      	strb	r1, [r3, r2]
 8001fe4:	e013      	b.n	800200e <HAL_TIM_PWM_Stop_DMA+0x17a>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d104      	bne.n	8001ff6 <HAL_TIM_PWM_Stop_DMA+0x162>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	223f      	movs	r2, #63	; 0x3f
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	5499      	strb	r1, [r3, r2]
 8001ff4:	e00b      	b.n	800200e <HAL_TIM_PWM_Stop_DMA+0x17a>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d104      	bne.n	8002006 <HAL_TIM_PWM_Stop_DMA+0x172>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2240      	movs	r2, #64	; 0x40
 8002000:	2101      	movs	r1, #1
 8002002:	5499      	strb	r1, [r3, r2]
 8002004:	e003      	b.n	800200e <HAL_TIM_PWM_Stop_DMA+0x17a>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2241      	movs	r2, #65	; 0x41
 800200a:	2101      	movs	r1, #1
 800200c:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 800200e:	230f      	movs	r3, #15
 8002010:	18fb      	adds	r3, r7, r3
 8002012:	781b      	ldrb	r3, [r3, #0]
}
 8002014:	0018      	movs	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	b004      	add	sp, #16
 800201a:	bd80      	pop	{r7, pc}
 800201c:	fffffdff 	.word	0xfffffdff
 8002020:	fffffbff 	.word	0xfffffbff
 8002024:	fffff7ff 	.word	0xfffff7ff
 8002028:	ffffefff 	.word	0xffffefff
 800202c:	40012c00 	.word	0x40012c00
 8002030:	40014400 	.word	0x40014400
 8002034:	40014800 	.word	0x40014800
 8002038:	00001111 	.word	0x00001111
 800203c:	00000444 	.word	0x00000444
 8002040:	ffff7fff 	.word	0xffff7fff

08002044 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002050:	2317      	movs	r3, #23
 8002052:	18fb      	adds	r3, r7, r3
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	223c      	movs	r2, #60	; 0x3c
 800205c:	5c9b      	ldrb	r3, [r3, r2]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d101      	bne.n	8002066 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002062:	2302      	movs	r3, #2
 8002064:	e0ad      	b.n	80021c2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	223c      	movs	r2, #60	; 0x3c
 800206a:	2101      	movs	r1, #1
 800206c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b0c      	cmp	r3, #12
 8002072:	d100      	bne.n	8002076 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002074:	e076      	b.n	8002164 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b0c      	cmp	r3, #12
 800207a:	d900      	bls.n	800207e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800207c:	e095      	b.n	80021aa <HAL_TIM_PWM_ConfigChannel+0x166>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b08      	cmp	r3, #8
 8002082:	d04e      	beq.n	8002122 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b08      	cmp	r3, #8
 8002088:	d900      	bls.n	800208c <HAL_TIM_PWM_ConfigChannel+0x48>
 800208a:	e08e      	b.n	80021aa <HAL_TIM_PWM_ConfigChannel+0x166>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_TIM_PWM_ConfigChannel+0x56>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b04      	cmp	r3, #4
 8002096:	d021      	beq.n	80020dc <HAL_TIM_PWM_ConfigChannel+0x98>
 8002098:	e087      	b.n	80021aa <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	0011      	movs	r1, r2
 80020a2:	0018      	movs	r0, r3
 80020a4:	f000 fa24 	bl	80024f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	699a      	ldr	r2, [r3, #24]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2108      	movs	r1, #8
 80020b4:	430a      	orrs	r2, r1
 80020b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699a      	ldr	r2, [r3, #24]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2104      	movs	r1, #4
 80020c4:	438a      	bics	r2, r1
 80020c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6999      	ldr	r1, [r3, #24]
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	691a      	ldr	r2, [r3, #16]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	619a      	str	r2, [r3, #24]
      break;
 80020da:	e06b      	b.n	80021b4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68ba      	ldr	r2, [r7, #8]
 80020e2:	0011      	movs	r1, r2
 80020e4:	0018      	movs	r0, r3
 80020e6:	f000 fa81 	bl	80025ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	699a      	ldr	r2, [r3, #24]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2180      	movs	r1, #128	; 0x80
 80020f6:	0109      	lsls	r1, r1, #4
 80020f8:	430a      	orrs	r2, r1
 80020fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	699a      	ldr	r2, [r3, #24]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4931      	ldr	r1, [pc, #196]	; (80021cc <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002108:	400a      	ands	r2, r1
 800210a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6999      	ldr	r1, [r3, #24]
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	021a      	lsls	r2, r3, #8
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	619a      	str	r2, [r3, #24]
      break;
 8002120:	e048      	b.n	80021b4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	0011      	movs	r1, r2
 800212a:	0018      	movs	r0, r3
 800212c:	f000 fadc 	bl	80026e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	69da      	ldr	r2, [r3, #28]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2108      	movs	r1, #8
 800213c:	430a      	orrs	r2, r1
 800213e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	69da      	ldr	r2, [r3, #28]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2104      	movs	r1, #4
 800214c:	438a      	bics	r2, r1
 800214e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	69d9      	ldr	r1, [r3, #28]
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	691a      	ldr	r2, [r3, #16]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	61da      	str	r2, [r3, #28]
      break;
 8002162:	e027      	b.n	80021b4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	0011      	movs	r1, r2
 800216c:	0018      	movs	r0, r3
 800216e:	f000 fb3b 	bl	80027e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	69da      	ldr	r2, [r3, #28]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2180      	movs	r1, #128	; 0x80
 800217e:	0109      	lsls	r1, r1, #4
 8002180:	430a      	orrs	r2, r1
 8002182:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	69da      	ldr	r2, [r3, #28]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	490f      	ldr	r1, [pc, #60]	; (80021cc <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002190:	400a      	ands	r2, r1
 8002192:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	69d9      	ldr	r1, [r3, #28]
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	021a      	lsls	r2, r3, #8
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	61da      	str	r2, [r3, #28]
      break;
 80021a8:	e004      	b.n	80021b4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80021aa:	2317      	movs	r3, #23
 80021ac:	18fb      	adds	r3, r7, r3
 80021ae:	2201      	movs	r2, #1
 80021b0:	701a      	strb	r2, [r3, #0]
      break;
 80021b2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	223c      	movs	r2, #60	; 0x3c
 80021b8:	2100      	movs	r1, #0
 80021ba:	5499      	strb	r1, [r3, r2]

  return status;
 80021bc:	2317      	movs	r3, #23
 80021be:	18fb      	adds	r3, r7, r3
 80021c0:	781b      	ldrb	r3, [r3, #0]
}
 80021c2:	0018      	movs	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	b006      	add	sp, #24
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	46c0      	nop			; (mov r8, r8)
 80021cc:	fffffbff 	.word	0xfffffbff

080021d0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80021d8:	46c0      	nop			; (mov r8, r8)
 80021da:	46bd      	mov	sp, r7
 80021dc:	b002      	add	sp, #8
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80021e8:	46c0      	nop			; (mov r8, r8)
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b002      	add	sp, #8
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021f8:	46c0      	nop			; (mov r8, r8)
 80021fa:	46bd      	mov	sp, r7
 80021fc:	b002      	add	sp, #8
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002208:	46c0      	nop			; (mov r8, r8)
 800220a:	46bd      	mov	sp, r7
 800220c:	b002      	add	sp, #8
 800220e:	bd80      	pop	{r7, pc}

08002210 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8002218:	46c0      	nop			; (mov r8, r8)
 800221a:	46bd      	mov	sp, r7
 800221c:	b002      	add	sp, #8
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002228:	46c0      	nop			; (mov r8, r8)
 800222a:	46bd      	mov	sp, r7
 800222c:	b002      	add	sp, #8
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8002238:	46c0      	nop			; (mov r8, r8)
 800223a:	46bd      	mov	sp, r7
 800223c:	b002      	add	sp, #8
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002248:	46c0      	nop			; (mov r8, r8)
 800224a:	46bd      	mov	sp, r7
 800224c:	b002      	add	sp, #8
 800224e:	bd80      	pop	{r7, pc}

08002250 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	429a      	cmp	r2, r3
 8002266:	d107      	bne.n	8002278 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2201      	movs	r2, #1
 800226c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	223e      	movs	r2, #62	; 0x3e
 8002272:	2101      	movs	r1, #1
 8002274:	5499      	strb	r1, [r3, r2]
 8002276:	e02a      	b.n	80022ce <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	429a      	cmp	r2, r3
 8002280:	d107      	bne.n	8002292 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2202      	movs	r2, #2
 8002286:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	223f      	movs	r2, #63	; 0x3f
 800228c:	2101      	movs	r1, #1
 800228e:	5499      	strb	r1, [r3, r2]
 8002290:	e01d      	b.n	80022ce <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	429a      	cmp	r2, r3
 800229a:	d107      	bne.n	80022ac <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2204      	movs	r2, #4
 80022a0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2240      	movs	r2, #64	; 0x40
 80022a6:	2101      	movs	r1, #1
 80022a8:	5499      	strb	r1, [r3, r2]
 80022aa:	e010      	b.n	80022ce <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d107      	bne.n	80022c6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2208      	movs	r2, #8
 80022ba:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2241      	movs	r2, #65	; 0x41
 80022c0:	2101      	movs	r1, #1
 80022c2:	5499      	strb	r1, [r3, r2]
 80022c4:	e003      	b.n	80022ce <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	223d      	movs	r2, #61	; 0x3d
 80022ca:	2101      	movs	r1, #1
 80022cc:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	22a4      	movs	r2, #164	; 0xa4
 80022d2:	589b      	ldr	r3, [r3, r2]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	0010      	movs	r0, r2
 80022d8:	4798      	blx	r3
#else
  HAL_TIM_ErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	771a      	strb	r2, [r3, #28]
}
 80022e0:	46c0      	nop			; (mov r8, r8)
 80022e2:	46bd      	mov	sp, r7
 80022e4:	b004      	add	sp, #16
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d10b      	bne.n	8002318 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2201      	movs	r2, #1
 8002304:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d136      	bne.n	800237c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	223e      	movs	r2, #62	; 0x3e
 8002312:	2101      	movs	r1, #1
 8002314:	5499      	strb	r1, [r3, r2]
 8002316:	e031      	b.n	800237c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	429a      	cmp	r2, r3
 8002320:	d10b      	bne.n	800233a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2202      	movs	r2, #2
 8002326:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d125      	bne.n	800237c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	223f      	movs	r2, #63	; 0x3f
 8002334:	2101      	movs	r1, #1
 8002336:	5499      	strb	r1, [r3, r2]
 8002338:	e020      	b.n	800237c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	429a      	cmp	r2, r3
 8002342:	d10b      	bne.n	800235c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2204      	movs	r2, #4
 8002348:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d114      	bne.n	800237c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2240      	movs	r2, #64	; 0x40
 8002356:	2101      	movs	r1, #1
 8002358:	5499      	strb	r1, [r3, r2]
 800235a:	e00f      	b.n	800237c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	429a      	cmp	r2, r3
 8002364:	d10a      	bne.n	800237c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2208      	movs	r2, #8
 800236a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d103      	bne.n	800237c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2241      	movs	r2, #65	; 0x41
 8002378:	2101      	movs	r1, #1
 800237a:	5499      	strb	r1, [r3, r2]
  {
    /* nothing to do */
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	229c      	movs	r2, #156	; 0x9c
 8002380:	589b      	ldr	r3, [r3, r2]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	0010      	movs	r0, r2
 8002386:	4798      	blx	r3
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	771a      	strb	r2, [r3, #28]
}
 800238e:	46c0      	nop			; (mov r8, r8)
 8002390:	46bd      	mov	sp, r7
 8002392:	b004      	add	sp, #16
 8002394:	bd80      	pop	{r7, pc}

08002396 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b084      	sub	sp, #16
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d103      	bne.n	80023b6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2201      	movs	r2, #1
 80023b2:	771a      	strb	r2, [r3, #28]
 80023b4:	e019      	b.n	80023ea <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d103      	bne.n	80023c8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2202      	movs	r2, #2
 80023c4:	771a      	strb	r2, [r3, #28]
 80023c6:	e010      	b.n	80023ea <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d103      	bne.n	80023da <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2204      	movs	r2, #4
 80023d6:	771a      	strb	r2, [r3, #28]
 80023d8:	e007      	b.n	80023ea <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d102      	bne.n	80023ea <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2208      	movs	r2, #8
 80023e8:	771a      	strb	r2, [r3, #28]
  {
    /* nothing to do */
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	22a0      	movs	r2, #160	; 0xa0
 80023ee:	589b      	ldr	r3, [r3, r2]
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	0010      	movs	r0, r2
 80023f4:	4798      	blx	r3
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	771a      	strb	r2, [r3, #28]
}
 80023fc:	46c0      	nop			; (mov r8, r8)
 80023fe:	46bd      	mov	sp, r7
 8002400:	b004      	add	sp, #16
 8002402:	bd80      	pop	{r7, pc}

08002404 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a30      	ldr	r2, [pc, #192]	; (80024d8 <TIM_Base_SetConfig+0xd4>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d008      	beq.n	800242e <TIM_Base_SetConfig+0x2a>
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	05db      	lsls	r3, r3, #23
 8002422:	429a      	cmp	r2, r3
 8002424:	d003      	beq.n	800242e <TIM_Base_SetConfig+0x2a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a2c      	ldr	r2, [pc, #176]	; (80024dc <TIM_Base_SetConfig+0xd8>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d108      	bne.n	8002440 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2270      	movs	r2, #112	; 0x70
 8002432:	4393      	bics	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	4313      	orrs	r3, r2
 800243e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a25      	ldr	r2, [pc, #148]	; (80024d8 <TIM_Base_SetConfig+0xd4>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d014      	beq.n	8002472 <TIM_Base_SetConfig+0x6e>
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	2380      	movs	r3, #128	; 0x80
 800244c:	05db      	lsls	r3, r3, #23
 800244e:	429a      	cmp	r2, r3
 8002450:	d00f      	beq.n	8002472 <TIM_Base_SetConfig+0x6e>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a21      	ldr	r2, [pc, #132]	; (80024dc <TIM_Base_SetConfig+0xd8>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d00b      	beq.n	8002472 <TIM_Base_SetConfig+0x6e>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a20      	ldr	r2, [pc, #128]	; (80024e0 <TIM_Base_SetConfig+0xdc>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d007      	beq.n	8002472 <TIM_Base_SetConfig+0x6e>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a1f      	ldr	r2, [pc, #124]	; (80024e4 <TIM_Base_SetConfig+0xe0>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d003      	beq.n	8002472 <TIM_Base_SetConfig+0x6e>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a1e      	ldr	r2, [pc, #120]	; (80024e8 <TIM_Base_SetConfig+0xe4>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d108      	bne.n	8002484 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	4a1d      	ldr	r2, [pc, #116]	; (80024ec <TIM_Base_SetConfig+0xe8>)
 8002476:	4013      	ands	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	4313      	orrs	r3, r2
 8002482:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2280      	movs	r2, #128	; 0x80
 8002488:	4393      	bics	r3, r2
 800248a:	001a      	movs	r2, r3
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	4313      	orrs	r3, r2
 8002492:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a0a      	ldr	r2, [pc, #40]	; (80024d8 <TIM_Base_SetConfig+0xd4>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d007      	beq.n	80024c2 <TIM_Base_SetConfig+0xbe>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a0b      	ldr	r2, [pc, #44]	; (80024e4 <TIM_Base_SetConfig+0xe0>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d003      	beq.n	80024c2 <TIM_Base_SetConfig+0xbe>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a0a      	ldr	r2, [pc, #40]	; (80024e8 <TIM_Base_SetConfig+0xe4>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d103      	bne.n	80024ca <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	691a      	ldr	r2, [r3, #16]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	615a      	str	r2, [r3, #20]
}
 80024d0:	46c0      	nop			; (mov r8, r8)
 80024d2:	46bd      	mov	sp, r7
 80024d4:	b004      	add	sp, #16
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40012c00 	.word	0x40012c00
 80024dc:	40000400 	.word	0x40000400
 80024e0:	40002000 	.word	0x40002000
 80024e4:	40014400 	.word	0x40014400
 80024e8:	40014800 	.word	0x40014800
 80024ec:	fffffcff 	.word	0xfffffcff

080024f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	2201      	movs	r2, #1
 8002500:	4393      	bics	r3, r2
 8002502:	001a      	movs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2270      	movs	r2, #112	; 0x70
 800251e:	4393      	bics	r3, r2
 8002520:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2203      	movs	r2, #3
 8002526:	4393      	bics	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	4313      	orrs	r3, r2
 8002532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	2202      	movs	r2, #2
 8002538:	4393      	bics	r3, r2
 800253a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	4313      	orrs	r3, r2
 8002544:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a23      	ldr	r2, [pc, #140]	; (80025d8 <TIM_OC1_SetConfig+0xe8>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d007      	beq.n	800255e <TIM_OC1_SetConfig+0x6e>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a22      	ldr	r2, [pc, #136]	; (80025dc <TIM_OC1_SetConfig+0xec>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d003      	beq.n	800255e <TIM_OC1_SetConfig+0x6e>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a21      	ldr	r2, [pc, #132]	; (80025e0 <TIM_OC1_SetConfig+0xf0>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d10c      	bne.n	8002578 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	2208      	movs	r2, #8
 8002562:	4393      	bics	r3, r2
 8002564:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	4313      	orrs	r3, r2
 800256e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	2204      	movs	r2, #4
 8002574:	4393      	bics	r3, r2
 8002576:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a17      	ldr	r2, [pc, #92]	; (80025d8 <TIM_OC1_SetConfig+0xe8>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d007      	beq.n	8002590 <TIM_OC1_SetConfig+0xa0>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a16      	ldr	r2, [pc, #88]	; (80025dc <TIM_OC1_SetConfig+0xec>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d003      	beq.n	8002590 <TIM_OC1_SetConfig+0xa0>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a15      	ldr	r2, [pc, #84]	; (80025e0 <TIM_OC1_SetConfig+0xf0>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d111      	bne.n	80025b4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	4a14      	ldr	r2, [pc, #80]	; (80025e4 <TIM_OC1_SetConfig+0xf4>)
 8002594:	4013      	ands	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4a13      	ldr	r2, [pc, #76]	; (80025e8 <TIM_OC1_SetConfig+0xf8>)
 800259c:	4013      	ands	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	621a      	str	r2, [r3, #32]
}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	46bd      	mov	sp, r7
 80025d2:	b006      	add	sp, #24
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	40012c00 	.word	0x40012c00
 80025dc:	40014400 	.word	0x40014400
 80025e0:	40014800 	.word	0x40014800
 80025e4:	fffffeff 	.word	0xfffffeff
 80025e8:	fffffdff 	.word	0xfffffdff

080025ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	2210      	movs	r2, #16
 80025fc:	4393      	bics	r3, r2
 80025fe:	001a      	movs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	4a2c      	ldr	r2, [pc, #176]	; (80026cc <TIM_OC2_SetConfig+0xe0>)
 800261a:	4013      	ands	r3, r2
 800261c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	4a2b      	ldr	r2, [pc, #172]	; (80026d0 <TIM_OC2_SetConfig+0xe4>)
 8002622:	4013      	ands	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	021b      	lsls	r3, r3, #8
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	4313      	orrs	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	2220      	movs	r2, #32
 8002636:	4393      	bics	r3, r2
 8002638:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	011b      	lsls	r3, r3, #4
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	4313      	orrs	r3, r2
 8002644:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a22      	ldr	r2, [pc, #136]	; (80026d4 <TIM_OC2_SetConfig+0xe8>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d10d      	bne.n	800266a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	2280      	movs	r2, #128	; 0x80
 8002652:	4393      	bics	r3, r2
 8002654:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	011b      	lsls	r3, r3, #4
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	4313      	orrs	r3, r2
 8002660:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	2240      	movs	r2, #64	; 0x40
 8002666:	4393      	bics	r3, r2
 8002668:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a19      	ldr	r2, [pc, #100]	; (80026d4 <TIM_OC2_SetConfig+0xe8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d007      	beq.n	8002682 <TIM_OC2_SetConfig+0x96>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a18      	ldr	r2, [pc, #96]	; (80026d8 <TIM_OC2_SetConfig+0xec>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d003      	beq.n	8002682 <TIM_OC2_SetConfig+0x96>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a17      	ldr	r2, [pc, #92]	; (80026dc <TIM_OC2_SetConfig+0xf0>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d113      	bne.n	80026aa <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	4a16      	ldr	r2, [pc, #88]	; (80026e0 <TIM_OC2_SetConfig+0xf4>)
 8002686:	4013      	ands	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4a15      	ldr	r2, [pc, #84]	; (80026e4 <TIM_OC2_SetConfig+0xf8>)
 800268e:	4013      	ands	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	4313      	orrs	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	621a      	str	r2, [r3, #32]
}
 80026c4:	46c0      	nop			; (mov r8, r8)
 80026c6:	46bd      	mov	sp, r7
 80026c8:	b006      	add	sp, #24
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	ffff8fff 	.word	0xffff8fff
 80026d0:	fffffcff 	.word	0xfffffcff
 80026d4:	40012c00 	.word	0x40012c00
 80026d8:	40014400 	.word	0x40014400
 80026dc:	40014800 	.word	0x40014800
 80026e0:	fffffbff 	.word	0xfffffbff
 80026e4:	fffff7ff 	.word	0xfffff7ff

080026e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	4a33      	ldr	r2, [pc, #204]	; (80027c4 <TIM_OC3_SetConfig+0xdc>)
 80026f8:	401a      	ands	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2270      	movs	r2, #112	; 0x70
 8002714:	4393      	bics	r3, r2
 8002716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2203      	movs	r2, #3
 800271c:	4393      	bics	r3, r2
 800271e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4313      	orrs	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	4a26      	ldr	r2, [pc, #152]	; (80027c8 <TIM_OC3_SetConfig+0xe0>)
 800272e:	4013      	ands	r3, r2
 8002730:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	021b      	lsls	r3, r3, #8
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	4313      	orrs	r3, r2
 800273c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a22      	ldr	r2, [pc, #136]	; (80027cc <TIM_OC3_SetConfig+0xe4>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d10d      	bne.n	8002762 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	4a21      	ldr	r2, [pc, #132]	; (80027d0 <TIM_OC3_SetConfig+0xe8>)
 800274a:	4013      	ands	r3, r2
 800274c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	021b      	lsls	r3, r3, #8
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	4313      	orrs	r3, r2
 8002758:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	4a1d      	ldr	r2, [pc, #116]	; (80027d4 <TIM_OC3_SetConfig+0xec>)
 800275e:	4013      	ands	r3, r2
 8002760:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a19      	ldr	r2, [pc, #100]	; (80027cc <TIM_OC3_SetConfig+0xe4>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d007      	beq.n	800277a <TIM_OC3_SetConfig+0x92>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a1a      	ldr	r2, [pc, #104]	; (80027d8 <TIM_OC3_SetConfig+0xf0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d003      	beq.n	800277a <TIM_OC3_SetConfig+0x92>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a19      	ldr	r2, [pc, #100]	; (80027dc <TIM_OC3_SetConfig+0xf4>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d113      	bne.n	80027a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4a18      	ldr	r2, [pc, #96]	; (80027e0 <TIM_OC3_SetConfig+0xf8>)
 800277e:	4013      	ands	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4a17      	ldr	r2, [pc, #92]	; (80027e4 <TIM_OC3_SetConfig+0xfc>)
 8002786:	4013      	ands	r3, r2
 8002788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4313      	orrs	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	011b      	lsls	r3, r3, #4
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	621a      	str	r2, [r3, #32]
}
 80027bc:	46c0      	nop			; (mov r8, r8)
 80027be:	46bd      	mov	sp, r7
 80027c0:	b006      	add	sp, #24
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	fffffeff 	.word	0xfffffeff
 80027c8:	fffffdff 	.word	0xfffffdff
 80027cc:	40012c00 	.word	0x40012c00
 80027d0:	fffff7ff 	.word	0xfffff7ff
 80027d4:	fffffbff 	.word	0xfffffbff
 80027d8:	40014400 	.word	0x40014400
 80027dc:	40014800 	.word	0x40014800
 80027e0:	ffffefff 	.word	0xffffefff
 80027e4:	ffffdfff 	.word	0xffffdfff

080027e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	4a26      	ldr	r2, [pc, #152]	; (8002890 <TIM_OC4_SetConfig+0xa8>)
 80027f8:	401a      	ands	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4a20      	ldr	r2, [pc, #128]	; (8002894 <TIM_OC4_SetConfig+0xac>)
 8002814:	4013      	ands	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4a1f      	ldr	r2, [pc, #124]	; (8002898 <TIM_OC4_SetConfig+0xb0>)
 800281c:	4013      	ands	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	021b      	lsls	r3, r3, #8
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	4313      	orrs	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	4a1b      	ldr	r2, [pc, #108]	; (800289c <TIM_OC4_SetConfig+0xb4>)
 8002830:	4013      	ands	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	031b      	lsls	r3, r3, #12
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	4313      	orrs	r3, r2
 800283e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a17      	ldr	r2, [pc, #92]	; (80028a0 <TIM_OC4_SetConfig+0xb8>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d007      	beq.n	8002858 <TIM_OC4_SetConfig+0x70>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a16      	ldr	r2, [pc, #88]	; (80028a4 <TIM_OC4_SetConfig+0xbc>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d003      	beq.n	8002858 <TIM_OC4_SetConfig+0x70>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a15      	ldr	r2, [pc, #84]	; (80028a8 <TIM_OC4_SetConfig+0xc0>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d109      	bne.n	800286c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	4a14      	ldr	r2, [pc, #80]	; (80028ac <TIM_OC4_SetConfig+0xc4>)
 800285c:	4013      	ands	r3, r2
 800285e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	019b      	lsls	r3, r3, #6
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	4313      	orrs	r3, r2
 800286a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	621a      	str	r2, [r3, #32]
}
 8002886:	46c0      	nop			; (mov r8, r8)
 8002888:	46bd      	mov	sp, r7
 800288a:	b006      	add	sp, #24
 800288c:	bd80      	pop	{r7, pc}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	ffffefff 	.word	0xffffefff
 8002894:	ffff8fff 	.word	0xffff8fff
 8002898:	fffffcff 	.word	0xfffffcff
 800289c:	ffffdfff 	.word	0xffffdfff
 80028a0:	40012c00 	.word	0x40012c00
 80028a4:	40014400 	.word	0x40014400
 80028a8:	40014800 	.word	0x40014800
 80028ac:	ffffbfff 	.word	0xffffbfff

080028b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	221f      	movs	r2, #31
 80028c0:	4013      	ands	r3, r2
 80028c2:	2201      	movs	r2, #1
 80028c4:	409a      	lsls	r2, r3
 80028c6:	0013      	movs	r3, r2
 80028c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	43d2      	mvns	r2, r2
 80028d2:	401a      	ands	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6a1a      	ldr	r2, [r3, #32]
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	211f      	movs	r1, #31
 80028e0:	400b      	ands	r3, r1
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	4099      	lsls	r1, r3
 80028e6:	000b      	movs	r3, r1
 80028e8:	431a      	orrs	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	621a      	str	r2, [r3, #32]
}
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	46bd      	mov	sp, r7
 80028f2:	b006      	add	sp, #24
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2180      	movs	r1, #128	; 0x80
 8002904:	4a1a      	ldr	r2, [pc, #104]	; (8002970 <TIM_ResetCallback+0x78>)
 8002906:	505a      	str	r2, [r3, r1]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2184      	movs	r1, #132	; 0x84
 800290c:	4a19      	ldr	r2, [pc, #100]	; (8002974 <TIM_ResetCallback+0x7c>)
 800290e:	505a      	str	r2, [r3, r1]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2188      	movs	r1, #136	; 0x88
 8002914:	4a18      	ldr	r2, [pc, #96]	; (8002978 <TIM_ResetCallback+0x80>)
 8002916:	505a      	str	r2, [r3, r1]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	218c      	movs	r1, #140	; 0x8c
 800291c:	4a17      	ldr	r2, [pc, #92]	; (800297c <TIM_ResetCallback+0x84>)
 800291e:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2190      	movs	r1, #144	; 0x90
 8002924:	4a16      	ldr	r2, [pc, #88]	; (8002980 <TIM_ResetCallback+0x88>)
 8002926:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2194      	movs	r1, #148	; 0x94
 800292c:	4a15      	ldr	r2, [pc, #84]	; (8002984 <TIM_ResetCallback+0x8c>)
 800292e:	505a      	str	r2, [r3, r1]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2198      	movs	r1, #152	; 0x98
 8002934:	4a14      	ldr	r2, [pc, #80]	; (8002988 <TIM_ResetCallback+0x90>)
 8002936:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	219c      	movs	r1, #156	; 0x9c
 800293c:	4a13      	ldr	r2, [pc, #76]	; (800298c <TIM_ResetCallback+0x94>)
 800293e:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	21a0      	movs	r1, #160	; 0xa0
 8002944:	4a12      	ldr	r2, [pc, #72]	; (8002990 <TIM_ResetCallback+0x98>)
 8002946:	505a      	str	r2, [r3, r1]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	21a4      	movs	r1, #164	; 0xa4
 800294c:	4a11      	ldr	r2, [pc, #68]	; (8002994 <TIM_ResetCallback+0x9c>)
 800294e:	505a      	str	r2, [r3, r1]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	21a8      	movs	r1, #168	; 0xa8
 8002954:	4a10      	ldr	r2, [pc, #64]	; (8002998 <TIM_ResetCallback+0xa0>)
 8002956:	505a      	str	r2, [r3, r1]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	21ac      	movs	r1, #172	; 0xac
 800295c:	4a0f      	ldr	r2, [pc, #60]	; (800299c <TIM_ResetCallback+0xa4>)
 800295e:	505a      	str	r2, [r3, r1]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	21b0      	movs	r1, #176	; 0xb0
 8002964:	4a0e      	ldr	r2, [pc, #56]	; (80029a0 <TIM_ResetCallback+0xa8>)
 8002966:	505a      	str	r2, [r3, r1]
}
 8002968:	46c0      	nop			; (mov r8, r8)
 800296a:	46bd      	mov	sp, r7
 800296c:	b002      	add	sp, #8
 800296e:	bd80      	pop	{r7, pc}
 8002970:	080021d1 	.word	0x080021d1
 8002974:	080021e1 	.word	0x080021e1
 8002978:	08002221 	.word	0x08002221
 800297c:	08002231 	.word	0x08002231
 8002980:	08002201 	.word	0x08002201
 8002984:	08002211 	.word	0x08002211
 8002988:	080021f1 	.word	0x080021f1
 800298c:	08003195 	.word	0x08003195
 8002990:	080031b5 	.word	0x080031b5
 8002994:	08002241 	.word	0x08002241
 8002998:	08002a55 	.word	0x08002a55
 800299c:	08002a65 	.word	0x08002a65
 80029a0:	08002a75 	.word	0x08002a75

080029a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	223c      	movs	r2, #60	; 0x3c
 80029b2:	5c9b      	ldrb	r3, [r3, r2]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d101      	bne.n	80029bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029b8:	2302      	movs	r3, #2
 80029ba:	e042      	b.n	8002a42 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	223c      	movs	r2, #60	; 0x3c
 80029c0:	2101      	movs	r1, #1
 80029c2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	223d      	movs	r2, #61	; 0x3d
 80029c8:	2102      	movs	r1, #2
 80029ca:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2270      	movs	r2, #112	; 0x70
 80029e0:	4393      	bics	r3, r2
 80029e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a14      	ldr	r2, [pc, #80]	; (8002a4c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d00a      	beq.n	8002a16 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	2380      	movs	r3, #128	; 0x80
 8002a06:	05db      	lsls	r3, r3, #23
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d004      	beq.n	8002a16 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a0f      	ldr	r2, [pc, #60]	; (8002a50 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d10c      	bne.n	8002a30 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2280      	movs	r2, #128	; 0x80
 8002a1a:	4393      	bics	r3, r2
 8002a1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	223d      	movs	r2, #61	; 0x3d
 8002a34:	2101      	movs	r1, #1
 8002a36:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	223c      	movs	r2, #60	; 0x3c
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	0018      	movs	r0, r3
 8002a44:	46bd      	mov	sp, r7
 8002a46:	b004      	add	sp, #16
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	40012c00 	.word	0x40012c00
 8002a50:	40000400 	.word	0x40000400

08002a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a5c:	46c0      	nop			; (mov r8, r8)
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	b002      	add	sp, #8
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8002a6c:	46c0      	nop			; (mov r8, r8)
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	b002      	add	sp, #8
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a7c:	46c0      	nop			; (mov r8, r8)
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	b002      	add	sp, #8
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e044      	b.n	8002b20 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d107      	bne.n	8002aae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2274      	movs	r2, #116	; 0x74
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f7fd fdd3 	bl	8000654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2224      	movs	r2, #36	; 0x24
 8002ab2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2101      	movs	r1, #1
 8002ac0:	438a      	bics	r2, r1
 8002ac2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f000 f830 	bl	8002b2c <UART_SetConfig>
 8002acc:	0003      	movs	r3, r0
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d101      	bne.n	8002ad6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e024      	b.n	8002b20 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	f000 f963 	bl	8002dac <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	490d      	ldr	r1, [pc, #52]	; (8002b28 <HAL_UART_Init+0xa4>)
 8002af2:	400a      	ands	r2, r1
 8002af4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	212a      	movs	r1, #42	; 0x2a
 8002b02:	438a      	bics	r2, r1
 8002b04:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2101      	movs	r1, #1
 8002b12:	430a      	orrs	r2, r1
 8002b14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f000 f9fb 	bl	8002f14 <UART_CheckIdleState>
 8002b1e:	0003      	movs	r3, r0
}
 8002b20:	0018      	movs	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b002      	add	sp, #8
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	ffffb7ff 	.word	0xffffb7ff

08002b2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b088      	sub	sp, #32
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b34:	231e      	movs	r3, #30
 8002b36:	18fb      	adds	r3, r7, r3
 8002b38:	2200      	movs	r2, #0
 8002b3a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	431a      	orrs	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	69db      	ldr	r3, [r3, #28]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a8d      	ldr	r2, [pc, #564]	; (8002d90 <UART_SetConfig+0x264>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	0019      	movs	r1, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	4a88      	ldr	r2, [pc, #544]	; (8002d94 <UART_SetConfig+0x268>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	0019      	movs	r1, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	4a7f      	ldr	r2, [pc, #508]	; (8002d98 <UART_SetConfig+0x26c>)
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	0019      	movs	r1, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a7b      	ldr	r2, [pc, #492]	; (8002d9c <UART_SetConfig+0x270>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d127      	bne.n	8002c02 <UART_SetConfig+0xd6>
 8002bb2:	4b7b      	ldr	r3, [pc, #492]	; (8002da0 <UART_SetConfig+0x274>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	4013      	ands	r3, r2
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d00d      	beq.n	8002bda <UART_SetConfig+0xae>
 8002bbe:	d81b      	bhi.n	8002bf8 <UART_SetConfig+0xcc>
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d014      	beq.n	8002bee <UART_SetConfig+0xc2>
 8002bc4:	d818      	bhi.n	8002bf8 <UART_SetConfig+0xcc>
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d002      	beq.n	8002bd0 <UART_SetConfig+0xa4>
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d00a      	beq.n	8002be4 <UART_SetConfig+0xb8>
 8002bce:	e013      	b.n	8002bf8 <UART_SetConfig+0xcc>
 8002bd0:	231f      	movs	r3, #31
 8002bd2:	18fb      	adds	r3, r7, r3
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	701a      	strb	r2, [r3, #0]
 8002bd8:	e021      	b.n	8002c1e <UART_SetConfig+0xf2>
 8002bda:	231f      	movs	r3, #31
 8002bdc:	18fb      	adds	r3, r7, r3
 8002bde:	2202      	movs	r2, #2
 8002be0:	701a      	strb	r2, [r3, #0]
 8002be2:	e01c      	b.n	8002c1e <UART_SetConfig+0xf2>
 8002be4:	231f      	movs	r3, #31
 8002be6:	18fb      	adds	r3, r7, r3
 8002be8:	2204      	movs	r2, #4
 8002bea:	701a      	strb	r2, [r3, #0]
 8002bec:	e017      	b.n	8002c1e <UART_SetConfig+0xf2>
 8002bee:	231f      	movs	r3, #31
 8002bf0:	18fb      	adds	r3, r7, r3
 8002bf2:	2208      	movs	r2, #8
 8002bf4:	701a      	strb	r2, [r3, #0]
 8002bf6:	e012      	b.n	8002c1e <UART_SetConfig+0xf2>
 8002bf8:	231f      	movs	r3, #31
 8002bfa:	18fb      	adds	r3, r7, r3
 8002bfc:	2210      	movs	r2, #16
 8002bfe:	701a      	strb	r2, [r3, #0]
 8002c00:	e00d      	b.n	8002c1e <UART_SetConfig+0xf2>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a67      	ldr	r2, [pc, #412]	; (8002da4 <UART_SetConfig+0x278>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d104      	bne.n	8002c16 <UART_SetConfig+0xea>
 8002c0c:	231f      	movs	r3, #31
 8002c0e:	18fb      	adds	r3, r7, r3
 8002c10:	2200      	movs	r2, #0
 8002c12:	701a      	strb	r2, [r3, #0]
 8002c14:	e003      	b.n	8002c1e <UART_SetConfig+0xf2>
 8002c16:	231f      	movs	r3, #31
 8002c18:	18fb      	adds	r3, r7, r3
 8002c1a:	2210      	movs	r2, #16
 8002c1c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69da      	ldr	r2, [r3, #28]
 8002c22:	2380      	movs	r3, #128	; 0x80
 8002c24:	021b      	lsls	r3, r3, #8
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d15d      	bne.n	8002ce6 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8002c2a:	231f      	movs	r3, #31
 8002c2c:	18fb      	adds	r3, r7, r3
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d015      	beq.n	8002c60 <UART_SetConfig+0x134>
 8002c34:	dc18      	bgt.n	8002c68 <UART_SetConfig+0x13c>
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d00d      	beq.n	8002c56 <UART_SetConfig+0x12a>
 8002c3a:	dc15      	bgt.n	8002c68 <UART_SetConfig+0x13c>
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d002      	beq.n	8002c46 <UART_SetConfig+0x11a>
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d005      	beq.n	8002c50 <UART_SetConfig+0x124>
 8002c44:	e010      	b.n	8002c68 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c46:	f7fe ff07 	bl	8001a58 <HAL_RCC_GetPCLK1Freq>
 8002c4a:	0003      	movs	r3, r0
 8002c4c:	61bb      	str	r3, [r7, #24]
        break;
 8002c4e:	e012      	b.n	8002c76 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c50:	4b55      	ldr	r3, [pc, #340]	; (8002da8 <UART_SetConfig+0x27c>)
 8002c52:	61bb      	str	r3, [r7, #24]
        break;
 8002c54:	e00f      	b.n	8002c76 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c56:	f7fe fe75 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 8002c5a:	0003      	movs	r3, r0
 8002c5c:	61bb      	str	r3, [r7, #24]
        break;
 8002c5e:	e00a      	b.n	8002c76 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c60:	2380      	movs	r3, #128	; 0x80
 8002c62:	021b      	lsls	r3, r3, #8
 8002c64:	61bb      	str	r3, [r7, #24]
        break;
 8002c66:	e006      	b.n	8002c76 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c6c:	231e      	movs	r3, #30
 8002c6e:	18fb      	adds	r3, r7, r3
 8002c70:	2201      	movs	r2, #1
 8002c72:	701a      	strb	r2, [r3, #0]
        break;
 8002c74:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d100      	bne.n	8002c7e <UART_SetConfig+0x152>
 8002c7c:	e07b      	b.n	8002d76 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	005a      	lsls	r2, r3, #1
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	085b      	lsrs	r3, r3, #1
 8002c88:	18d2      	adds	r2, r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	0019      	movs	r1, r3
 8002c90:	0010      	movs	r0, r2
 8002c92:	f7fd fa39 	bl	8000108 <__udivsi3>
 8002c96:	0003      	movs	r3, r0
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	2b0f      	cmp	r3, #15
 8002ca0:	d91c      	bls.n	8002cdc <UART_SetConfig+0x1b0>
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	2380      	movs	r3, #128	; 0x80
 8002ca6:	025b      	lsls	r3, r3, #9
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d217      	bcs.n	8002cdc <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	200e      	movs	r0, #14
 8002cb2:	183b      	adds	r3, r7, r0
 8002cb4:	210f      	movs	r1, #15
 8002cb6:	438a      	bics	r2, r1
 8002cb8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	085b      	lsrs	r3, r3, #1
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	2207      	movs	r2, #7
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	b299      	uxth	r1, r3
 8002cc6:	183b      	adds	r3, r7, r0
 8002cc8:	183a      	adds	r2, r7, r0
 8002cca:	8812      	ldrh	r2, [r2, #0]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	183a      	adds	r2, r7, r0
 8002cd6:	8812      	ldrh	r2, [r2, #0]
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	e04c      	b.n	8002d76 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002cdc:	231e      	movs	r3, #30
 8002cde:	18fb      	adds	r3, r7, r3
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	701a      	strb	r2, [r3, #0]
 8002ce4:	e047      	b.n	8002d76 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ce6:	231f      	movs	r3, #31
 8002ce8:	18fb      	adds	r3, r7, r3
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d015      	beq.n	8002d1c <UART_SetConfig+0x1f0>
 8002cf0:	dc18      	bgt.n	8002d24 <UART_SetConfig+0x1f8>
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d00d      	beq.n	8002d12 <UART_SetConfig+0x1e6>
 8002cf6:	dc15      	bgt.n	8002d24 <UART_SetConfig+0x1f8>
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <UART_SetConfig+0x1d6>
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d005      	beq.n	8002d0c <UART_SetConfig+0x1e0>
 8002d00:	e010      	b.n	8002d24 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d02:	f7fe fea9 	bl	8001a58 <HAL_RCC_GetPCLK1Freq>
 8002d06:	0003      	movs	r3, r0
 8002d08:	61bb      	str	r3, [r7, #24]
        break;
 8002d0a:	e012      	b.n	8002d32 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d0c:	4b26      	ldr	r3, [pc, #152]	; (8002da8 <UART_SetConfig+0x27c>)
 8002d0e:	61bb      	str	r3, [r7, #24]
        break;
 8002d10:	e00f      	b.n	8002d32 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d12:	f7fe fe17 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 8002d16:	0003      	movs	r3, r0
 8002d18:	61bb      	str	r3, [r7, #24]
        break;
 8002d1a:	e00a      	b.n	8002d32 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d1c:	2380      	movs	r3, #128	; 0x80
 8002d1e:	021b      	lsls	r3, r3, #8
 8002d20:	61bb      	str	r3, [r7, #24]
        break;
 8002d22:	e006      	b.n	8002d32 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d28:	231e      	movs	r3, #30
 8002d2a:	18fb      	adds	r3, r7, r3
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	701a      	strb	r2, [r3, #0]
        break;
 8002d30:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d01e      	beq.n	8002d76 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	085a      	lsrs	r2, r3, #1
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	18d2      	adds	r2, r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	0019      	movs	r1, r3
 8002d48:	0010      	movs	r0, r2
 8002d4a:	f7fd f9dd 	bl	8000108 <__udivsi3>
 8002d4e:	0003      	movs	r3, r0
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	2b0f      	cmp	r3, #15
 8002d58:	d909      	bls.n	8002d6e <UART_SetConfig+0x242>
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	2380      	movs	r3, #128	; 0x80
 8002d5e:	025b      	lsls	r3, r3, #9
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d204      	bcs.n	8002d6e <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	60da      	str	r2, [r3, #12]
 8002d6c:	e003      	b.n	8002d76 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002d6e:	231e      	movs	r3, #30
 8002d70:	18fb      	adds	r3, r7, r3
 8002d72:	2201      	movs	r2, #1
 8002d74:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002d82:	231e      	movs	r3, #30
 8002d84:	18fb      	adds	r3, r7, r3
 8002d86:	781b      	ldrb	r3, [r3, #0]
}
 8002d88:	0018      	movs	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b008      	add	sp, #32
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	efff69f3 	.word	0xefff69f3
 8002d94:	ffffcfff 	.word	0xffffcfff
 8002d98:	fffff4ff 	.word	0xfffff4ff
 8002d9c:	40013800 	.word	0x40013800
 8002da0:	40021000 	.word	0x40021000
 8002da4:	40004400 	.word	0x40004400
 8002da8:	007a1200 	.word	0x007a1200

08002dac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	2201      	movs	r2, #1
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d00b      	beq.n	8002dd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	4a4a      	ldr	r2, [pc, #296]	; (8002ef0 <UART_AdvFeatureConfig+0x144>)
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	0019      	movs	r1, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	2202      	movs	r2, #2
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d00b      	beq.n	8002df8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	4a43      	ldr	r2, [pc, #268]	; (8002ef4 <UART_AdvFeatureConfig+0x148>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	0019      	movs	r1, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	2204      	movs	r2, #4
 8002dfe:	4013      	ands	r3, r2
 8002e00:	d00b      	beq.n	8002e1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	4a3b      	ldr	r2, [pc, #236]	; (8002ef8 <UART_AdvFeatureConfig+0x14c>)
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	0019      	movs	r1, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	2208      	movs	r2, #8
 8002e20:	4013      	ands	r3, r2
 8002e22:	d00b      	beq.n	8002e3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	4a34      	ldr	r2, [pc, #208]	; (8002efc <UART_AdvFeatureConfig+0x150>)
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	0019      	movs	r1, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	2210      	movs	r2, #16
 8002e42:	4013      	ands	r3, r2
 8002e44:	d00b      	beq.n	8002e5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	4a2c      	ldr	r2, [pc, #176]	; (8002f00 <UART_AdvFeatureConfig+0x154>)
 8002e4e:	4013      	ands	r3, r2
 8002e50:	0019      	movs	r1, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	2220      	movs	r2, #32
 8002e64:	4013      	ands	r3, r2
 8002e66:	d00b      	beq.n	8002e80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	4a25      	ldr	r2, [pc, #148]	; (8002f04 <UART_AdvFeatureConfig+0x158>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	0019      	movs	r1, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	2240      	movs	r2, #64	; 0x40
 8002e86:	4013      	ands	r3, r2
 8002e88:	d01d      	beq.n	8002ec6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	4a1d      	ldr	r2, [pc, #116]	; (8002f08 <UART_AdvFeatureConfig+0x15c>)
 8002e92:	4013      	ands	r3, r2
 8002e94:	0019      	movs	r1, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ea6:	2380      	movs	r3, #128	; 0x80
 8002ea8:	035b      	lsls	r3, r3, #13
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d10b      	bne.n	8002ec6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	4a15      	ldr	r2, [pc, #84]	; (8002f0c <UART_AdvFeatureConfig+0x160>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	0019      	movs	r1, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	2280      	movs	r2, #128	; 0x80
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d00b      	beq.n	8002ee8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	4a0e      	ldr	r2, [pc, #56]	; (8002f10 <UART_AdvFeatureConfig+0x164>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	0019      	movs	r1, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	605a      	str	r2, [r3, #4]
  }
}
 8002ee8:	46c0      	nop			; (mov r8, r8)
 8002eea:	46bd      	mov	sp, r7
 8002eec:	b002      	add	sp, #8
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	fffdffff 	.word	0xfffdffff
 8002ef4:	fffeffff 	.word	0xfffeffff
 8002ef8:	fffbffff 	.word	0xfffbffff
 8002efc:	ffff7fff 	.word	0xffff7fff
 8002f00:	ffffefff 	.word	0xffffefff
 8002f04:	ffffdfff 	.word	0xffffdfff
 8002f08:	ffefffff 	.word	0xffefffff
 8002f0c:	ff9fffff 	.word	0xff9fffff
 8002f10:	fff7ffff 	.word	0xfff7ffff

08002f14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af02      	add	r7, sp, #8
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2280      	movs	r2, #128	; 0x80
 8002f20:	2100      	movs	r1, #0
 8002f22:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f24:	f7fd fc80 	bl	8000828 <HAL_GetTick>
 8002f28:	0003      	movs	r3, r0
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2208      	movs	r2, #8
 8002f34:	4013      	ands	r3, r2
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d10c      	bne.n	8002f54 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2280      	movs	r2, #128	; 0x80
 8002f3e:	0391      	lsls	r1, r2, #14
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	4a17      	ldr	r2, [pc, #92]	; (8002fa0 <UART_CheckIdleState+0x8c>)
 8002f44:	9200      	str	r2, [sp, #0]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f000 f82c 	bl	8002fa4 <UART_WaitOnFlagUntilTimeout>
 8002f4c:	1e03      	subs	r3, r0, #0
 8002f4e:	d001      	beq.n	8002f54 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e021      	b.n	8002f98 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2204      	movs	r2, #4
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d10c      	bne.n	8002f7c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2280      	movs	r2, #128	; 0x80
 8002f66:	03d1      	lsls	r1, r2, #15
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	4a0d      	ldr	r2, [pc, #52]	; (8002fa0 <UART_CheckIdleState+0x8c>)
 8002f6c:	9200      	str	r2, [sp, #0]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f000 f818 	bl	8002fa4 <UART_WaitOnFlagUntilTimeout>
 8002f74:	1e03      	subs	r3, r0, #0
 8002f76:	d001      	beq.n	8002f7c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e00d      	b.n	8002f98 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2220      	movs	r2, #32
 8002f86:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2274      	movs	r2, #116	; 0x74
 8002f92:	2100      	movs	r1, #0
 8002f94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	0018      	movs	r0, r3
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	b004      	add	sp, #16
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	01ffffff 	.word	0x01ffffff

08002fa4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b094      	sub	sp, #80	; 0x50
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	603b      	str	r3, [r7, #0]
 8002fb0:	1dfb      	adds	r3, r7, #7
 8002fb2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fb4:	e0a3      	b.n	80030fe <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fb8:	3301      	adds	r3, #1
 8002fba:	d100      	bne.n	8002fbe <UART_WaitOnFlagUntilTimeout+0x1a>
 8002fbc:	e09f      	b.n	80030fe <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fbe:	f7fd fc33 	bl	8000828 <HAL_GetTick>
 8002fc2:	0002      	movs	r2, r0
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d302      	bcc.n	8002fd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002fce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d13d      	bne.n	8003050 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fd4:	f3ef 8310 	mrs	r3, PRIMASK
 8002fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fdc:	647b      	str	r3, [r7, #68]	; 0x44
 8002fde:	2301      	movs	r3, #1
 8002fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe4:	f383 8810 	msr	PRIMASK, r3
}
 8002fe8:	46c0      	nop			; (mov r8, r8)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	494c      	ldr	r1, [pc, #304]	; (8003128 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002ff6:	400a      	ands	r2, r1
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ffc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003000:	f383 8810 	msr	PRIMASK, r3
}
 8003004:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003006:	f3ef 8310 	mrs	r3, PRIMASK
 800300a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800300c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800300e:	643b      	str	r3, [r7, #64]	; 0x40
 8003010:	2301      	movs	r3, #1
 8003012:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003016:	f383 8810 	msr	PRIMASK, r3
}
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2101      	movs	r1, #1
 8003028:	438a      	bics	r2, r1
 800302a:	609a      	str	r2, [r3, #8]
 800302c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800302e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003032:	f383 8810 	msr	PRIMASK, r3
}
 8003036:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2220      	movs	r2, #32
 800303c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2220      	movs	r2, #32
 8003042:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2274      	movs	r2, #116	; 0x74
 8003048:	2100      	movs	r1, #0
 800304a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e067      	b.n	8003120 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2204      	movs	r2, #4
 8003058:	4013      	ands	r3, r2
 800305a:	d050      	beq.n	80030fe <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	69da      	ldr	r2, [r3, #28]
 8003062:	2380      	movs	r3, #128	; 0x80
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	401a      	ands	r2, r3
 8003068:	2380      	movs	r3, #128	; 0x80
 800306a:	011b      	lsls	r3, r3, #4
 800306c:	429a      	cmp	r2, r3
 800306e:	d146      	bne.n	80030fe <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2280      	movs	r2, #128	; 0x80
 8003076:	0112      	lsls	r2, r2, #4
 8003078:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800307a:	f3ef 8310 	mrs	r3, PRIMASK
 800307e:	613b      	str	r3, [r7, #16]
  return(result);
 8003080:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003084:	2301      	movs	r3, #1
 8003086:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f383 8810 	msr	PRIMASK, r3
}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4923      	ldr	r1, [pc, #140]	; (8003128 <UART_WaitOnFlagUntilTimeout+0x184>)
 800309c:	400a      	ands	r2, r1
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030a2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	f383 8810 	msr	PRIMASK, r3
}
 80030aa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ac:	f3ef 8310 	mrs	r3, PRIMASK
 80030b0:	61fb      	str	r3, [r7, #28]
  return(result);
 80030b2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80030b6:	2301      	movs	r3, #1
 80030b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	f383 8810 	msr	PRIMASK, r3
}
 80030c0:	46c0      	nop			; (mov r8, r8)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2101      	movs	r1, #1
 80030ce:	438a      	bics	r2, r1
 80030d0:	609a      	str	r2, [r3, #8]
 80030d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	f383 8810 	msr	PRIMASK, r3
}
 80030dc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2220      	movs	r2, #32
 80030e2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2220      	movs	r2, #32
 80030e8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2280      	movs	r2, #128	; 0x80
 80030ee:	2120      	movs	r1, #32
 80030f0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2274      	movs	r2, #116	; 0x74
 80030f6:	2100      	movs	r1, #0
 80030f8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e010      	b.n	8003120 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	4013      	ands	r3, r2
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	425a      	negs	r2, r3
 800310e:	4153      	adcs	r3, r2
 8003110:	b2db      	uxtb	r3, r3
 8003112:	001a      	movs	r2, r3
 8003114:	1dfb      	adds	r3, r7, #7
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d100      	bne.n	800311e <UART_WaitOnFlagUntilTimeout+0x17a>
 800311c:	e74b      	b.n	8002fb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	0018      	movs	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	b014      	add	sp, #80	; 0x50
 8003126:	bd80      	pop	{r7, pc}
 8003128:	fffffe5f 	.word	0xfffffe5f

0800312c <ws2812b_init>:
static void fillTheSecondHalfOfBuffer(void);

static void finishSequenze(void);

void ws2812b_init (void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
//	{
//		Led[i].Red = 0*i;
//		Led[i].Green = 20*i;
//		Led[i].Blue = 0*i;
//	}
	Led[0].Red = 50;
 8003130:	4b12      	ldr	r3, [pc, #72]	; (800317c <ws2812b_init+0x50>)
 8003132:	2232      	movs	r2, #50	; 0x32
 8003134:	705a      	strb	r2, [r3, #1]
	Led[1].Green = 50;
 8003136:	4b11      	ldr	r3, [pc, #68]	; (800317c <ws2812b_init+0x50>)
 8003138:	2232      	movs	r2, #50	; 0x32
 800313a:	70da      	strb	r2, [r3, #3]
	Led[2].Blue = 50;
 800313c:	4b0f      	ldr	r3, [pc, #60]	; (800317c <ws2812b_init+0x50>)
 800313e:	2232      	movs	r2, #50	; 0x32
 8003140:	721a      	strb	r2, [r3, #8]
	Led[3].Red = 100;
 8003142:	4b0e      	ldr	r3, [pc, #56]	; (800317c <ws2812b_init+0x50>)
 8003144:	2264      	movs	r2, #100	; 0x64
 8003146:	729a      	strb	r2, [r3, #10]
	Led[4].Green = 100;
 8003148:	4b0c      	ldr	r3, [pc, #48]	; (800317c <ws2812b_init+0x50>)
 800314a:	2264      	movs	r2, #100	; 0x64
 800314c:	731a      	strb	r2, [r3, #12]
	Led[5].Blue = 100;
 800314e:	4b0b      	ldr	r3, [pc, #44]	; (800317c <ws2812b_init+0x50>)
 8003150:	2264      	movs	r2, #100	; 0x64
 8003152:	745a      	strb	r2, [r3, #17]
	Led[6].Red = 200;
 8003154:	4b09      	ldr	r3, [pc, #36]	; (800317c <ws2812b_init+0x50>)
 8003156:	22c8      	movs	r2, #200	; 0xc8
 8003158:	74da      	strb	r2, [r3, #19]
	Led[7].Green = 200;
 800315a:	4b08      	ldr	r3, [pc, #32]	; (800317c <ws2812b_init+0x50>)
 800315c:	22c8      	movs	r2, #200	; 0xc8
 800315e:	755a      	strb	r2, [r3, #21]
	Led[8].Blue = 200;
 8003160:	4b06      	ldr	r3, [pc, #24]	; (800317c <ws2812b_init+0x50>)
 8003162:	22c8      	movs	r2, #200	; 0xc8
 8003164:	769a      	strb	r2, [r3, #26]

	fillTheFirstHalfOfBuffer();
 8003166:	f000 f835 	bl	80031d4 <fillTheFirstHalfOfBuffer>
//	HAL_DMA_Start_IT(&hdma_tim3_ch4_up, (uint32_t)mg_dma2PwmBitBuffer, (uint32_t)&htim3.Instance->CCR4, c_sizeOfBitBuffer);
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4, (uint32_t*)mg_dma2PwmBitBuffer, c_sizeOfBitBuffer);
 800316a:	2330      	movs	r3, #48	; 0x30
 800316c:	4a04      	ldr	r2, [pc, #16]	; (8003180 <ws2812b_init+0x54>)
 800316e:	4805      	ldr	r0, [pc, #20]	; (8003184 <ws2812b_init+0x58>)
 8003170:	210c      	movs	r1, #12
 8003172:	f7fe fce5 	bl	8001b40 <HAL_TIM_PWM_Start_DMA>
}
 8003176:	46c0      	nop			; (mov r8, r8)
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	20000058 	.word	0x20000058
 8003180:	20000028 	.word	0x20000028
 8003184:	2000007c 	.word	0x2000007c

08003188 <ws2812b_main>:

void ws2812b_main(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0

}
 800318c:	46c0      	nop			; (mov r8, r8)
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
	...

08003194 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	4b04      	ldr	r3, [pc, #16]	; (80031b0 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d101      	bne.n	80031a8 <HAL_TIM_PWM_PulseFinishedCallback+0x14>
	{
		fillTheSecondHalfOfBuffer();
 80031a4:	f000 fa44 	bl	8003630 <fillTheSecondHalfOfBuffer>
	}

}
 80031a8:	46c0      	nop			; (mov r8, r8)
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b002      	add	sp, #8
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	2000007c 	.word	0x2000007c

080031b4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	4b04      	ldr	r3, [pc, #16]	; (80031d0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x1c>)
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d101      	bne.n	80031c8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x14>
	{
		fillTheFirstHalfOfBuffer();
 80031c4:	f000 f806 	bl	80031d4 <fillTheFirstHalfOfBuffer>
	}
}
 80031c8:	46c0      	nop			; (mov r8, r8)
 80031ca:	46bd      	mov	sp, r7
 80031cc:	b002      	add	sp, #8
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	2000007c 	.word	0x2000007c

080031d4 <fillTheFirstHalfOfBuffer>:
//	fillTheFirstHalfOfBuffer();
//}

// wenn die erste hälfte übertragen wurde
void fillTheFirstHalfOfBuffer(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
	if (mg_posInBufferToRead >= c_sizeOfBufferToStripe)
 80031da:	4bc7      	ldr	r3, [pc, #796]	; (80034f8 <fillTheFirstHalfOfBuffer+0x324>)
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	b29b      	uxth	r3, r3
 80031e0:	220a      	movs	r2, #10
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d309      	bcc.n	80031fa <fillTheFirstHalfOfBuffer+0x26>
	{
		mg_posInBufferToRead = 0;
 80031e6:	4bc4      	ldr	r3, [pc, #784]	; (80034f8 <fillTheFirstHalfOfBuffer+0x324>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	801a      	strh	r2, [r3, #0]
		mg_numOfRepeats++;
 80031ec:	4bc3      	ldr	r3, [pc, #780]	; (80034fc <fillTheFirstHalfOfBuffer+0x328>)
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	3301      	adds	r3, #1
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	4bc1      	ldr	r3, [pc, #772]	; (80034fc <fillTheFirstHalfOfBuffer+0x328>)
 80031f8:	801a      	strh	r2, [r3, #0]
	}

	if (mg_numOfRepeatsCnt >= mg_numOfRepeats)
 80031fa:	4bc1      	ldr	r3, [pc, #772]	; (8003500 <fillTheFirstHalfOfBuffer+0x32c>)
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	b29a      	uxth	r2, r3
 8003200:	4bbe      	ldr	r3, [pc, #760]	; (80034fc <fillTheFirstHalfOfBuffer+0x328>)
 8003202:	881b      	ldrh	r3, [r3, #0]
 8003204:	b29b      	uxth	r3, r3
 8003206:	429a      	cmp	r2, r3
 8003208:	d312      	bcc.n	8003230 <fillTheFirstHalfOfBuffer+0x5c>
	{
		for (uint8_t i = 0; i < 23; ++i)
 800320a:	1dfb      	adds	r3, r7, #7
 800320c:	2200      	movs	r2, #0
 800320e:	701a      	strb	r2, [r3, #0]
 8003210:	e009      	b.n	8003226 <fillTheFirstHalfOfBuffer+0x52>
		{
			mg_dma2PwmBitBuffer[i] = 0;
 8003212:	1dfb      	adds	r3, r7, #7
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	4abb      	ldr	r2, [pc, #748]	; (8003504 <fillTheFirstHalfOfBuffer+0x330>)
 8003218:	2100      	movs	r1, #0
 800321a:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 23; ++i)
 800321c:	1dfb      	adds	r3, r7, #7
 800321e:	1dfa      	adds	r2, r7, #7
 8003220:	7812      	ldrb	r2, [r2, #0]
 8003222:	3201      	adds	r2, #1
 8003224:	701a      	strb	r2, [r3, #0]
 8003226:	1dfb      	adds	r3, r7, #7
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b16      	cmp	r3, #22
 800322c:	d9f1      	bls.n	8003212 <fillTheFirstHalfOfBuffer+0x3e>
 800322e:	e1ee      	b.n	800360e <fillTheFirstHalfOfBuffer+0x43a>
		}
	}
	else
	{
		/* Green */
		mg_dma2PwmBitBuffer[0]  = (Led[mg_posInBufferToRead].Green & 0x80) ? c_PulseLogic1 : c_PulseLogic0;
 8003230:	4bb1      	ldr	r3, [pc, #708]	; (80034f8 <fillTheFirstHalfOfBuffer+0x324>)
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	b29b      	uxth	r3, r3
 8003236:	0019      	movs	r1, r3
 8003238:	4ab3      	ldr	r2, [pc, #716]	; (8003508 <fillTheFirstHalfOfBuffer+0x334>)
 800323a:	000b      	movs	r3, r1
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	185b      	adds	r3, r3, r1
 8003240:	5c9b      	ldrb	r3, [r3, r2]
 8003242:	b2db      	uxtb	r3, r3
 8003244:	b25b      	sxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	da01      	bge.n	800324e <fillTheFirstHalfOfBuffer+0x7a>
 800324a:	2228      	movs	r2, #40	; 0x28
 800324c:	e000      	b.n	8003250 <fillTheFirstHalfOfBuffer+0x7c>
 800324e:	2213      	movs	r2, #19
 8003250:	4bac      	ldr	r3, [pc, #688]	; (8003504 <fillTheFirstHalfOfBuffer+0x330>)
 8003252:	701a      	strb	r2, [r3, #0]
		mg_dma2PwmBitBuffer[1]  = (Led[mg_posInBufferToRead].Green & 0x40) ? c_PulseLogic1 : c_PulseLogic0;
 8003254:	4ba8      	ldr	r3, [pc, #672]	; (80034f8 <fillTheFirstHalfOfBuffer+0x324>)
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	b29b      	uxth	r3, r3
 800325a:	0019      	movs	r1, r3
 800325c:	4aaa      	ldr	r2, [pc, #680]	; (8003508 <fillTheFirstHalfOfBuffer+0x334>)
 800325e:	000b      	movs	r3, r1
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	185b      	adds	r3, r3, r1
 8003264:	5c9b      	ldrb	r3, [r3, r2]
 8003266:	b2db      	uxtb	r3, r3
 8003268:	001a      	movs	r2, r3
 800326a:	2340      	movs	r3, #64	; 0x40
 800326c:	4013      	ands	r3, r2
 800326e:	d001      	beq.n	8003274 <fillTheFirstHalfOfBuffer+0xa0>
 8003270:	2228      	movs	r2, #40	; 0x28
 8003272:	e000      	b.n	8003276 <fillTheFirstHalfOfBuffer+0xa2>
 8003274:	2213      	movs	r2, #19
 8003276:	4ba3      	ldr	r3, [pc, #652]	; (8003504 <fillTheFirstHalfOfBuffer+0x330>)
 8003278:	705a      	strb	r2, [r3, #1]
		mg_dma2PwmBitBuffer[2]  = (Led[mg_posInBufferToRead].Green & 0x20) ? c_PulseLogic1 : c_PulseLogic0;
 800327a:	4b9f      	ldr	r3, [pc, #636]	; (80034f8 <fillTheFirstHalfOfBuffer+0x324>)
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	b29b      	uxth	r3, r3
 8003280:	0019      	movs	r1, r3
 8003282:	4aa1      	ldr	r2, [pc, #644]	; (8003508 <fillTheFirstHalfOfBuffer+0x334>)
 8003284:	000b      	movs	r3, r1
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	185b      	adds	r3, r3, r1
 800328a:	5c9b      	ldrb	r3, [r3, r2]
 800328c:	b2db      	uxtb	r3, r3
 800328e:	001a      	movs	r2, r3
 8003290:	2320      	movs	r3, #32
 8003292:	4013      	ands	r3, r2
 8003294:	d001      	beq.n	800329a <fillTheFirstHalfOfBuffer+0xc6>
 8003296:	2228      	movs	r2, #40	; 0x28
 8003298:	e000      	b.n	800329c <fillTheFirstHalfOfBuffer+0xc8>
 800329a:	2213      	movs	r2, #19
 800329c:	4b99      	ldr	r3, [pc, #612]	; (8003504 <fillTheFirstHalfOfBuffer+0x330>)
 800329e:	709a      	strb	r2, [r3, #2]
		mg_dma2PwmBitBuffer[3]  = (Led[mg_posInBufferToRead].Green & 0x10) ? c_PulseLogic1 : c_PulseLogic0;
 80032a0:	4b95      	ldr	r3, [pc, #596]	; (80034f8 <fillTheFirstHalfOfBuffer+0x324>)
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	0019      	movs	r1, r3
 80032a8:	4a97      	ldr	r2, [pc, #604]	; (8003508 <fillTheFirstHalfOfBuffer+0x334>)
 80032aa:	000b      	movs	r3, r1
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	185b      	adds	r3, r3, r1
 80032b0:	5c9b      	ldrb	r3, [r3, r2]
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	001a      	movs	r2, r3
 80032b6:	2310      	movs	r3, #16
 80032b8:	4013      	ands	r3, r2
 80032ba:	d001      	beq.n	80032c0 <fillTheFirstHalfOfBuffer+0xec>
 80032bc:	2228      	movs	r2, #40	; 0x28
 80032be:	e000      	b.n	80032c2 <fillTheFirstHalfOfBuffer+0xee>
 80032c0:	2213      	movs	r2, #19
 80032c2:	4b90      	ldr	r3, [pc, #576]	; (8003504 <fillTheFirstHalfOfBuffer+0x330>)
 80032c4:	70da      	strb	r2, [r3, #3]
		mg_dma2PwmBitBuffer[4]  = (Led[mg_posInBufferToRead].Green & 0x08) ? c_PulseLogic1 : c_PulseLogic0;
 80032c6:	4b8c      	ldr	r3, [pc, #560]	; (80034f8 <fillTheFirstHalfOfBuffer+0x324>)
 80032c8:	881b      	ldrh	r3, [r3, #0]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	0019      	movs	r1, r3
 80032ce:	4a8e      	ldr	r2, [pc, #568]	; (8003508 <fillTheFirstHalfOfBuffer+0x334>)
 80032d0:	000b      	movs	r3, r1
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	185b      	adds	r3, r3, r1
 80032d6:	5c9b      	ldrb	r3, [r3, r2]
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	001a      	movs	r2, r3
 80032dc:	2308      	movs	r3, #8
 80032de:	4013      	ands	r3, r2
 80032e0:	d001      	beq.n	80032e6 <fillTheFirstHalfOfBuffer+0x112>
 80032e2:	2228      	movs	r2, #40	; 0x28
 80032e4:	e000      	b.n	80032e8 <fillTheFirstHalfOfBuffer+0x114>
 80032e6:	2213      	movs	r2, #19
 80032e8:	4b86      	ldr	r3, [pc, #536]	; (8003504 <fillTheFirstHalfOfBuffer+0x330>)
 80032ea:	711a      	strb	r2, [r3, #4]
		mg_dma2PwmBitBuffer[5]  = (Led[mg_posInBufferToRead].Green & 0x04) ? c_PulseLogic1 : c_PulseLogic0;
 80032ec:	4b82      	ldr	r3, [pc, #520]	; (80034f8 <fillTheFirstHalfOfBuffer+0x324>)
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	0019      	movs	r1, r3
 80032f4:	4a84      	ldr	r2, [pc, #528]	; (8003508 <fillTheFirstHalfOfBuffer+0x334>)
 80032f6:	000b      	movs	r3, r1
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	185b      	adds	r3, r3, r1
 80032fc:	5c9b      	ldrb	r3, [r3, r2]
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	001a      	movs	r2, r3
 8003302:	2304      	movs	r3, #4
 8003304:	4013      	ands	r3, r2
 8003306:	d001      	beq.n	800330c <fillTheFirstHalfOfBuffer+0x138>
 8003308:	2228      	movs	r2, #40	; 0x28
 800330a:	e000      	b.n	800330e <fillTheFirstHalfOfBuffer+0x13a>
 800330c:	2213      	movs	r2, #19
 800330e:	4b7d      	ldr	r3, [pc, #500]	; (8003504 <fillTheFirstHalfOfBuffer+0x330>)
 8003310:	715a      	strb	r2, [r3, #5]
		mg_dma2PwmBitBuffer[6]  = (Led[mg_posInBufferToRead].Green & 0x02) ? c_PulseLogic1 : c_PulseLogic0;
 8003312:	4b79      	ldr	r3, [pc, #484]	; (80034f8 <fillTheFirstHalfOfBuffer+0x324>)
 8003314:	881b      	ldrh	r3, [r3, #0]
 8003316:	b29b      	uxth	r3, r3
 8003318:	0019      	movs	r1, r3
 800331a:	4a7b      	ldr	r2, [pc, #492]	; (8003508 <fillTheFirstHalfOfBuffer+0x334>)
 800331c:	000b      	movs	r3, r1
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	185b      	adds	r3, r3, r1
 8003322:	5c9b      	ldrb	r3, [r3, r2]
 8003324:	b2db      	uxtb	r3, r3
 8003326:	001a      	movs	r2, r3
 8003328:	2302      	movs	r3, #2
 800332a:	4013      	ands	r3, r2
 800332c:	d001      	beq.n	8003332 <fillTheFirstHalfOfBuffer+0x15e>
 800332e:	2228      	movs	r2, #40	; 0x28
 8003330:	e000      	b.n	8003334 <fillTheFirstHalfOfBuffer+0x160>
 8003332:	2213      	movs	r2, #19
 8003334:	4b73      	ldr	r3, [pc, #460]	; (8003504 <fillTheFirstHalfOfBuffer+0x330>)
 8003336:	719a      	strb	r2, [r3, #6]
		mg_dma2PwmBitBuffer[7]  = (Led[mg_posInBufferToRead].Green & 0x01) ? c_PulseLogic1 : c_PulseLogic0;
 8003338:	4b6f      	ldr	r3, [pc, #444]	; (80034f8 <fillTheFirstHalfOfBuffer+0x324>)
 800333a:	881b      	ldrh	r3, [r3, #0]
 800333c:	b29b      	uxth	r3, r3
 800333e:	0019      	movs	r1, r3
 8003340:	4a71      	ldr	r2, [pc, #452]	; (8003508 <fillTheFirstHalfOfBuffer+0x334>)
 8003342:	000b      	movs	r3, r1
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	185b      	adds	r3, r3, r1
 8003348:	5c9b      	ldrb	r3, [r3, r2]
 800334a:	b2db      	uxtb	r3, r3
 800334c:	001a      	movs	r2, r3
 800334e:	2301      	movs	r3, #1
 8003350:	4013      	ands	r3, r2
 8003352:	d001      	beq.n	8003358 <fillTheFirstHalfOfBuffer+0x184>
 8003354:	2228      	movs	r2, #40	; 0x28
 8003356:	e000      	b.n	800335a <fillTheFirstHalfOfBuffer+0x186>
 8003358:	2213      	movs	r2, #19
 800335a:	4b6a      	ldr	r3, [pc, #424]	; (8003504 <fillTheFirstHalfOfBuffer+0x330>)
 800335c:	71da      	strb	r2, [r3, #7]
		/* Red */
		mg_dma2PwmBitBuffer[8]  = (Led[mg_posInBufferToRead].Red & 0x80) ? c_PulseLogic1 : c_PulseLogic0;
 800335e:	4b66      	ldr	r3, [pc, #408]	; (80034f8 <fillTheFirstHalfOfBuffer+0x324>)
 8003360:	881b      	ldrh	r3, [r3, #0]
 8003362:	b29b      	uxth	r3, r3
 8003364:	0019      	movs	r1, r3
 8003366:	4a68      	ldr	r2, [pc, #416]	; (8003508 <fillTheFirstHalfOfBuffer+0x334>)
 8003368:	000b      	movs	r3, r1
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	185b      	adds	r3, r3, r1
 800336e:	18d3      	adds	r3, r2, r3
 8003370:	3301      	adds	r3, #1
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	b2db      	uxtb	r3, r3
 8003376:	b25b      	sxtb	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	da01      	bge.n	8003380 <fillTheFirstHalfOfBuffer+0x1ac>
 800337c:	2228      	movs	r2, #40	; 0x28
 800337e:	e000      	b.n	8003382 <fillTheFirstHalfOfBuffer+0x1ae>
 8003380:	2213      	movs	r2, #19
 8003382:	4b60      	ldr	r3, [pc, #384]	; (8003504 <fillTheFirstHalfOfBuffer+0x330>)
 8003384:	721a      	strb	r2, [r3, #8]
		mg_dma2PwmBitBuffer[9]  = (Led[mg_posInBufferToRead].Red & 0x40) ? c_PulseLogic1 : c_PulseLogic0;
 8003386:	4b5c      	ldr	r3, [pc, #368]	; (80034f8 <fillTheFirstHalfOfBuffer+0x324>)
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	b29b      	uxth	r3, r3
 800338c:	0019      	movs	r1, r3
 800338e:	4a5e      	ldr	r2, [pc, #376]	; (8003508 <fillTheFirstHalfOfBuffer+0x334>)
 8003390:	000b      	movs	r3, r1
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	185b      	adds	r3, r3, r1
 8003396:	18d3      	adds	r3, r2, r3
 8003398:	3301      	adds	r3, #1
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	b2db      	uxtb	r3, r3
 800339e:	001a      	movs	r2, r3
 80033a0:	2340      	movs	r3, #64	; 0x40
 80033a2:	4013      	ands	r3, r2
 80033a4:	d001      	beq.n	80033aa <fillTheFirstHalfOfBuffer+0x1d6>
 80033a6:	2228      	movs	r2, #40	; 0x28
 80033a8:	e000      	b.n	80033ac <fillTheFirstHalfOfBuffer+0x1d8>
 80033aa:	2213      	movs	r2, #19
 80033ac:	4b55      	ldr	r3, [pc, #340]	; (8003504 <fillTheFirstHalfOfBuffer+0x330>)
 80033ae:	725a      	strb	r2, [r3, #9]
		mg_dma2PwmBitBuffer[10] = (Led[mg_posInBufferToRead].Red & 0x20) ? c_PulseLogic1 : c_PulseLogic0;
 80033b0:	4b51      	ldr	r3, [pc, #324]	; (80034f8 <fillTheFirstHalfOfBuffer+0x324>)
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	0019      	movs	r1, r3
 80033b8:	4a53      	ldr	r2, [pc, #332]	; (8003508 <fillTheFirstHalfOfBuffer+0x334>)
 80033ba:	000b      	movs	r3, r1
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	185b      	adds	r3, r3, r1
 80033c0:	18d3      	adds	r3, r2, r3
 80033c2:	3301      	adds	r3, #1
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	001a      	movs	r2, r3
 80033ca:	2320      	movs	r3, #32
 80033cc:	4013      	ands	r3, r2
 80033ce:	d001      	beq.n	80033d4 <fillTheFirstHalfOfBuffer+0x200>
 80033d0:	2228      	movs	r2, #40	; 0x28
 80033d2:	e000      	b.n	80033d6 <fillTheFirstHalfOfBuffer+0x202>
 80033d4:	2213      	movs	r2, #19
 80033d6:	4b4b      	ldr	r3, [pc, #300]	; (8003504 <fillTheFirstHalfOfBuffer+0x330>)
 80033d8:	729a      	strb	r2, [r3, #10]
		mg_dma2PwmBitBuffer[11] = (Led[mg_posInBufferToRead].Red & 0x10) ? c_PulseLogic1 : c_PulseLogic0;
 80033da:	4b47      	ldr	r3, [pc, #284]	; (80034f8 <fillTheFirstHalfOfBuffer+0x324>)
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	b29b      	uxth	r3, r3
 80033e0:	0019      	movs	r1, r3
 80033e2:	4a49      	ldr	r2, [pc, #292]	; (8003508 <fillTheFirstHalfOfBuffer+0x334>)
 80033e4:	000b      	movs	r3, r1
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	185b      	adds	r3, r3, r1
 80033ea:	18d3      	adds	r3, r2, r3
 80033ec:	3301      	adds	r3, #1
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	001a      	movs	r2, r3
 80033f4:	2310      	movs	r3, #16
 80033f6:	4013      	ands	r3, r2
 80033f8:	d001      	beq.n	80033fe <fillTheFirstHalfOfBuffer+0x22a>
 80033fa:	2228      	movs	r2, #40	; 0x28
 80033fc:	e000      	b.n	8003400 <fillTheFirstHalfOfBuffer+0x22c>
 80033fe:	2213      	movs	r2, #19
 8003400:	4b40      	ldr	r3, [pc, #256]	; (8003504 <fillTheFirstHalfOfBuffer+0x330>)
 8003402:	72da      	strb	r2, [r3, #11]
		mg_dma2PwmBitBuffer[12] = (Led[mg_posInBufferToRead].Red & 0x08) ? c_PulseLogic1 : c_PulseLogic0;
 8003404:	4b3c      	ldr	r3, [pc, #240]	; (80034f8 <fillTheFirstHalfOfBuffer+0x324>)
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	b29b      	uxth	r3, r3
 800340a:	0019      	movs	r1, r3
 800340c:	4a3e      	ldr	r2, [pc, #248]	; (8003508 <fillTheFirstHalfOfBuffer+0x334>)
 800340e:	000b      	movs	r3, r1
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	185b      	adds	r3, r3, r1
 8003414:	18d3      	adds	r3, r2, r3
 8003416:	3301      	adds	r3, #1
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	b2db      	uxtb	r3, r3
 800341c:	001a      	movs	r2, r3
 800341e:	2308      	movs	r3, #8
 8003420:	4013      	ands	r3, r2
 8003422:	d001      	beq.n	8003428 <fillTheFirstHalfOfBuffer+0x254>
 8003424:	2228      	movs	r2, #40	; 0x28
 8003426:	e000      	b.n	800342a <fillTheFirstHalfOfBuffer+0x256>
 8003428:	2213      	movs	r2, #19
 800342a:	4b36      	ldr	r3, [pc, #216]	; (8003504 <fillTheFirstHalfOfBuffer+0x330>)
 800342c:	731a      	strb	r2, [r3, #12]
		mg_dma2PwmBitBuffer[13] = (Led[mg_posInBufferToRead].Red & 0x04) ? c_PulseLogic1 : c_PulseLogic0;
 800342e:	4b32      	ldr	r3, [pc, #200]	; (80034f8 <fillTheFirstHalfOfBuffer+0x324>)
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	b29b      	uxth	r3, r3
 8003434:	0019      	movs	r1, r3
 8003436:	4a34      	ldr	r2, [pc, #208]	; (8003508 <fillTheFirstHalfOfBuffer+0x334>)
 8003438:	000b      	movs	r3, r1
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	185b      	adds	r3, r3, r1
 800343e:	18d3      	adds	r3, r2, r3
 8003440:	3301      	adds	r3, #1
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	b2db      	uxtb	r3, r3
 8003446:	001a      	movs	r2, r3
 8003448:	2304      	movs	r3, #4
 800344a:	4013      	ands	r3, r2
 800344c:	d001      	beq.n	8003452 <fillTheFirstHalfOfBuffer+0x27e>
 800344e:	2228      	movs	r2, #40	; 0x28
 8003450:	e000      	b.n	8003454 <fillTheFirstHalfOfBuffer+0x280>
 8003452:	2213      	movs	r2, #19
 8003454:	4b2b      	ldr	r3, [pc, #172]	; (8003504 <fillTheFirstHalfOfBuffer+0x330>)
 8003456:	735a      	strb	r2, [r3, #13]
		mg_dma2PwmBitBuffer[14] = (Led[mg_posInBufferToRead].Red & 0x02) ? c_PulseLogic1 : c_PulseLogic0;
 8003458:	4b27      	ldr	r3, [pc, #156]	; (80034f8 <fillTheFirstHalfOfBuffer+0x324>)
 800345a:	881b      	ldrh	r3, [r3, #0]
 800345c:	b29b      	uxth	r3, r3
 800345e:	0019      	movs	r1, r3
 8003460:	4a29      	ldr	r2, [pc, #164]	; (8003508 <fillTheFirstHalfOfBuffer+0x334>)
 8003462:	000b      	movs	r3, r1
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	185b      	adds	r3, r3, r1
 8003468:	18d3      	adds	r3, r2, r3
 800346a:	3301      	adds	r3, #1
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	b2db      	uxtb	r3, r3
 8003470:	001a      	movs	r2, r3
 8003472:	2302      	movs	r3, #2
 8003474:	4013      	ands	r3, r2
 8003476:	d001      	beq.n	800347c <fillTheFirstHalfOfBuffer+0x2a8>
 8003478:	2228      	movs	r2, #40	; 0x28
 800347a:	e000      	b.n	800347e <fillTheFirstHalfOfBuffer+0x2aa>
 800347c:	2213      	movs	r2, #19
 800347e:	4b21      	ldr	r3, [pc, #132]	; (8003504 <fillTheFirstHalfOfBuffer+0x330>)
 8003480:	739a      	strb	r2, [r3, #14]
		mg_dma2PwmBitBuffer[15] = (Led[mg_posInBufferToRead].Red & 0x01) ? c_PulseLogic1 : c_PulseLogic0;
 8003482:	4b1d      	ldr	r3, [pc, #116]	; (80034f8 <fillTheFirstHalfOfBuffer+0x324>)
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	b29b      	uxth	r3, r3
 8003488:	0019      	movs	r1, r3
 800348a:	4a1f      	ldr	r2, [pc, #124]	; (8003508 <fillTheFirstHalfOfBuffer+0x334>)
 800348c:	000b      	movs	r3, r1
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	185b      	adds	r3, r3, r1
 8003492:	18d3      	adds	r3, r2, r3
 8003494:	3301      	adds	r3, #1
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	b2db      	uxtb	r3, r3
 800349a:	001a      	movs	r2, r3
 800349c:	2301      	movs	r3, #1
 800349e:	4013      	ands	r3, r2
 80034a0:	d001      	beq.n	80034a6 <fillTheFirstHalfOfBuffer+0x2d2>
 80034a2:	2228      	movs	r2, #40	; 0x28
 80034a4:	e000      	b.n	80034a8 <fillTheFirstHalfOfBuffer+0x2d4>
 80034a6:	2213      	movs	r2, #19
 80034a8:	4b16      	ldr	r3, [pc, #88]	; (8003504 <fillTheFirstHalfOfBuffer+0x330>)
 80034aa:	73da      	strb	r2, [r3, #15]
		/* Blue */
		mg_dma2PwmBitBuffer[16] = (Led[mg_posInBufferToRead].Blue & 0x80) ? c_PulseLogic1 : c_PulseLogic0;
 80034ac:	4b12      	ldr	r3, [pc, #72]	; (80034f8 <fillTheFirstHalfOfBuffer+0x324>)
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	0019      	movs	r1, r3
 80034b4:	4a14      	ldr	r2, [pc, #80]	; (8003508 <fillTheFirstHalfOfBuffer+0x334>)
 80034b6:	000b      	movs	r3, r1
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	185b      	adds	r3, r3, r1
 80034bc:	18d3      	adds	r3, r2, r3
 80034be:	3302      	adds	r3, #2
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	b25b      	sxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	da01      	bge.n	80034ce <fillTheFirstHalfOfBuffer+0x2fa>
 80034ca:	2228      	movs	r2, #40	; 0x28
 80034cc:	e000      	b.n	80034d0 <fillTheFirstHalfOfBuffer+0x2fc>
 80034ce:	2213      	movs	r2, #19
 80034d0:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <fillTheFirstHalfOfBuffer+0x330>)
 80034d2:	741a      	strb	r2, [r3, #16]
		mg_dma2PwmBitBuffer[17] = (Led[mg_posInBufferToRead].Blue & 0x40) ? c_PulseLogic1 : c_PulseLogic0;
 80034d4:	4b08      	ldr	r3, [pc, #32]	; (80034f8 <fillTheFirstHalfOfBuffer+0x324>)
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	b29b      	uxth	r3, r3
 80034da:	0019      	movs	r1, r3
 80034dc:	4a0a      	ldr	r2, [pc, #40]	; (8003508 <fillTheFirstHalfOfBuffer+0x334>)
 80034de:	000b      	movs	r3, r1
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	185b      	adds	r3, r3, r1
 80034e4:	18d3      	adds	r3, r2, r3
 80034e6:	3302      	adds	r3, #2
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	001a      	movs	r2, r3
 80034ee:	2340      	movs	r3, #64	; 0x40
 80034f0:	4013      	ands	r3, r2
 80034f2:	d00b      	beq.n	800350c <fillTheFirstHalfOfBuffer+0x338>
 80034f4:	2228      	movs	r2, #40	; 0x28
 80034f6:	e00a      	b.n	800350e <fillTheFirstHalfOfBuffer+0x33a>
 80034f8:	20000076 	.word	0x20000076
 80034fc:	2000000a 	.word	0x2000000a
 8003500:	20000078 	.word	0x20000078
 8003504:	20000028 	.word	0x20000028
 8003508:	20000058 	.word	0x20000058
 800350c:	2213      	movs	r2, #19
 800350e:	4b45      	ldr	r3, [pc, #276]	; (8003624 <fillTheFirstHalfOfBuffer+0x450>)
 8003510:	745a      	strb	r2, [r3, #17]
		mg_dma2PwmBitBuffer[18] = (Led[mg_posInBufferToRead].Blue & 0x20) ? c_PulseLogic1 : c_PulseLogic0;
 8003512:	4b45      	ldr	r3, [pc, #276]	; (8003628 <fillTheFirstHalfOfBuffer+0x454>)
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	b29b      	uxth	r3, r3
 8003518:	0019      	movs	r1, r3
 800351a:	4a44      	ldr	r2, [pc, #272]	; (800362c <fillTheFirstHalfOfBuffer+0x458>)
 800351c:	000b      	movs	r3, r1
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	185b      	adds	r3, r3, r1
 8003522:	18d3      	adds	r3, r2, r3
 8003524:	3302      	adds	r3, #2
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	b2db      	uxtb	r3, r3
 800352a:	001a      	movs	r2, r3
 800352c:	2320      	movs	r3, #32
 800352e:	4013      	ands	r3, r2
 8003530:	d001      	beq.n	8003536 <fillTheFirstHalfOfBuffer+0x362>
 8003532:	2228      	movs	r2, #40	; 0x28
 8003534:	e000      	b.n	8003538 <fillTheFirstHalfOfBuffer+0x364>
 8003536:	2213      	movs	r2, #19
 8003538:	4b3a      	ldr	r3, [pc, #232]	; (8003624 <fillTheFirstHalfOfBuffer+0x450>)
 800353a:	749a      	strb	r2, [r3, #18]
		mg_dma2PwmBitBuffer[19] = (Led[mg_posInBufferToRead].Blue & 0x10) ? c_PulseLogic1 : c_PulseLogic0;
 800353c:	4b3a      	ldr	r3, [pc, #232]	; (8003628 <fillTheFirstHalfOfBuffer+0x454>)
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	b29b      	uxth	r3, r3
 8003542:	0019      	movs	r1, r3
 8003544:	4a39      	ldr	r2, [pc, #228]	; (800362c <fillTheFirstHalfOfBuffer+0x458>)
 8003546:	000b      	movs	r3, r1
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	185b      	adds	r3, r3, r1
 800354c:	18d3      	adds	r3, r2, r3
 800354e:	3302      	adds	r3, #2
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	b2db      	uxtb	r3, r3
 8003554:	001a      	movs	r2, r3
 8003556:	2310      	movs	r3, #16
 8003558:	4013      	ands	r3, r2
 800355a:	d001      	beq.n	8003560 <fillTheFirstHalfOfBuffer+0x38c>
 800355c:	2228      	movs	r2, #40	; 0x28
 800355e:	e000      	b.n	8003562 <fillTheFirstHalfOfBuffer+0x38e>
 8003560:	2213      	movs	r2, #19
 8003562:	4b30      	ldr	r3, [pc, #192]	; (8003624 <fillTheFirstHalfOfBuffer+0x450>)
 8003564:	74da      	strb	r2, [r3, #19]
		mg_dma2PwmBitBuffer[20] = (Led[mg_posInBufferToRead].Blue & 0x08) ? c_PulseLogic1 : c_PulseLogic0;
 8003566:	4b30      	ldr	r3, [pc, #192]	; (8003628 <fillTheFirstHalfOfBuffer+0x454>)
 8003568:	881b      	ldrh	r3, [r3, #0]
 800356a:	b29b      	uxth	r3, r3
 800356c:	0019      	movs	r1, r3
 800356e:	4a2f      	ldr	r2, [pc, #188]	; (800362c <fillTheFirstHalfOfBuffer+0x458>)
 8003570:	000b      	movs	r3, r1
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	185b      	adds	r3, r3, r1
 8003576:	18d3      	adds	r3, r2, r3
 8003578:	3302      	adds	r3, #2
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	001a      	movs	r2, r3
 8003580:	2308      	movs	r3, #8
 8003582:	4013      	ands	r3, r2
 8003584:	d001      	beq.n	800358a <fillTheFirstHalfOfBuffer+0x3b6>
 8003586:	2228      	movs	r2, #40	; 0x28
 8003588:	e000      	b.n	800358c <fillTheFirstHalfOfBuffer+0x3b8>
 800358a:	2213      	movs	r2, #19
 800358c:	4b25      	ldr	r3, [pc, #148]	; (8003624 <fillTheFirstHalfOfBuffer+0x450>)
 800358e:	751a      	strb	r2, [r3, #20]
		mg_dma2PwmBitBuffer[21] = (Led[mg_posInBufferToRead].Blue & 0x04) ? c_PulseLogic1 : c_PulseLogic0;
 8003590:	4b25      	ldr	r3, [pc, #148]	; (8003628 <fillTheFirstHalfOfBuffer+0x454>)
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	b29b      	uxth	r3, r3
 8003596:	0019      	movs	r1, r3
 8003598:	4a24      	ldr	r2, [pc, #144]	; (800362c <fillTheFirstHalfOfBuffer+0x458>)
 800359a:	000b      	movs	r3, r1
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	185b      	adds	r3, r3, r1
 80035a0:	18d3      	adds	r3, r2, r3
 80035a2:	3302      	adds	r3, #2
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	001a      	movs	r2, r3
 80035aa:	2304      	movs	r3, #4
 80035ac:	4013      	ands	r3, r2
 80035ae:	d001      	beq.n	80035b4 <fillTheFirstHalfOfBuffer+0x3e0>
 80035b0:	2228      	movs	r2, #40	; 0x28
 80035b2:	e000      	b.n	80035b6 <fillTheFirstHalfOfBuffer+0x3e2>
 80035b4:	2213      	movs	r2, #19
 80035b6:	4b1b      	ldr	r3, [pc, #108]	; (8003624 <fillTheFirstHalfOfBuffer+0x450>)
 80035b8:	755a      	strb	r2, [r3, #21]
		mg_dma2PwmBitBuffer[22] = (Led[mg_posInBufferToRead].Blue & 0x02) ? c_PulseLogic1 : c_PulseLogic0;
 80035ba:	4b1b      	ldr	r3, [pc, #108]	; (8003628 <fillTheFirstHalfOfBuffer+0x454>)
 80035bc:	881b      	ldrh	r3, [r3, #0]
 80035be:	b29b      	uxth	r3, r3
 80035c0:	0019      	movs	r1, r3
 80035c2:	4a1a      	ldr	r2, [pc, #104]	; (800362c <fillTheFirstHalfOfBuffer+0x458>)
 80035c4:	000b      	movs	r3, r1
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	185b      	adds	r3, r3, r1
 80035ca:	18d3      	adds	r3, r2, r3
 80035cc:	3302      	adds	r3, #2
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	001a      	movs	r2, r3
 80035d4:	2302      	movs	r3, #2
 80035d6:	4013      	ands	r3, r2
 80035d8:	d001      	beq.n	80035de <fillTheFirstHalfOfBuffer+0x40a>
 80035da:	2228      	movs	r2, #40	; 0x28
 80035dc:	e000      	b.n	80035e0 <fillTheFirstHalfOfBuffer+0x40c>
 80035de:	2213      	movs	r2, #19
 80035e0:	4b10      	ldr	r3, [pc, #64]	; (8003624 <fillTheFirstHalfOfBuffer+0x450>)
 80035e2:	759a      	strb	r2, [r3, #22]
		mg_dma2PwmBitBuffer[23] = (Led[mg_posInBufferToRead].Blue & 0x01) ? c_PulseLogic1 : c_PulseLogic0;
 80035e4:	4b10      	ldr	r3, [pc, #64]	; (8003628 <fillTheFirstHalfOfBuffer+0x454>)
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	0019      	movs	r1, r3
 80035ec:	4a0f      	ldr	r2, [pc, #60]	; (800362c <fillTheFirstHalfOfBuffer+0x458>)
 80035ee:	000b      	movs	r3, r1
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	185b      	adds	r3, r3, r1
 80035f4:	18d3      	adds	r3, r2, r3
 80035f6:	3302      	adds	r3, #2
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	001a      	movs	r2, r3
 80035fe:	2301      	movs	r3, #1
 8003600:	4013      	ands	r3, r2
 8003602:	d001      	beq.n	8003608 <fillTheFirstHalfOfBuffer+0x434>
 8003604:	2228      	movs	r2, #40	; 0x28
 8003606:	e000      	b.n	800360a <fillTheFirstHalfOfBuffer+0x436>
 8003608:	2213      	movs	r2, #19
 800360a:	4b06      	ldr	r3, [pc, #24]	; (8003624 <fillTheFirstHalfOfBuffer+0x450>)
 800360c:	75da      	strb	r2, [r3, #23]

	}

	mg_posInBufferToRead++;
 800360e:	4b06      	ldr	r3, [pc, #24]	; (8003628 <fillTheFirstHalfOfBuffer+0x454>)
 8003610:	881b      	ldrh	r3, [r3, #0]
 8003612:	b29b      	uxth	r3, r3
 8003614:	3301      	adds	r3, #1
 8003616:	b29a      	uxth	r2, r3
 8003618:	4b03      	ldr	r3, [pc, #12]	; (8003628 <fillTheFirstHalfOfBuffer+0x454>)
 800361a:	801a      	strh	r2, [r3, #0]



}
 800361c:	46c0      	nop			; (mov r8, r8)
 800361e:	46bd      	mov	sp, r7
 8003620:	b002      	add	sp, #8
 8003622:	bd80      	pop	{r7, pc}
 8003624:	20000028 	.word	0x20000028
 8003628:	20000076 	.word	0x20000076
 800362c:	20000058 	.word	0x20000058

08003630 <fillTheSecondHalfOfBuffer>:

// wenn komplet übertragen wurde
void fillTheSecondHalfOfBuffer(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0



	if (mg_posInBufferToRead >= c_sizeOfBufferToStripe)
 8003636:	4bcb      	ldr	r3, [pc, #812]	; (8003964 <fillTheSecondHalfOfBuffer+0x334>)
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	b29b      	uxth	r3, r3
 800363c:	220a      	movs	r2, #10
 800363e:	4293      	cmp	r3, r2
 8003640:	d309      	bcc.n	8003656 <fillTheSecondHalfOfBuffer+0x26>
	{
		mg_posInBufferToRead = 0;
 8003642:	4bc8      	ldr	r3, [pc, #800]	; (8003964 <fillTheSecondHalfOfBuffer+0x334>)
 8003644:	2200      	movs	r2, #0
 8003646:	801a      	strh	r2, [r3, #0]
		mg_numOfRepeatsCnt++;
 8003648:	4bc7      	ldr	r3, [pc, #796]	; (8003968 <fillTheSecondHalfOfBuffer+0x338>)
 800364a:	881b      	ldrh	r3, [r3, #0]
 800364c:	b29b      	uxth	r3, r3
 800364e:	3301      	adds	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	4bc5      	ldr	r3, [pc, #788]	; (8003968 <fillTheSecondHalfOfBuffer+0x338>)
 8003654:	801a      	strh	r2, [r3, #0]
	}

	if (mg_flagSequenzEnd)
 8003656:	4bc5      	ldr	r3, [pc, #788]	; (800396c <fillTheSecondHalfOfBuffer+0x33c>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00b      	beq.n	8003678 <fillTheSecondHalfOfBuffer+0x48>
	{
		HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_4);
 8003660:	4bc3      	ldr	r3, [pc, #780]	; (8003970 <fillTheSecondHalfOfBuffer+0x340>)
 8003662:	210c      	movs	r1, #12
 8003664:	0018      	movs	r0, r3
 8003666:	f7fe fc15 	bl	8001e94 <HAL_TIM_PWM_Stop_DMA>
		mg_flagSequenzEnd = false;
 800366a:	4bc0      	ldr	r3, [pc, #768]	; (800396c <fillTheSecondHalfOfBuffer+0x33c>)
 800366c:	2200      	movs	r2, #0
 800366e:	701a      	strb	r2, [r3, #0]
		mg_numOfRepeatsCnt = 0;
 8003670:	4bbd      	ldr	r3, [pc, #756]	; (8003968 <fillTheSecondHalfOfBuffer+0x338>)
 8003672:	2200      	movs	r2, #0
 8003674:	801a      	strh	r2, [r3, #0]
 8003676:	e221      	b.n	8003abc <fillTheSecondHalfOfBuffer+0x48c>
	}
	else if (mg_numOfRepeatsCnt >= mg_numOfRepeats)
 8003678:	4bbb      	ldr	r3, [pc, #748]	; (8003968 <fillTheSecondHalfOfBuffer+0x338>)
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	b29a      	uxth	r2, r3
 800367e:	4bbd      	ldr	r3, [pc, #756]	; (8003974 <fillTheSecondHalfOfBuffer+0x344>)
 8003680:	881b      	ldrh	r3, [r3, #0]
 8003682:	b29b      	uxth	r3, r3
 8003684:	429a      	cmp	r2, r3
 8003686:	d315      	bcc.n	80036b4 <fillTheSecondHalfOfBuffer+0x84>
	{
		for (uint8_t i = 0; i < 23; ++i)
 8003688:	1dfb      	adds	r3, r7, #7
 800368a:	2200      	movs	r2, #0
 800368c:	701a      	strb	r2, [r3, #0]
 800368e:	e009      	b.n	80036a4 <fillTheSecondHalfOfBuffer+0x74>
		{
			mg_dma2PwmBitBuffer[i] = 0;
 8003690:	1dfb      	adds	r3, r7, #7
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	4ab8      	ldr	r2, [pc, #736]	; (8003978 <fillTheSecondHalfOfBuffer+0x348>)
 8003696:	2100      	movs	r1, #0
 8003698:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 23; ++i)
 800369a:	1dfb      	adds	r3, r7, #7
 800369c:	1dfa      	adds	r2, r7, #7
 800369e:	7812      	ldrb	r2, [r2, #0]
 80036a0:	3201      	adds	r2, #1
 80036a2:	701a      	strb	r2, [r3, #0]
 80036a4:	1dfb      	adds	r3, r7, #7
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b16      	cmp	r3, #22
 80036aa:	d9f1      	bls.n	8003690 <fillTheSecondHalfOfBuffer+0x60>
		}
		mg_flagSequenzEnd = true;
 80036ac:	4baf      	ldr	r3, [pc, #700]	; (800396c <fillTheSecondHalfOfBuffer+0x33c>)
 80036ae:	2201      	movs	r2, #1
 80036b0:	701a      	strb	r2, [r3, #0]
 80036b2:	e203      	b.n	8003abc <fillTheSecondHalfOfBuffer+0x48c>

	}
	else
	{
		/* Green */
		mg_dma2PwmBitBuffer[24] = (Led[mg_posInBufferToRead].Green & 0x80) ? c_PulseLogic1 : c_PulseLogic0;
 80036b4:	4bab      	ldr	r3, [pc, #684]	; (8003964 <fillTheSecondHalfOfBuffer+0x334>)
 80036b6:	881b      	ldrh	r3, [r3, #0]
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	0019      	movs	r1, r3
 80036bc:	4aaf      	ldr	r2, [pc, #700]	; (800397c <fillTheSecondHalfOfBuffer+0x34c>)
 80036be:	000b      	movs	r3, r1
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	185b      	adds	r3, r3, r1
 80036c4:	5c9b      	ldrb	r3, [r3, r2]
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	b25b      	sxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	da01      	bge.n	80036d2 <fillTheSecondHalfOfBuffer+0xa2>
 80036ce:	2228      	movs	r2, #40	; 0x28
 80036d0:	e000      	b.n	80036d4 <fillTheSecondHalfOfBuffer+0xa4>
 80036d2:	2213      	movs	r2, #19
 80036d4:	4ba8      	ldr	r3, [pc, #672]	; (8003978 <fillTheSecondHalfOfBuffer+0x348>)
 80036d6:	761a      	strb	r2, [r3, #24]
		mg_dma2PwmBitBuffer[25] = (Led[mg_posInBufferToRead].Green & 0x40) ? c_PulseLogic1 : c_PulseLogic0;
 80036d8:	4ba2      	ldr	r3, [pc, #648]	; (8003964 <fillTheSecondHalfOfBuffer+0x334>)
 80036da:	881b      	ldrh	r3, [r3, #0]
 80036dc:	b29b      	uxth	r3, r3
 80036de:	0019      	movs	r1, r3
 80036e0:	4aa6      	ldr	r2, [pc, #664]	; (800397c <fillTheSecondHalfOfBuffer+0x34c>)
 80036e2:	000b      	movs	r3, r1
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	185b      	adds	r3, r3, r1
 80036e8:	5c9b      	ldrb	r3, [r3, r2]
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	001a      	movs	r2, r3
 80036ee:	2340      	movs	r3, #64	; 0x40
 80036f0:	4013      	ands	r3, r2
 80036f2:	d001      	beq.n	80036f8 <fillTheSecondHalfOfBuffer+0xc8>
 80036f4:	2228      	movs	r2, #40	; 0x28
 80036f6:	e000      	b.n	80036fa <fillTheSecondHalfOfBuffer+0xca>
 80036f8:	2213      	movs	r2, #19
 80036fa:	4b9f      	ldr	r3, [pc, #636]	; (8003978 <fillTheSecondHalfOfBuffer+0x348>)
 80036fc:	765a      	strb	r2, [r3, #25]
		mg_dma2PwmBitBuffer[26] = (Led[mg_posInBufferToRead].Green & 0x20) ? c_PulseLogic1 : c_PulseLogic0;
 80036fe:	4b99      	ldr	r3, [pc, #612]	; (8003964 <fillTheSecondHalfOfBuffer+0x334>)
 8003700:	881b      	ldrh	r3, [r3, #0]
 8003702:	b29b      	uxth	r3, r3
 8003704:	0019      	movs	r1, r3
 8003706:	4a9d      	ldr	r2, [pc, #628]	; (800397c <fillTheSecondHalfOfBuffer+0x34c>)
 8003708:	000b      	movs	r3, r1
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	185b      	adds	r3, r3, r1
 800370e:	5c9b      	ldrb	r3, [r3, r2]
 8003710:	b2db      	uxtb	r3, r3
 8003712:	001a      	movs	r2, r3
 8003714:	2320      	movs	r3, #32
 8003716:	4013      	ands	r3, r2
 8003718:	d001      	beq.n	800371e <fillTheSecondHalfOfBuffer+0xee>
 800371a:	2228      	movs	r2, #40	; 0x28
 800371c:	e000      	b.n	8003720 <fillTheSecondHalfOfBuffer+0xf0>
 800371e:	2213      	movs	r2, #19
 8003720:	4b95      	ldr	r3, [pc, #596]	; (8003978 <fillTheSecondHalfOfBuffer+0x348>)
 8003722:	769a      	strb	r2, [r3, #26]
		mg_dma2PwmBitBuffer[27] = (Led[mg_posInBufferToRead].Green & 0x10) ? c_PulseLogic1 : c_PulseLogic0;
 8003724:	4b8f      	ldr	r3, [pc, #572]	; (8003964 <fillTheSecondHalfOfBuffer+0x334>)
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	b29b      	uxth	r3, r3
 800372a:	0019      	movs	r1, r3
 800372c:	4a93      	ldr	r2, [pc, #588]	; (800397c <fillTheSecondHalfOfBuffer+0x34c>)
 800372e:	000b      	movs	r3, r1
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	185b      	adds	r3, r3, r1
 8003734:	5c9b      	ldrb	r3, [r3, r2]
 8003736:	b2db      	uxtb	r3, r3
 8003738:	001a      	movs	r2, r3
 800373a:	2310      	movs	r3, #16
 800373c:	4013      	ands	r3, r2
 800373e:	d001      	beq.n	8003744 <fillTheSecondHalfOfBuffer+0x114>
 8003740:	2228      	movs	r2, #40	; 0x28
 8003742:	e000      	b.n	8003746 <fillTheSecondHalfOfBuffer+0x116>
 8003744:	2213      	movs	r2, #19
 8003746:	4b8c      	ldr	r3, [pc, #560]	; (8003978 <fillTheSecondHalfOfBuffer+0x348>)
 8003748:	76da      	strb	r2, [r3, #27]
		mg_dma2PwmBitBuffer[28] = (Led[mg_posInBufferToRead].Green & 0x08) ? c_PulseLogic1 : c_PulseLogic0;
 800374a:	4b86      	ldr	r3, [pc, #536]	; (8003964 <fillTheSecondHalfOfBuffer+0x334>)
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	b29b      	uxth	r3, r3
 8003750:	0019      	movs	r1, r3
 8003752:	4a8a      	ldr	r2, [pc, #552]	; (800397c <fillTheSecondHalfOfBuffer+0x34c>)
 8003754:	000b      	movs	r3, r1
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	185b      	adds	r3, r3, r1
 800375a:	5c9b      	ldrb	r3, [r3, r2]
 800375c:	b2db      	uxtb	r3, r3
 800375e:	001a      	movs	r2, r3
 8003760:	2308      	movs	r3, #8
 8003762:	4013      	ands	r3, r2
 8003764:	d001      	beq.n	800376a <fillTheSecondHalfOfBuffer+0x13a>
 8003766:	2228      	movs	r2, #40	; 0x28
 8003768:	e000      	b.n	800376c <fillTheSecondHalfOfBuffer+0x13c>
 800376a:	2213      	movs	r2, #19
 800376c:	4b82      	ldr	r3, [pc, #520]	; (8003978 <fillTheSecondHalfOfBuffer+0x348>)
 800376e:	771a      	strb	r2, [r3, #28]
		mg_dma2PwmBitBuffer[29] = (Led[mg_posInBufferToRead].Green & 0x04) ? c_PulseLogic1 : c_PulseLogic0;
 8003770:	4b7c      	ldr	r3, [pc, #496]	; (8003964 <fillTheSecondHalfOfBuffer+0x334>)
 8003772:	881b      	ldrh	r3, [r3, #0]
 8003774:	b29b      	uxth	r3, r3
 8003776:	0019      	movs	r1, r3
 8003778:	4a80      	ldr	r2, [pc, #512]	; (800397c <fillTheSecondHalfOfBuffer+0x34c>)
 800377a:	000b      	movs	r3, r1
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	185b      	adds	r3, r3, r1
 8003780:	5c9b      	ldrb	r3, [r3, r2]
 8003782:	b2db      	uxtb	r3, r3
 8003784:	001a      	movs	r2, r3
 8003786:	2304      	movs	r3, #4
 8003788:	4013      	ands	r3, r2
 800378a:	d001      	beq.n	8003790 <fillTheSecondHalfOfBuffer+0x160>
 800378c:	2228      	movs	r2, #40	; 0x28
 800378e:	e000      	b.n	8003792 <fillTheSecondHalfOfBuffer+0x162>
 8003790:	2213      	movs	r2, #19
 8003792:	4b79      	ldr	r3, [pc, #484]	; (8003978 <fillTheSecondHalfOfBuffer+0x348>)
 8003794:	775a      	strb	r2, [r3, #29]
		mg_dma2PwmBitBuffer[30] = (Led[mg_posInBufferToRead].Green & 0x02) ? c_PulseLogic1 : c_PulseLogic0;
 8003796:	4b73      	ldr	r3, [pc, #460]	; (8003964 <fillTheSecondHalfOfBuffer+0x334>)
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	b29b      	uxth	r3, r3
 800379c:	0019      	movs	r1, r3
 800379e:	4a77      	ldr	r2, [pc, #476]	; (800397c <fillTheSecondHalfOfBuffer+0x34c>)
 80037a0:	000b      	movs	r3, r1
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	185b      	adds	r3, r3, r1
 80037a6:	5c9b      	ldrb	r3, [r3, r2]
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	001a      	movs	r2, r3
 80037ac:	2302      	movs	r3, #2
 80037ae:	4013      	ands	r3, r2
 80037b0:	d001      	beq.n	80037b6 <fillTheSecondHalfOfBuffer+0x186>
 80037b2:	2228      	movs	r2, #40	; 0x28
 80037b4:	e000      	b.n	80037b8 <fillTheSecondHalfOfBuffer+0x188>
 80037b6:	2213      	movs	r2, #19
 80037b8:	4b6f      	ldr	r3, [pc, #444]	; (8003978 <fillTheSecondHalfOfBuffer+0x348>)
 80037ba:	779a      	strb	r2, [r3, #30]
		mg_dma2PwmBitBuffer[31] = (Led[mg_posInBufferToRead].Green & 0x01) ? c_PulseLogic1 : c_PulseLogic0;
 80037bc:	4b69      	ldr	r3, [pc, #420]	; (8003964 <fillTheSecondHalfOfBuffer+0x334>)
 80037be:	881b      	ldrh	r3, [r3, #0]
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	0019      	movs	r1, r3
 80037c4:	4a6d      	ldr	r2, [pc, #436]	; (800397c <fillTheSecondHalfOfBuffer+0x34c>)
 80037c6:	000b      	movs	r3, r1
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	185b      	adds	r3, r3, r1
 80037cc:	5c9b      	ldrb	r3, [r3, r2]
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	001a      	movs	r2, r3
 80037d2:	2301      	movs	r3, #1
 80037d4:	4013      	ands	r3, r2
 80037d6:	d001      	beq.n	80037dc <fillTheSecondHalfOfBuffer+0x1ac>
 80037d8:	2228      	movs	r2, #40	; 0x28
 80037da:	e000      	b.n	80037de <fillTheSecondHalfOfBuffer+0x1ae>
 80037dc:	2213      	movs	r2, #19
 80037de:	4b66      	ldr	r3, [pc, #408]	; (8003978 <fillTheSecondHalfOfBuffer+0x348>)
 80037e0:	77da      	strb	r2, [r3, #31]
		/* Red */
		mg_dma2PwmBitBuffer[32] = (Led[mg_posInBufferToRead].Red & 0x80) ? c_PulseLogic1 : c_PulseLogic0;
 80037e2:	4b60      	ldr	r3, [pc, #384]	; (8003964 <fillTheSecondHalfOfBuffer+0x334>)
 80037e4:	881b      	ldrh	r3, [r3, #0]
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	0019      	movs	r1, r3
 80037ea:	4a64      	ldr	r2, [pc, #400]	; (800397c <fillTheSecondHalfOfBuffer+0x34c>)
 80037ec:	000b      	movs	r3, r1
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	185b      	adds	r3, r3, r1
 80037f2:	18d3      	adds	r3, r2, r3
 80037f4:	3301      	adds	r3, #1
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	b25b      	sxtb	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	da01      	bge.n	8003804 <fillTheSecondHalfOfBuffer+0x1d4>
 8003800:	2128      	movs	r1, #40	; 0x28
 8003802:	e000      	b.n	8003806 <fillTheSecondHalfOfBuffer+0x1d6>
 8003804:	2113      	movs	r1, #19
 8003806:	4b5c      	ldr	r3, [pc, #368]	; (8003978 <fillTheSecondHalfOfBuffer+0x348>)
 8003808:	2220      	movs	r2, #32
 800380a:	5499      	strb	r1, [r3, r2]
		mg_dma2PwmBitBuffer[33] = (Led[mg_posInBufferToRead].Red & 0x40) ? c_PulseLogic1 : c_PulseLogic0;
 800380c:	4b55      	ldr	r3, [pc, #340]	; (8003964 <fillTheSecondHalfOfBuffer+0x334>)
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	b29b      	uxth	r3, r3
 8003812:	0019      	movs	r1, r3
 8003814:	4a59      	ldr	r2, [pc, #356]	; (800397c <fillTheSecondHalfOfBuffer+0x34c>)
 8003816:	000b      	movs	r3, r1
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	185b      	adds	r3, r3, r1
 800381c:	18d3      	adds	r3, r2, r3
 800381e:	3301      	adds	r3, #1
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	b2db      	uxtb	r3, r3
 8003824:	001a      	movs	r2, r3
 8003826:	2340      	movs	r3, #64	; 0x40
 8003828:	4013      	ands	r3, r2
 800382a:	d001      	beq.n	8003830 <fillTheSecondHalfOfBuffer+0x200>
 800382c:	2128      	movs	r1, #40	; 0x28
 800382e:	e000      	b.n	8003832 <fillTheSecondHalfOfBuffer+0x202>
 8003830:	2113      	movs	r1, #19
 8003832:	4b51      	ldr	r3, [pc, #324]	; (8003978 <fillTheSecondHalfOfBuffer+0x348>)
 8003834:	2221      	movs	r2, #33	; 0x21
 8003836:	5499      	strb	r1, [r3, r2]
		mg_dma2PwmBitBuffer[34] = (Led[mg_posInBufferToRead].Red & 0x20) ? c_PulseLogic1 : c_PulseLogic0;
 8003838:	4b4a      	ldr	r3, [pc, #296]	; (8003964 <fillTheSecondHalfOfBuffer+0x334>)
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	b29b      	uxth	r3, r3
 800383e:	0019      	movs	r1, r3
 8003840:	4a4e      	ldr	r2, [pc, #312]	; (800397c <fillTheSecondHalfOfBuffer+0x34c>)
 8003842:	000b      	movs	r3, r1
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	185b      	adds	r3, r3, r1
 8003848:	18d3      	adds	r3, r2, r3
 800384a:	3301      	adds	r3, #1
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	b2db      	uxtb	r3, r3
 8003850:	001a      	movs	r2, r3
 8003852:	2320      	movs	r3, #32
 8003854:	4013      	ands	r3, r2
 8003856:	d001      	beq.n	800385c <fillTheSecondHalfOfBuffer+0x22c>
 8003858:	2128      	movs	r1, #40	; 0x28
 800385a:	e000      	b.n	800385e <fillTheSecondHalfOfBuffer+0x22e>
 800385c:	2113      	movs	r1, #19
 800385e:	4b46      	ldr	r3, [pc, #280]	; (8003978 <fillTheSecondHalfOfBuffer+0x348>)
 8003860:	2222      	movs	r2, #34	; 0x22
 8003862:	5499      	strb	r1, [r3, r2]
		mg_dma2PwmBitBuffer[35] = (Led[mg_posInBufferToRead].Red & 0x10) ? c_PulseLogic1 : c_PulseLogic0;
 8003864:	4b3f      	ldr	r3, [pc, #252]	; (8003964 <fillTheSecondHalfOfBuffer+0x334>)
 8003866:	881b      	ldrh	r3, [r3, #0]
 8003868:	b29b      	uxth	r3, r3
 800386a:	0019      	movs	r1, r3
 800386c:	4a43      	ldr	r2, [pc, #268]	; (800397c <fillTheSecondHalfOfBuffer+0x34c>)
 800386e:	000b      	movs	r3, r1
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	185b      	adds	r3, r3, r1
 8003874:	18d3      	adds	r3, r2, r3
 8003876:	3301      	adds	r3, #1
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	b2db      	uxtb	r3, r3
 800387c:	001a      	movs	r2, r3
 800387e:	2310      	movs	r3, #16
 8003880:	4013      	ands	r3, r2
 8003882:	d001      	beq.n	8003888 <fillTheSecondHalfOfBuffer+0x258>
 8003884:	2128      	movs	r1, #40	; 0x28
 8003886:	e000      	b.n	800388a <fillTheSecondHalfOfBuffer+0x25a>
 8003888:	2113      	movs	r1, #19
 800388a:	4b3b      	ldr	r3, [pc, #236]	; (8003978 <fillTheSecondHalfOfBuffer+0x348>)
 800388c:	2223      	movs	r2, #35	; 0x23
 800388e:	5499      	strb	r1, [r3, r2]
		mg_dma2PwmBitBuffer[36] = (Led[mg_posInBufferToRead].Red & 0x08) ? c_PulseLogic1 : c_PulseLogic0;
 8003890:	4b34      	ldr	r3, [pc, #208]	; (8003964 <fillTheSecondHalfOfBuffer+0x334>)
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	b29b      	uxth	r3, r3
 8003896:	0019      	movs	r1, r3
 8003898:	4a38      	ldr	r2, [pc, #224]	; (800397c <fillTheSecondHalfOfBuffer+0x34c>)
 800389a:	000b      	movs	r3, r1
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	185b      	adds	r3, r3, r1
 80038a0:	18d3      	adds	r3, r2, r3
 80038a2:	3301      	adds	r3, #1
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	001a      	movs	r2, r3
 80038aa:	2308      	movs	r3, #8
 80038ac:	4013      	ands	r3, r2
 80038ae:	d001      	beq.n	80038b4 <fillTheSecondHalfOfBuffer+0x284>
 80038b0:	2128      	movs	r1, #40	; 0x28
 80038b2:	e000      	b.n	80038b6 <fillTheSecondHalfOfBuffer+0x286>
 80038b4:	2113      	movs	r1, #19
 80038b6:	4b30      	ldr	r3, [pc, #192]	; (8003978 <fillTheSecondHalfOfBuffer+0x348>)
 80038b8:	2224      	movs	r2, #36	; 0x24
 80038ba:	5499      	strb	r1, [r3, r2]
		mg_dma2PwmBitBuffer[37] = (Led[mg_posInBufferToRead].Red & 0x04) ? c_PulseLogic1 : c_PulseLogic0;
 80038bc:	4b29      	ldr	r3, [pc, #164]	; (8003964 <fillTheSecondHalfOfBuffer+0x334>)
 80038be:	881b      	ldrh	r3, [r3, #0]
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	0019      	movs	r1, r3
 80038c4:	4a2d      	ldr	r2, [pc, #180]	; (800397c <fillTheSecondHalfOfBuffer+0x34c>)
 80038c6:	000b      	movs	r3, r1
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	185b      	adds	r3, r3, r1
 80038cc:	18d3      	adds	r3, r2, r3
 80038ce:	3301      	adds	r3, #1
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	001a      	movs	r2, r3
 80038d6:	2304      	movs	r3, #4
 80038d8:	4013      	ands	r3, r2
 80038da:	d001      	beq.n	80038e0 <fillTheSecondHalfOfBuffer+0x2b0>
 80038dc:	2128      	movs	r1, #40	; 0x28
 80038de:	e000      	b.n	80038e2 <fillTheSecondHalfOfBuffer+0x2b2>
 80038e0:	2113      	movs	r1, #19
 80038e2:	4b25      	ldr	r3, [pc, #148]	; (8003978 <fillTheSecondHalfOfBuffer+0x348>)
 80038e4:	2225      	movs	r2, #37	; 0x25
 80038e6:	5499      	strb	r1, [r3, r2]
		mg_dma2PwmBitBuffer[38] = (Led[mg_posInBufferToRead].Red & 0x02) ? c_PulseLogic1 : c_PulseLogic0;
 80038e8:	4b1e      	ldr	r3, [pc, #120]	; (8003964 <fillTheSecondHalfOfBuffer+0x334>)
 80038ea:	881b      	ldrh	r3, [r3, #0]
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	0019      	movs	r1, r3
 80038f0:	4a22      	ldr	r2, [pc, #136]	; (800397c <fillTheSecondHalfOfBuffer+0x34c>)
 80038f2:	000b      	movs	r3, r1
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	185b      	adds	r3, r3, r1
 80038f8:	18d3      	adds	r3, r2, r3
 80038fa:	3301      	adds	r3, #1
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	001a      	movs	r2, r3
 8003902:	2302      	movs	r3, #2
 8003904:	4013      	ands	r3, r2
 8003906:	d001      	beq.n	800390c <fillTheSecondHalfOfBuffer+0x2dc>
 8003908:	2128      	movs	r1, #40	; 0x28
 800390a:	e000      	b.n	800390e <fillTheSecondHalfOfBuffer+0x2de>
 800390c:	2113      	movs	r1, #19
 800390e:	4b1a      	ldr	r3, [pc, #104]	; (8003978 <fillTheSecondHalfOfBuffer+0x348>)
 8003910:	2226      	movs	r2, #38	; 0x26
 8003912:	5499      	strb	r1, [r3, r2]
		mg_dma2PwmBitBuffer[39] = (Led[mg_posInBufferToRead].Red & 0x01) ? c_PulseLogic1 : c_PulseLogic0;
 8003914:	4b13      	ldr	r3, [pc, #76]	; (8003964 <fillTheSecondHalfOfBuffer+0x334>)
 8003916:	881b      	ldrh	r3, [r3, #0]
 8003918:	b29b      	uxth	r3, r3
 800391a:	0019      	movs	r1, r3
 800391c:	4a17      	ldr	r2, [pc, #92]	; (800397c <fillTheSecondHalfOfBuffer+0x34c>)
 800391e:	000b      	movs	r3, r1
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	185b      	adds	r3, r3, r1
 8003924:	18d3      	adds	r3, r2, r3
 8003926:	3301      	adds	r3, #1
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	b2db      	uxtb	r3, r3
 800392c:	001a      	movs	r2, r3
 800392e:	2301      	movs	r3, #1
 8003930:	4013      	ands	r3, r2
 8003932:	d001      	beq.n	8003938 <fillTheSecondHalfOfBuffer+0x308>
 8003934:	2128      	movs	r1, #40	; 0x28
 8003936:	e000      	b.n	800393a <fillTheSecondHalfOfBuffer+0x30a>
 8003938:	2113      	movs	r1, #19
 800393a:	4b0f      	ldr	r3, [pc, #60]	; (8003978 <fillTheSecondHalfOfBuffer+0x348>)
 800393c:	2227      	movs	r2, #39	; 0x27
 800393e:	5499      	strb	r1, [r3, r2]
		/* Blue */
		mg_dma2PwmBitBuffer[40] = (Led[mg_posInBufferToRead].Blue & 0x80) ? c_PulseLogic1 : c_PulseLogic0;
 8003940:	4b08      	ldr	r3, [pc, #32]	; (8003964 <fillTheSecondHalfOfBuffer+0x334>)
 8003942:	881b      	ldrh	r3, [r3, #0]
 8003944:	b29b      	uxth	r3, r3
 8003946:	0019      	movs	r1, r3
 8003948:	4a0c      	ldr	r2, [pc, #48]	; (800397c <fillTheSecondHalfOfBuffer+0x34c>)
 800394a:	000b      	movs	r3, r1
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	185b      	adds	r3, r3, r1
 8003950:	18d3      	adds	r3, r2, r3
 8003952:	3302      	adds	r3, #2
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	b2db      	uxtb	r3, r3
 8003958:	b25b      	sxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	da10      	bge.n	8003980 <fillTheSecondHalfOfBuffer+0x350>
 800395e:	2128      	movs	r1, #40	; 0x28
 8003960:	e00f      	b.n	8003982 <fillTheSecondHalfOfBuffer+0x352>
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	20000076 	.word	0x20000076
 8003968:	20000078 	.word	0x20000078
 800396c:	2000007a 	.word	0x2000007a
 8003970:	2000007c 	.word	0x2000007c
 8003974:	2000000a 	.word	0x2000000a
 8003978:	20000028 	.word	0x20000028
 800397c:	20000058 	.word	0x20000058
 8003980:	2113      	movs	r1, #19
 8003982:	4b54      	ldr	r3, [pc, #336]	; (8003ad4 <fillTheSecondHalfOfBuffer+0x4a4>)
 8003984:	2228      	movs	r2, #40	; 0x28
 8003986:	5499      	strb	r1, [r3, r2]
		mg_dma2PwmBitBuffer[41] = (Led[mg_posInBufferToRead].Blue & 0x40) ? c_PulseLogic1 : c_PulseLogic0;
 8003988:	4b53      	ldr	r3, [pc, #332]	; (8003ad8 <fillTheSecondHalfOfBuffer+0x4a8>)
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	b29b      	uxth	r3, r3
 800398e:	0019      	movs	r1, r3
 8003990:	4a52      	ldr	r2, [pc, #328]	; (8003adc <fillTheSecondHalfOfBuffer+0x4ac>)
 8003992:	000b      	movs	r3, r1
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	185b      	adds	r3, r3, r1
 8003998:	18d3      	adds	r3, r2, r3
 800399a:	3302      	adds	r3, #2
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	001a      	movs	r2, r3
 80039a2:	2340      	movs	r3, #64	; 0x40
 80039a4:	4013      	ands	r3, r2
 80039a6:	d001      	beq.n	80039ac <fillTheSecondHalfOfBuffer+0x37c>
 80039a8:	2128      	movs	r1, #40	; 0x28
 80039aa:	e000      	b.n	80039ae <fillTheSecondHalfOfBuffer+0x37e>
 80039ac:	2113      	movs	r1, #19
 80039ae:	4b49      	ldr	r3, [pc, #292]	; (8003ad4 <fillTheSecondHalfOfBuffer+0x4a4>)
 80039b0:	2229      	movs	r2, #41	; 0x29
 80039b2:	5499      	strb	r1, [r3, r2]
		mg_dma2PwmBitBuffer[42] = (Led[mg_posInBufferToRead].Blue & 0x20) ? c_PulseLogic1 : c_PulseLogic0;
 80039b4:	4b48      	ldr	r3, [pc, #288]	; (8003ad8 <fillTheSecondHalfOfBuffer+0x4a8>)
 80039b6:	881b      	ldrh	r3, [r3, #0]
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	0019      	movs	r1, r3
 80039bc:	4a47      	ldr	r2, [pc, #284]	; (8003adc <fillTheSecondHalfOfBuffer+0x4ac>)
 80039be:	000b      	movs	r3, r1
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	185b      	adds	r3, r3, r1
 80039c4:	18d3      	adds	r3, r2, r3
 80039c6:	3302      	adds	r3, #2
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	001a      	movs	r2, r3
 80039ce:	2320      	movs	r3, #32
 80039d0:	4013      	ands	r3, r2
 80039d2:	d001      	beq.n	80039d8 <fillTheSecondHalfOfBuffer+0x3a8>
 80039d4:	2128      	movs	r1, #40	; 0x28
 80039d6:	e000      	b.n	80039da <fillTheSecondHalfOfBuffer+0x3aa>
 80039d8:	2113      	movs	r1, #19
 80039da:	4b3e      	ldr	r3, [pc, #248]	; (8003ad4 <fillTheSecondHalfOfBuffer+0x4a4>)
 80039dc:	222a      	movs	r2, #42	; 0x2a
 80039de:	5499      	strb	r1, [r3, r2]
		mg_dma2PwmBitBuffer[43] = (Led[mg_posInBufferToRead].Blue & 0x10) ? c_PulseLogic1 : c_PulseLogic0;
 80039e0:	4b3d      	ldr	r3, [pc, #244]	; (8003ad8 <fillTheSecondHalfOfBuffer+0x4a8>)
 80039e2:	881b      	ldrh	r3, [r3, #0]
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	0019      	movs	r1, r3
 80039e8:	4a3c      	ldr	r2, [pc, #240]	; (8003adc <fillTheSecondHalfOfBuffer+0x4ac>)
 80039ea:	000b      	movs	r3, r1
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	185b      	adds	r3, r3, r1
 80039f0:	18d3      	adds	r3, r2, r3
 80039f2:	3302      	adds	r3, #2
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	001a      	movs	r2, r3
 80039fa:	2310      	movs	r3, #16
 80039fc:	4013      	ands	r3, r2
 80039fe:	d001      	beq.n	8003a04 <fillTheSecondHalfOfBuffer+0x3d4>
 8003a00:	2128      	movs	r1, #40	; 0x28
 8003a02:	e000      	b.n	8003a06 <fillTheSecondHalfOfBuffer+0x3d6>
 8003a04:	2113      	movs	r1, #19
 8003a06:	4b33      	ldr	r3, [pc, #204]	; (8003ad4 <fillTheSecondHalfOfBuffer+0x4a4>)
 8003a08:	222b      	movs	r2, #43	; 0x2b
 8003a0a:	5499      	strb	r1, [r3, r2]
		mg_dma2PwmBitBuffer[44] = (Led[mg_posInBufferToRead].Blue & 0x08) ? c_PulseLogic1 : c_PulseLogic0;
 8003a0c:	4b32      	ldr	r3, [pc, #200]	; (8003ad8 <fillTheSecondHalfOfBuffer+0x4a8>)
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	0019      	movs	r1, r3
 8003a14:	4a31      	ldr	r2, [pc, #196]	; (8003adc <fillTheSecondHalfOfBuffer+0x4ac>)
 8003a16:	000b      	movs	r3, r1
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	185b      	adds	r3, r3, r1
 8003a1c:	18d3      	adds	r3, r2, r3
 8003a1e:	3302      	adds	r3, #2
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	001a      	movs	r2, r3
 8003a26:	2308      	movs	r3, #8
 8003a28:	4013      	ands	r3, r2
 8003a2a:	d001      	beq.n	8003a30 <fillTheSecondHalfOfBuffer+0x400>
 8003a2c:	2128      	movs	r1, #40	; 0x28
 8003a2e:	e000      	b.n	8003a32 <fillTheSecondHalfOfBuffer+0x402>
 8003a30:	2113      	movs	r1, #19
 8003a32:	4b28      	ldr	r3, [pc, #160]	; (8003ad4 <fillTheSecondHalfOfBuffer+0x4a4>)
 8003a34:	222c      	movs	r2, #44	; 0x2c
 8003a36:	5499      	strb	r1, [r3, r2]
		mg_dma2PwmBitBuffer[45] = (Led[mg_posInBufferToRead].Blue & 0x04) ? c_PulseLogic1 : c_PulseLogic0;
 8003a38:	4b27      	ldr	r3, [pc, #156]	; (8003ad8 <fillTheSecondHalfOfBuffer+0x4a8>)
 8003a3a:	881b      	ldrh	r3, [r3, #0]
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	0019      	movs	r1, r3
 8003a40:	4a26      	ldr	r2, [pc, #152]	; (8003adc <fillTheSecondHalfOfBuffer+0x4ac>)
 8003a42:	000b      	movs	r3, r1
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	185b      	adds	r3, r3, r1
 8003a48:	18d3      	adds	r3, r2, r3
 8003a4a:	3302      	adds	r3, #2
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	001a      	movs	r2, r3
 8003a52:	2304      	movs	r3, #4
 8003a54:	4013      	ands	r3, r2
 8003a56:	d001      	beq.n	8003a5c <fillTheSecondHalfOfBuffer+0x42c>
 8003a58:	2128      	movs	r1, #40	; 0x28
 8003a5a:	e000      	b.n	8003a5e <fillTheSecondHalfOfBuffer+0x42e>
 8003a5c:	2113      	movs	r1, #19
 8003a5e:	4b1d      	ldr	r3, [pc, #116]	; (8003ad4 <fillTheSecondHalfOfBuffer+0x4a4>)
 8003a60:	222d      	movs	r2, #45	; 0x2d
 8003a62:	5499      	strb	r1, [r3, r2]
		mg_dma2PwmBitBuffer[46] = (Led[mg_posInBufferToRead].Blue & 0x02) ? c_PulseLogic1 : c_PulseLogic0;
 8003a64:	4b1c      	ldr	r3, [pc, #112]	; (8003ad8 <fillTheSecondHalfOfBuffer+0x4a8>)
 8003a66:	881b      	ldrh	r3, [r3, #0]
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	0019      	movs	r1, r3
 8003a6c:	4a1b      	ldr	r2, [pc, #108]	; (8003adc <fillTheSecondHalfOfBuffer+0x4ac>)
 8003a6e:	000b      	movs	r3, r1
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	185b      	adds	r3, r3, r1
 8003a74:	18d3      	adds	r3, r2, r3
 8003a76:	3302      	adds	r3, #2
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	001a      	movs	r2, r3
 8003a7e:	2302      	movs	r3, #2
 8003a80:	4013      	ands	r3, r2
 8003a82:	d001      	beq.n	8003a88 <fillTheSecondHalfOfBuffer+0x458>
 8003a84:	2128      	movs	r1, #40	; 0x28
 8003a86:	e000      	b.n	8003a8a <fillTheSecondHalfOfBuffer+0x45a>
 8003a88:	2113      	movs	r1, #19
 8003a8a:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <fillTheSecondHalfOfBuffer+0x4a4>)
 8003a8c:	222e      	movs	r2, #46	; 0x2e
 8003a8e:	5499      	strb	r1, [r3, r2]
		mg_dma2PwmBitBuffer[47] = (Led[mg_posInBufferToRead].Blue & 0x01) ? c_PulseLogic1 : c_PulseLogic0;
 8003a90:	4b11      	ldr	r3, [pc, #68]	; (8003ad8 <fillTheSecondHalfOfBuffer+0x4a8>)
 8003a92:	881b      	ldrh	r3, [r3, #0]
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	0019      	movs	r1, r3
 8003a98:	4a10      	ldr	r2, [pc, #64]	; (8003adc <fillTheSecondHalfOfBuffer+0x4ac>)
 8003a9a:	000b      	movs	r3, r1
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	185b      	adds	r3, r3, r1
 8003aa0:	18d3      	adds	r3, r2, r3
 8003aa2:	3302      	adds	r3, #2
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	001a      	movs	r2, r3
 8003aaa:	2301      	movs	r3, #1
 8003aac:	4013      	ands	r3, r2
 8003aae:	d001      	beq.n	8003ab4 <fillTheSecondHalfOfBuffer+0x484>
 8003ab0:	2128      	movs	r1, #40	; 0x28
 8003ab2:	e000      	b.n	8003ab6 <fillTheSecondHalfOfBuffer+0x486>
 8003ab4:	2113      	movs	r1, #19
 8003ab6:	4b07      	ldr	r3, [pc, #28]	; (8003ad4 <fillTheSecondHalfOfBuffer+0x4a4>)
 8003ab8:	222f      	movs	r2, #47	; 0x2f
 8003aba:	5499      	strb	r1, [r3, r2]

	}

	mg_posInBufferToRead++;
 8003abc:	4b06      	ldr	r3, [pc, #24]	; (8003ad8 <fillTheSecondHalfOfBuffer+0x4a8>)
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	4b04      	ldr	r3, [pc, #16]	; (8003ad8 <fillTheSecondHalfOfBuffer+0x4a8>)
 8003ac8:	801a      	strh	r2, [r3, #0]
}
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	46bd      	mov	sp, r7
 8003ace:	b002      	add	sp, #8
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	46c0      	nop			; (mov r8, r8)
 8003ad4:	20000028 	.word	0x20000028
 8003ad8:	20000076 	.word	0x20000076
 8003adc:	20000058 	.word	0x20000058

08003ae0 <__libc_init_array>:
 8003ae0:	b570      	push	{r4, r5, r6, lr}
 8003ae2:	2600      	movs	r6, #0
 8003ae4:	4d0c      	ldr	r5, [pc, #48]	; (8003b18 <__libc_init_array+0x38>)
 8003ae6:	4c0d      	ldr	r4, [pc, #52]	; (8003b1c <__libc_init_array+0x3c>)
 8003ae8:	1b64      	subs	r4, r4, r5
 8003aea:	10a4      	asrs	r4, r4, #2
 8003aec:	42a6      	cmp	r6, r4
 8003aee:	d109      	bne.n	8003b04 <__libc_init_array+0x24>
 8003af0:	2600      	movs	r6, #0
 8003af2:	f000 f821 	bl	8003b38 <_init>
 8003af6:	4d0a      	ldr	r5, [pc, #40]	; (8003b20 <__libc_init_array+0x40>)
 8003af8:	4c0a      	ldr	r4, [pc, #40]	; (8003b24 <__libc_init_array+0x44>)
 8003afa:	1b64      	subs	r4, r4, r5
 8003afc:	10a4      	asrs	r4, r4, #2
 8003afe:	42a6      	cmp	r6, r4
 8003b00:	d105      	bne.n	8003b0e <__libc_init_array+0x2e>
 8003b02:	bd70      	pop	{r4, r5, r6, pc}
 8003b04:	00b3      	lsls	r3, r6, #2
 8003b06:	58eb      	ldr	r3, [r5, r3]
 8003b08:	4798      	blx	r3
 8003b0a:	3601      	adds	r6, #1
 8003b0c:	e7ee      	b.n	8003aec <__libc_init_array+0xc>
 8003b0e:	00b3      	lsls	r3, r6, #2
 8003b10:	58eb      	ldr	r3, [r5, r3]
 8003b12:	4798      	blx	r3
 8003b14:	3601      	adds	r6, #1
 8003b16:	e7f2      	b.n	8003afe <__libc_init_array+0x1e>
 8003b18:	08003b88 	.word	0x08003b88
 8003b1c:	08003b88 	.word	0x08003b88
 8003b20:	08003b88 	.word	0x08003b88
 8003b24:	08003b8c 	.word	0x08003b8c

08003b28 <memset>:
 8003b28:	0003      	movs	r3, r0
 8003b2a:	1882      	adds	r2, r0, r2
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d100      	bne.n	8003b32 <memset+0xa>
 8003b30:	4770      	bx	lr
 8003b32:	7019      	strb	r1, [r3, #0]
 8003b34:	3301      	adds	r3, #1
 8003b36:	e7f9      	b.n	8003b2c <memset+0x4>

08003b38 <_init>:
 8003b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3a:	46c0      	nop			; (mov r8, r8)
 8003b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b3e:	bc08      	pop	{r3}
 8003b40:	469e      	mov	lr, r3
 8003b42:	4770      	bx	lr

08003b44 <_fini>:
 8003b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b4a:	bc08      	pop	{r3}
 8003b4c:	469e      	mov	lr, r3
 8003b4e:	4770      	bx	lr
