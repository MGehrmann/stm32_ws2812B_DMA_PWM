
ws2812b_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026b4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002774  08002774  00012774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027ac  080027ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080027ac  080027ac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027ac  080027ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027ac  080027ac  000127ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027b0  080027b0  000127b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080027b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  2000000c  080027c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  080027c0  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d324  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e1b  00000000  00000000  0002d358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  0002f178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b08  00000000  00000000  0002fd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186ed  00000000  00000000  00030860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb19  00000000  00000000  00048f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d8d8  00000000  00000000  00058a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e633e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029d0  00000000  00000000  000e6394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800275c 	.word	0x0800275c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800275c 	.word	0x0800275c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000226:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <MX_DMA_Init+0x38>)
 8000228:	695a      	ldr	r2, [r3, #20]
 800022a:	4b0b      	ldr	r3, [pc, #44]	; (8000258 <MX_DMA_Init+0x38>)
 800022c:	2101      	movs	r1, #1
 800022e:	430a      	orrs	r2, r1
 8000230:	615a      	str	r2, [r3, #20]
 8000232:	4b09      	ldr	r3, [pc, #36]	; (8000258 <MX_DMA_Init+0x38>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	2201      	movs	r2, #1
 8000238:	4013      	ands	r3, r2
 800023a:	607b      	str	r3, [r7, #4]
 800023c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800023e:	2200      	movs	r2, #0
 8000240:	2100      	movs	r1, #0
 8000242:	200a      	movs	r0, #10
 8000244:	f000 fba6 	bl	8000994 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000248:	200a      	movs	r0, #10
 800024a:	f000 fbb8 	bl	80009be <HAL_NVIC_EnableIRQ>

}
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	46bd      	mov	sp, r7
 8000252:	b002      	add	sp, #8
 8000254:	bd80      	pop	{r7, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	40021000 	.word	0x40021000

0800025c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b084      	sub	sp, #16
 8000260:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000262:	4b17      	ldr	r3, [pc, #92]	; (80002c0 <MX_GPIO_Init+0x64>)
 8000264:	695a      	ldr	r2, [r3, #20]
 8000266:	4b16      	ldr	r3, [pc, #88]	; (80002c0 <MX_GPIO_Init+0x64>)
 8000268:	2180      	movs	r1, #128	; 0x80
 800026a:	03c9      	lsls	r1, r1, #15
 800026c:	430a      	orrs	r2, r1
 800026e:	615a      	str	r2, [r3, #20]
 8000270:	4b13      	ldr	r3, [pc, #76]	; (80002c0 <MX_GPIO_Init+0x64>)
 8000272:	695a      	ldr	r2, [r3, #20]
 8000274:	2380      	movs	r3, #128	; 0x80
 8000276:	03db      	lsls	r3, r3, #15
 8000278:	4013      	ands	r3, r2
 800027a:	60fb      	str	r3, [r7, #12]
 800027c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800027e:	4b10      	ldr	r3, [pc, #64]	; (80002c0 <MX_GPIO_Init+0x64>)
 8000280:	695a      	ldr	r2, [r3, #20]
 8000282:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <MX_GPIO_Init+0x64>)
 8000284:	2180      	movs	r1, #128	; 0x80
 8000286:	0289      	lsls	r1, r1, #10
 8000288:	430a      	orrs	r2, r1
 800028a:	615a      	str	r2, [r3, #20]
 800028c:	4b0c      	ldr	r3, [pc, #48]	; (80002c0 <MX_GPIO_Init+0x64>)
 800028e:	695a      	ldr	r2, [r3, #20]
 8000290:	2380      	movs	r3, #128	; 0x80
 8000292:	029b      	lsls	r3, r3, #10
 8000294:	4013      	ands	r3, r2
 8000296:	60bb      	str	r3, [r7, #8]
 8000298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800029a:	4b09      	ldr	r3, [pc, #36]	; (80002c0 <MX_GPIO_Init+0x64>)
 800029c:	695a      	ldr	r2, [r3, #20]
 800029e:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <MX_GPIO_Init+0x64>)
 80002a0:	2180      	movs	r1, #128	; 0x80
 80002a2:	02c9      	lsls	r1, r1, #11
 80002a4:	430a      	orrs	r2, r1
 80002a6:	615a      	str	r2, [r3, #20]
 80002a8:	4b05      	ldr	r3, [pc, #20]	; (80002c0 <MX_GPIO_Init+0x64>)
 80002aa:	695a      	ldr	r2, [r3, #20]
 80002ac:	2380      	movs	r3, #128	; 0x80
 80002ae:	02db      	lsls	r3, r3, #11
 80002b0:	4013      	ands	r3, r2
 80002b2:	607b      	str	r3, [r7, #4]
 80002b4:	687b      	ldr	r3, [r7, #4]

}
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	46bd      	mov	sp, r7
 80002ba:	b004      	add	sp, #16
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	46c0      	nop			; (mov r8, r8)
 80002c0:	40021000 	.word	0x40021000

080002c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c8:	f000 fa54 	bl	8000774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002cc:	f000 f809 	bl	80002e2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002d0:	f7ff ffc4 	bl	800025c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002d4:	f000 f98e 	bl	80005f4 <MX_USART2_UART_Init>
  MX_DMA_Init();
 80002d8:	f7ff ffa2 	bl	8000220 <MX_DMA_Init>
  MX_TIM3_Init();
 80002dc:	f000 f89c 	bl	8000418 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002e0:	e7fe      	b.n	80002e0 <main+0x1c>

080002e2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e2:	b590      	push	{r4, r7, lr}
 80002e4:	b093      	sub	sp, #76	; 0x4c
 80002e6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e8:	2414      	movs	r4, #20
 80002ea:	193b      	adds	r3, r7, r4
 80002ec:	0018      	movs	r0, r3
 80002ee:	2334      	movs	r3, #52	; 0x34
 80002f0:	001a      	movs	r2, r3
 80002f2:	2100      	movs	r1, #0
 80002f4:	f002 fa2a 	bl	800274c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	0018      	movs	r0, r3
 80002fc:	2310      	movs	r3, #16
 80002fe:	001a      	movs	r2, r3
 8000300:	2100      	movs	r1, #0
 8000302:	f002 fa23 	bl	800274c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000306:	0021      	movs	r1, r4
 8000308:	187b      	adds	r3, r7, r1
 800030a:	2201      	movs	r2, #1
 800030c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800030e:	187b      	adds	r3, r7, r1
 8000310:	2205      	movs	r2, #5
 8000312:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000314:	187b      	adds	r3, r7, r1
 8000316:	2202      	movs	r2, #2
 8000318:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800031a:	187b      	adds	r3, r7, r1
 800031c:	2280      	movs	r2, #128	; 0x80
 800031e:	0252      	lsls	r2, r2, #9
 8000320:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000322:	187b      	adds	r3, r7, r1
 8000324:	2280      	movs	r2, #128	; 0x80
 8000326:	0352      	lsls	r2, r2, #13
 8000328:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800032a:	187b      	adds	r3, r7, r1
 800032c:	2200      	movs	r2, #0
 800032e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000330:	187b      	adds	r3, r7, r1
 8000332:	0018      	movs	r0, r3
 8000334:	f000 fdce 	bl	8000ed4 <HAL_RCC_OscConfig>
 8000338:	1e03      	subs	r3, r0, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800033c:	f000 f819 	bl	8000372 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2207      	movs	r2, #7
 8000344:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	2202      	movs	r2, #2
 800034a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	2200      	movs	r2, #0
 8000350:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	2200      	movs	r2, #0
 8000356:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	2101      	movs	r1, #1
 800035c:	0018      	movs	r0, r3
 800035e:	f001 f93f 	bl	80015e0 <HAL_RCC_ClockConfig>
 8000362:	1e03      	subs	r3, r0, #0
 8000364:	d001      	beq.n	800036a <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000366:	f000 f804 	bl	8000372 <Error_Handler>
  }
}
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	46bd      	mov	sp, r7
 800036e:	b013      	add	sp, #76	; 0x4c
 8000370:	bd90      	pop	{r4, r7, pc}

08000372 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000372:	b580      	push	{r7, lr}
 8000374:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000376:	b672      	cpsid	i
}
 8000378:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800037a:	e7fe      	b.n	800037a <Error_Handler+0x8>

0800037c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000382:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <HAL_MspInit+0x44>)
 8000384:	699a      	ldr	r2, [r3, #24]
 8000386:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <HAL_MspInit+0x44>)
 8000388:	2101      	movs	r1, #1
 800038a:	430a      	orrs	r2, r1
 800038c:	619a      	str	r2, [r3, #24]
 800038e:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <HAL_MspInit+0x44>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	2201      	movs	r2, #1
 8000394:	4013      	ands	r3, r2
 8000396:	607b      	str	r3, [r7, #4]
 8000398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800039a:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <HAL_MspInit+0x44>)
 800039c:	69da      	ldr	r2, [r3, #28]
 800039e:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <HAL_MspInit+0x44>)
 80003a0:	2180      	movs	r1, #128	; 0x80
 80003a2:	0549      	lsls	r1, r1, #21
 80003a4:	430a      	orrs	r2, r1
 80003a6:	61da      	str	r2, [r3, #28]
 80003a8:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <HAL_MspInit+0x44>)
 80003aa:	69da      	ldr	r2, [r3, #28]
 80003ac:	2380      	movs	r3, #128	; 0x80
 80003ae:	055b      	lsls	r3, r3, #21
 80003b0:	4013      	ands	r3, r2
 80003b2:	603b      	str	r3, [r7, #0]
 80003b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	46bd      	mov	sp, r7
 80003ba:	b002      	add	sp, #8
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	46c0      	nop			; (mov r8, r8)
 80003c0:	40021000 	.word	0x40021000

080003c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003c8:	e7fe      	b.n	80003c8 <NMI_Handler+0x4>

080003ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003ca:	b580      	push	{r7, lr}
 80003cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003ce:	e7fe      	b.n	80003ce <HardFault_Handler+0x4>

080003d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80003d4:	46c0      	nop			; (mov r8, r8)
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}

080003da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003da:	b580      	push	{r7, lr}
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003e8:	f000 fa0c 	bl	8000804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003ec:	46c0      	nop			; (mov r8, r8)
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
	...

080003f4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 80003f8:	4b03      	ldr	r3, [pc, #12]	; (8000408 <DMA1_Channel2_3_IRQHandler+0x14>)
 80003fa:	0018      	movs	r0, r3
 80003fc:	f000 fb44 	bl	8000a88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000400:	46c0      	nop			; (mov r8, r8)
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	46c0      	nop			; (mov r8, r8)
 8000408:	20000070 	.word	0x20000070

0800040c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000410:	46c0      	nop			; (mov r8, r8)
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
	...

08000418 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim3_ch4_up;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b08a      	sub	sp, #40	; 0x28
 800041c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800041e:	2320      	movs	r3, #32
 8000420:	18fb      	adds	r3, r7, r3
 8000422:	0018      	movs	r0, r3
 8000424:	2308      	movs	r3, #8
 8000426:	001a      	movs	r2, r3
 8000428:	2100      	movs	r1, #0
 800042a:	f002 f98f 	bl	800274c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	0018      	movs	r0, r3
 8000432:	231c      	movs	r3, #28
 8000434:	001a      	movs	r2, r3
 8000436:	2100      	movs	r1, #0
 8000438:	f002 f988 	bl	800274c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800043c:	4b24      	ldr	r3, [pc, #144]	; (80004d0 <MX_TIM3_Init+0xb8>)
 800043e:	4a25      	ldr	r2, [pc, #148]	; (80004d4 <MX_TIM3_Init+0xbc>)
 8000440:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000442:	4b23      	ldr	r3, [pc, #140]	; (80004d0 <MX_TIM3_Init+0xb8>)
 8000444:	2200      	movs	r2, #0
 8000446:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000448:	4b21      	ldr	r3, [pc, #132]	; (80004d0 <MX_TIM3_Init+0xb8>)
 800044a:	2200      	movs	r2, #0
 800044c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60;
 800044e:	4b20      	ldr	r3, [pc, #128]	; (80004d0 <MX_TIM3_Init+0xb8>)
 8000450:	223c      	movs	r2, #60	; 0x3c
 8000452:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000454:	4b1e      	ldr	r3, [pc, #120]	; (80004d0 <MX_TIM3_Init+0xb8>)
 8000456:	2200      	movs	r2, #0
 8000458:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800045a:	4b1d      	ldr	r3, [pc, #116]	; (80004d0 <MX_TIM3_Init+0xb8>)
 800045c:	2200      	movs	r2, #0
 800045e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000460:	4b1b      	ldr	r3, [pc, #108]	; (80004d0 <MX_TIM3_Init+0xb8>)
 8000462:	0018      	movs	r0, r3
 8000464:	f001 fa36 	bl	80018d4 <HAL_TIM_PWM_Init>
 8000468:	1e03      	subs	r3, r0, #0
 800046a:	d001      	beq.n	8000470 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800046c:	f7ff ff81 	bl	8000372 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000470:	2120      	movs	r1, #32
 8000472:	187b      	adds	r3, r7, r1
 8000474:	2200      	movs	r2, #0
 8000476:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000478:	187b      	adds	r3, r7, r1
 800047a:	2200      	movs	r2, #0
 800047c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800047e:	187a      	adds	r2, r7, r1
 8000480:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <MX_TIM3_Init+0xb8>)
 8000482:	0011      	movs	r1, r2
 8000484:	0018      	movs	r0, r3
 8000486:	f001 fd91 	bl	8001fac <HAL_TIMEx_MasterConfigSynchronization>
 800048a:	1e03      	subs	r3, r0, #0
 800048c:	d001      	beq.n	8000492 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800048e:	f7ff ff70 	bl	8000372 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	2260      	movs	r2, #96	; 0x60
 8000496:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	2200      	movs	r2, #0
 800049c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	2200      	movs	r2, #0
 80004a2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	2200      	movs	r2, #0
 80004a8:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80004aa:	1d39      	adds	r1, r7, #4
 80004ac:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <MX_TIM3_Init+0xb8>)
 80004ae:	220c      	movs	r2, #12
 80004b0:	0018      	movs	r0, r3
 80004b2:	f001 fa5f 	bl	8001974 <HAL_TIM_PWM_ConfigChannel>
 80004b6:	1e03      	subs	r3, r0, #0
 80004b8:	d001      	beq.n	80004be <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80004ba:	f7ff ff5a 	bl	8000372 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80004be:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <MX_TIM3_Init+0xb8>)
 80004c0:	0018      	movs	r0, r3
 80004c2:	f000 f857 	bl	8000574 <HAL_TIM_MspPostInit>

}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	b00a      	add	sp, #40	; 0x28
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	20000028 	.word	0x20000028
 80004d4:	40000400 	.word	0x40000400

080004d8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a1f      	ldr	r2, [pc, #124]	; (8000564 <HAL_TIM_PWM_MspInit+0x8c>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d138      	bne.n	800055c <HAL_TIM_PWM_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80004ea:	4b1f      	ldr	r3, [pc, #124]	; (8000568 <HAL_TIM_PWM_MspInit+0x90>)
 80004ec:	69da      	ldr	r2, [r3, #28]
 80004ee:	4b1e      	ldr	r3, [pc, #120]	; (8000568 <HAL_TIM_PWM_MspInit+0x90>)
 80004f0:	2102      	movs	r1, #2
 80004f2:	430a      	orrs	r2, r1
 80004f4:	61da      	str	r2, [r3, #28]
 80004f6:	4b1c      	ldr	r3, [pc, #112]	; (8000568 <HAL_TIM_PWM_MspInit+0x90>)
 80004f8:	69db      	ldr	r3, [r3, #28]
 80004fa:	2202      	movs	r2, #2
 80004fc:	4013      	ands	r3, r2
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8000502:	4b1a      	ldr	r3, [pc, #104]	; (800056c <HAL_TIM_PWM_MspInit+0x94>)
 8000504:	4a1a      	ldr	r2, [pc, #104]	; (8000570 <HAL_TIM_PWM_MspInit+0x98>)
 8000506:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000508:	4b18      	ldr	r3, [pc, #96]	; (800056c <HAL_TIM_PWM_MspInit+0x94>)
 800050a:	2200      	movs	r2, #0
 800050c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_ENABLE;
 800050e:	4b17      	ldr	r3, [pc, #92]	; (800056c <HAL_TIM_PWM_MspInit+0x94>)
 8000510:	2240      	movs	r2, #64	; 0x40
 8000512:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_DISABLE;
 8000514:	4b15      	ldr	r3, [pc, #84]	; (800056c <HAL_TIM_PWM_MspInit+0x94>)
 8000516:	2200      	movs	r2, #0
 8000518:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800051a:	4b14      	ldr	r3, [pc, #80]	; (800056c <HAL_TIM_PWM_MspInit+0x94>)
 800051c:	2200      	movs	r2, #0
 800051e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <HAL_TIM_PWM_MspInit+0x94>)
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	0112      	lsls	r2, r2, #4
 8000526:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_CIRCULAR;
 8000528:	4b10      	ldr	r3, [pc, #64]	; (800056c <HAL_TIM_PWM_MspInit+0x94>)
 800052a:	2220      	movs	r2, #32
 800052c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 800052e:	4b0f      	ldr	r3, [pc, #60]	; (800056c <HAL_TIM_PWM_MspInit+0x94>)
 8000530:	2200      	movs	r2, #0
 8000532:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8000534:	4b0d      	ldr	r3, [pc, #52]	; (800056c <HAL_TIM_PWM_MspInit+0x94>)
 8000536:	0018      	movs	r0, r3
 8000538:	f000 fa5e 	bl	80009f8 <HAL_DMA_Init>
 800053c:	1e03      	subs	r3, r0, #0
 800053e:	d001      	beq.n	8000544 <HAL_TIM_PWM_MspInit+0x6c>
    {
      Error_Handler();
 8000540:	f7ff ff17 	bl	8000372 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4a09      	ldr	r2, [pc, #36]	; (800056c <HAL_TIM_PWM_MspInit+0x94>)
 8000548:	631a      	str	r2, [r3, #48]	; 0x30
 800054a:	4b08      	ldr	r3, [pc, #32]	; (800056c <HAL_TIM_PWM_MspInit+0x94>)
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4a06      	ldr	r2, [pc, #24]	; (800056c <HAL_TIM_PWM_MspInit+0x94>)
 8000554:	621a      	str	r2, [r3, #32]
 8000556:	4b05      	ldr	r3, [pc, #20]	; (800056c <HAL_TIM_PWM_MspInit+0x94>)
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	b004      	add	sp, #16
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40000400 	.word	0x40000400
 8000568:	40021000 	.word	0x40021000
 800056c:	20000070 	.word	0x20000070
 8000570:	40020030 	.word	0x40020030

08000574 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000574:	b590      	push	{r4, r7, lr}
 8000576:	b089      	sub	sp, #36	; 0x24
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057c:	240c      	movs	r4, #12
 800057e:	193b      	adds	r3, r7, r4
 8000580:	0018      	movs	r0, r3
 8000582:	2314      	movs	r3, #20
 8000584:	001a      	movs	r2, r3
 8000586:	2100      	movs	r1, #0
 8000588:	f002 f8e0 	bl	800274c <memset>
  if(timHandle->Instance==TIM3)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a15      	ldr	r2, [pc, #84]	; (80005e8 <HAL_TIM_MspPostInit+0x74>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d123      	bne.n	80005de <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000596:	4b15      	ldr	r3, [pc, #84]	; (80005ec <HAL_TIM_MspPostInit+0x78>)
 8000598:	695a      	ldr	r2, [r3, #20]
 800059a:	4b14      	ldr	r3, [pc, #80]	; (80005ec <HAL_TIM_MspPostInit+0x78>)
 800059c:	2180      	movs	r1, #128	; 0x80
 800059e:	02c9      	lsls	r1, r1, #11
 80005a0:	430a      	orrs	r2, r1
 80005a2:	615a      	str	r2, [r3, #20]
 80005a4:	4b11      	ldr	r3, [pc, #68]	; (80005ec <HAL_TIM_MspPostInit+0x78>)
 80005a6:	695a      	ldr	r2, [r3, #20]
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	02db      	lsls	r3, r3, #11
 80005ac:	4013      	ands	r3, r2
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005b2:	0021      	movs	r1, r4
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	2202      	movs	r2, #2
 80005b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ba:	187b      	adds	r3, r7, r1
 80005bc:	2202      	movs	r2, #2
 80005be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	2200      	movs	r2, #0
 80005ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2201      	movs	r2, #1
 80005d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <HAL_TIM_MspPostInit+0x7c>)
 80005d6:	0019      	movs	r1, r3
 80005d8:	0010      	movs	r0, r2
 80005da:	f000 fb13 	bl	8000c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b009      	add	sp, #36	; 0x24
 80005e4:	bd90      	pop	{r4, r7, pc}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	40000400 	.word	0x40000400
 80005ec:	40021000 	.word	0x40021000
 80005f0:	48000400 	.word	0x48000400

080005f4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <MX_USART2_UART_Init+0x58>)
 80005fa:	4a15      	ldr	r2, [pc, #84]	; (8000650 <MX_USART2_UART_Init+0x5c>)
 80005fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80005fe:	4b13      	ldr	r3, [pc, #76]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000600:	2296      	movs	r2, #150	; 0x96
 8000602:	0212      	lsls	r2, r2, #8
 8000604:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_USART2_UART_Init+0x58>)
 800060e:	2200      	movs	r2, #0
 8000610:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <MX_USART2_UART_Init+0x58>)
 800061a:	220c      	movs	r2, #12
 800061c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000624:	4b09      	ldr	r3, [pc, #36]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000626:	2200      	movs	r2, #0
 8000628:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <MX_USART2_UART_Init+0x58>)
 800062c:	2200      	movs	r2, #0
 800062e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000632:	2200      	movs	r2, #0
 8000634:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000636:	4b05      	ldr	r3, [pc, #20]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000638:	0018      	movs	r0, r3
 800063a:	f001 fd0f 	bl	800205c <HAL_UART_Init>
 800063e:	1e03      	subs	r3, r0, #0
 8000640:	d001      	beq.n	8000646 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000642:	f7ff fe96 	bl	8000372 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	200000b4 	.word	0x200000b4
 8000650:	40004400 	.word	0x40004400

08000654 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000654:	b590      	push	{r4, r7, lr}
 8000656:	b08b      	sub	sp, #44	; 0x2c
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	2414      	movs	r4, #20
 800065e:	193b      	adds	r3, r7, r4
 8000660:	0018      	movs	r0, r3
 8000662:	2314      	movs	r3, #20
 8000664:	001a      	movs	r2, r3
 8000666:	2100      	movs	r1, #0
 8000668:	f002 f870 	bl	800274c <memset>
  if(uartHandle->Instance==USART2)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a1c      	ldr	r2, [pc, #112]	; (80006e4 <HAL_UART_MspInit+0x90>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d132      	bne.n	80006dc <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000676:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <HAL_UART_MspInit+0x94>)
 8000678:	69da      	ldr	r2, [r3, #28]
 800067a:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <HAL_UART_MspInit+0x94>)
 800067c:	2180      	movs	r1, #128	; 0x80
 800067e:	0289      	lsls	r1, r1, #10
 8000680:	430a      	orrs	r2, r1
 8000682:	61da      	str	r2, [r3, #28]
 8000684:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <HAL_UART_MspInit+0x94>)
 8000686:	69da      	ldr	r2, [r3, #28]
 8000688:	2380      	movs	r3, #128	; 0x80
 800068a:	029b      	lsls	r3, r3, #10
 800068c:	4013      	ands	r3, r2
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <HAL_UART_MspInit+0x94>)
 8000694:	695a      	ldr	r2, [r3, #20]
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <HAL_UART_MspInit+0x94>)
 8000698:	2180      	movs	r1, #128	; 0x80
 800069a:	0289      	lsls	r1, r1, #10
 800069c:	430a      	orrs	r2, r1
 800069e:	615a      	str	r2, [r3, #20]
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <HAL_UART_MspInit+0x94>)
 80006a2:	695a      	ldr	r2, [r3, #20]
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	029b      	lsls	r3, r3, #10
 80006a8:	4013      	ands	r3, r2
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80006ae:	0021      	movs	r1, r4
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	4a0e      	ldr	r2, [pc, #56]	; (80006ec <HAL_UART_MspInit+0x98>)
 80006b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2202      	movs	r2, #2
 80006ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2203      	movs	r2, #3
 80006c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2201      	movs	r2, #1
 80006cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ce:	187a      	adds	r2, r7, r1
 80006d0:	2390      	movs	r3, #144	; 0x90
 80006d2:	05db      	lsls	r3, r3, #23
 80006d4:	0011      	movs	r1, r2
 80006d6:	0018      	movs	r0, r3
 80006d8:	f000 fa94 	bl	8000c04 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80006dc:	46c0      	nop			; (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	b00b      	add	sp, #44	; 0x2c
 80006e2:	bd90      	pop	{r4, r7, pc}
 80006e4:	40004400 	.word	0x40004400
 80006e8:	40021000 	.word	0x40021000
 80006ec:	00008004 	.word	0x00008004

080006f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006f0:	4813      	ldr	r0, [pc, #76]	; (8000740 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006f2:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80006f4:	4813      	ldr	r0, [pc, #76]	; (8000744 <LoopForever+0x6>)
    LDR R1, [R0]
 80006f6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80006f8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80006fa:	4a13      	ldr	r2, [pc, #76]	; (8000748 <LoopForever+0xa>)
    CMP R1, R2
 80006fc:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80006fe:	d105      	bne.n	800070c <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000700:	4812      	ldr	r0, [pc, #72]	; (800074c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000702:	4913      	ldr	r1, [pc, #76]	; (8000750 <LoopForever+0x12>)
    STR R1, [R0]
 8000704:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000706:	4813      	ldr	r0, [pc, #76]	; (8000754 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000708:	4913      	ldr	r1, [pc, #76]	; (8000758 <LoopForever+0x1a>)
    STR R1, [R0]
 800070a:	6001      	str	r1, [r0, #0]

0800070c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800070c:	4813      	ldr	r0, [pc, #76]	; (800075c <LoopForever+0x1e>)
  ldr r1, =_edata
 800070e:	4914      	ldr	r1, [pc, #80]	; (8000760 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000710:	4a14      	ldr	r2, [pc, #80]	; (8000764 <LoopForever+0x26>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000714:	e002      	b.n	800071c <LoopCopyDataInit>

08000716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800071a:	3304      	adds	r3, #4

0800071c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800071c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000720:	d3f9      	bcc.n	8000716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000722:	4a11      	ldr	r2, [pc, #68]	; (8000768 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000724:	4c11      	ldr	r4, [pc, #68]	; (800076c <LoopForever+0x2e>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000728:	e001      	b.n	800072e <LoopFillZerobss>

0800072a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800072a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800072c:	3204      	adds	r2, #4

0800072e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000730:	d3fb      	bcc.n	800072a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000732:	f7ff fe6b 	bl	800040c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000736:	f001 ffe5 	bl	8002704 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800073a:	f7ff fdc3 	bl	80002c4 <main>

0800073e <LoopForever>:

LoopForever:
    b LoopForever
 800073e:	e7fe      	b.n	800073e <LoopForever>
  ldr   r0, =_estack
 8000740:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000744:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000748:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 800074c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000750:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000754:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000758:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800075c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000760:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000764:	080027b4 	.word	0x080027b4
  ldr r2, =_sbss
 8000768:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800076c:	2000013c 	.word	0x2000013c

08000770 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000770:	e7fe      	b.n	8000770 <ADC1_IRQHandler>
	...

08000774 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <HAL_Init+0x24>)
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <HAL_Init+0x24>)
 800077e:	2110      	movs	r1, #16
 8000780:	430a      	orrs	r2, r1
 8000782:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000784:	2000      	movs	r0, #0
 8000786:	f000 f809 	bl	800079c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800078a:	f7ff fdf7 	bl	800037c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800078e:	2300      	movs	r3, #0
}
 8000790:	0018      	movs	r0, r3
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	40022000 	.word	0x40022000

0800079c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <HAL_InitTick+0x5c>)
 80007a6:	681c      	ldr	r4, [r3, #0]
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <HAL_InitTick+0x60>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	0019      	movs	r1, r3
 80007ae:	23fa      	movs	r3, #250	; 0xfa
 80007b0:	0098      	lsls	r0, r3, #2
 80007b2:	f7ff fca9 	bl	8000108 <__udivsi3>
 80007b6:	0003      	movs	r3, r0
 80007b8:	0019      	movs	r1, r3
 80007ba:	0020      	movs	r0, r4
 80007bc:	f7ff fca4 	bl	8000108 <__udivsi3>
 80007c0:	0003      	movs	r3, r0
 80007c2:	0018      	movs	r0, r3
 80007c4:	f000 f90b 	bl	80009de <HAL_SYSTICK_Config>
 80007c8:	1e03      	subs	r3, r0, #0
 80007ca:	d001      	beq.n	80007d0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80007cc:	2301      	movs	r3, #1
 80007ce:	e00f      	b.n	80007f0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b03      	cmp	r3, #3
 80007d4:	d80b      	bhi.n	80007ee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d6:	6879      	ldr	r1, [r7, #4]
 80007d8:	2301      	movs	r3, #1
 80007da:	425b      	negs	r3, r3
 80007dc:	2200      	movs	r2, #0
 80007de:	0018      	movs	r0, r3
 80007e0:	f000 f8d8 	bl	8000994 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_InitTick+0x64>)
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80007ea:	2300      	movs	r3, #0
 80007ec:	e000      	b.n	80007f0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
}
 80007f0:	0018      	movs	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b003      	add	sp, #12
 80007f6:	bd90      	pop	{r4, r7, pc}
 80007f8:	20000000 	.word	0x20000000
 80007fc:	20000008 	.word	0x20000008
 8000800:	20000004 	.word	0x20000004

08000804 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <HAL_IncTick+0x1c>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	001a      	movs	r2, r3
 800080e:	4b05      	ldr	r3, [pc, #20]	; (8000824 <HAL_IncTick+0x20>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	18d2      	adds	r2, r2, r3
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <HAL_IncTick+0x20>)
 8000816:	601a      	str	r2, [r3, #0]
}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	20000008 	.word	0x20000008
 8000824:	20000138 	.word	0x20000138

08000828 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  return uwTick;
 800082c:	4b02      	ldr	r3, [pc, #8]	; (8000838 <HAL_GetTick+0x10>)
 800082e:	681b      	ldr	r3, [r3, #0]
}
 8000830:	0018      	movs	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	20000138 	.word	0x20000138

0800083c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	0002      	movs	r2, r0
 8000844:	1dfb      	adds	r3, r7, #7
 8000846:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000848:	1dfb      	adds	r3, r7, #7
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b7f      	cmp	r3, #127	; 0x7f
 800084e:	d809      	bhi.n	8000864 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000850:	1dfb      	adds	r3, r7, #7
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	001a      	movs	r2, r3
 8000856:	231f      	movs	r3, #31
 8000858:	401a      	ands	r2, r3
 800085a:	4b04      	ldr	r3, [pc, #16]	; (800086c <__NVIC_EnableIRQ+0x30>)
 800085c:	2101      	movs	r1, #1
 800085e:	4091      	lsls	r1, r2
 8000860:	000a      	movs	r2, r1
 8000862:	601a      	str	r2, [r3, #0]
  }
}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	b002      	add	sp, #8
 800086a:	bd80      	pop	{r7, pc}
 800086c:	e000e100 	.word	0xe000e100

08000870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000870:	b590      	push	{r4, r7, lr}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	0002      	movs	r2, r0
 8000878:	6039      	str	r1, [r7, #0]
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800087e:	1dfb      	adds	r3, r7, #7
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b7f      	cmp	r3, #127	; 0x7f
 8000884:	d828      	bhi.n	80008d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000886:	4a2f      	ldr	r2, [pc, #188]	; (8000944 <__NVIC_SetPriority+0xd4>)
 8000888:	1dfb      	adds	r3, r7, #7
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	b25b      	sxtb	r3, r3
 800088e:	089b      	lsrs	r3, r3, #2
 8000890:	33c0      	adds	r3, #192	; 0xc0
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	589b      	ldr	r3, [r3, r2]
 8000896:	1dfa      	adds	r2, r7, #7
 8000898:	7812      	ldrb	r2, [r2, #0]
 800089a:	0011      	movs	r1, r2
 800089c:	2203      	movs	r2, #3
 800089e:	400a      	ands	r2, r1
 80008a0:	00d2      	lsls	r2, r2, #3
 80008a2:	21ff      	movs	r1, #255	; 0xff
 80008a4:	4091      	lsls	r1, r2
 80008a6:	000a      	movs	r2, r1
 80008a8:	43d2      	mvns	r2, r2
 80008aa:	401a      	ands	r2, r3
 80008ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	019b      	lsls	r3, r3, #6
 80008b2:	22ff      	movs	r2, #255	; 0xff
 80008b4:	401a      	ands	r2, r3
 80008b6:	1dfb      	adds	r3, r7, #7
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	0018      	movs	r0, r3
 80008bc:	2303      	movs	r3, #3
 80008be:	4003      	ands	r3, r0
 80008c0:	00db      	lsls	r3, r3, #3
 80008c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008c4:	481f      	ldr	r0, [pc, #124]	; (8000944 <__NVIC_SetPriority+0xd4>)
 80008c6:	1dfb      	adds	r3, r7, #7
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	b25b      	sxtb	r3, r3
 80008cc:	089b      	lsrs	r3, r3, #2
 80008ce:	430a      	orrs	r2, r1
 80008d0:	33c0      	adds	r3, #192	; 0xc0
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008d6:	e031      	b.n	800093c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d8:	4a1b      	ldr	r2, [pc, #108]	; (8000948 <__NVIC_SetPriority+0xd8>)
 80008da:	1dfb      	adds	r3, r7, #7
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	0019      	movs	r1, r3
 80008e0:	230f      	movs	r3, #15
 80008e2:	400b      	ands	r3, r1
 80008e4:	3b08      	subs	r3, #8
 80008e6:	089b      	lsrs	r3, r3, #2
 80008e8:	3306      	adds	r3, #6
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	18d3      	adds	r3, r2, r3
 80008ee:	3304      	adds	r3, #4
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	1dfa      	adds	r2, r7, #7
 80008f4:	7812      	ldrb	r2, [r2, #0]
 80008f6:	0011      	movs	r1, r2
 80008f8:	2203      	movs	r2, #3
 80008fa:	400a      	ands	r2, r1
 80008fc:	00d2      	lsls	r2, r2, #3
 80008fe:	21ff      	movs	r1, #255	; 0xff
 8000900:	4091      	lsls	r1, r2
 8000902:	000a      	movs	r2, r1
 8000904:	43d2      	mvns	r2, r2
 8000906:	401a      	ands	r2, r3
 8000908:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	019b      	lsls	r3, r3, #6
 800090e:	22ff      	movs	r2, #255	; 0xff
 8000910:	401a      	ands	r2, r3
 8000912:	1dfb      	adds	r3, r7, #7
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	0018      	movs	r0, r3
 8000918:	2303      	movs	r3, #3
 800091a:	4003      	ands	r3, r0
 800091c:	00db      	lsls	r3, r3, #3
 800091e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000920:	4809      	ldr	r0, [pc, #36]	; (8000948 <__NVIC_SetPriority+0xd8>)
 8000922:	1dfb      	adds	r3, r7, #7
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	001c      	movs	r4, r3
 8000928:	230f      	movs	r3, #15
 800092a:	4023      	ands	r3, r4
 800092c:	3b08      	subs	r3, #8
 800092e:	089b      	lsrs	r3, r3, #2
 8000930:	430a      	orrs	r2, r1
 8000932:	3306      	adds	r3, #6
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	18c3      	adds	r3, r0, r3
 8000938:	3304      	adds	r3, #4
 800093a:	601a      	str	r2, [r3, #0]
}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	b003      	add	sp, #12
 8000942:	bd90      	pop	{r4, r7, pc}
 8000944:	e000e100 	.word	0xe000e100
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	1e5a      	subs	r2, r3, #1
 8000958:	2380      	movs	r3, #128	; 0x80
 800095a:	045b      	lsls	r3, r3, #17
 800095c:	429a      	cmp	r2, r3
 800095e:	d301      	bcc.n	8000964 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000960:	2301      	movs	r3, #1
 8000962:	e010      	b.n	8000986 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <SysTick_Config+0x44>)
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	3a01      	subs	r2, #1
 800096a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800096c:	2301      	movs	r3, #1
 800096e:	425b      	negs	r3, r3
 8000970:	2103      	movs	r1, #3
 8000972:	0018      	movs	r0, r3
 8000974:	f7ff ff7c 	bl	8000870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <SysTick_Config+0x44>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800097e:	4b04      	ldr	r3, [pc, #16]	; (8000990 <SysTick_Config+0x44>)
 8000980:	2207      	movs	r2, #7
 8000982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000984:	2300      	movs	r3, #0
}
 8000986:	0018      	movs	r0, r3
 8000988:	46bd      	mov	sp, r7
 800098a:	b002      	add	sp, #8
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	e000e010 	.word	0xe000e010

08000994 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	60b9      	str	r1, [r7, #8]
 800099c:	607a      	str	r2, [r7, #4]
 800099e:	210f      	movs	r1, #15
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	1c02      	adds	r2, r0, #0
 80009a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009a6:	68ba      	ldr	r2, [r7, #8]
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	b25b      	sxtb	r3, r3
 80009ae:	0011      	movs	r1, r2
 80009b0:	0018      	movs	r0, r3
 80009b2:	f7ff ff5d 	bl	8000870 <__NVIC_SetPriority>
}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b004      	add	sp, #16
 80009bc:	bd80      	pop	{r7, pc}

080009be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	0002      	movs	r2, r0
 80009c6:	1dfb      	adds	r3, r7, #7
 80009c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009ca:	1dfb      	adds	r3, r7, #7
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b25b      	sxtb	r3, r3
 80009d0:	0018      	movs	r0, r3
 80009d2:	f7ff ff33 	bl	800083c <__NVIC_EnableIRQ>
}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	b002      	add	sp, #8
 80009dc:	bd80      	pop	{r7, pc}

080009de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	0018      	movs	r0, r3
 80009ea:	f7ff ffaf 	bl	800094c <SysTick_Config>
 80009ee:	0003      	movs	r3, r0
}
 80009f0:	0018      	movs	r0, r3
 80009f2:	46bd      	mov	sp, r7
 80009f4:	b002      	add	sp, #8
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d101      	bne.n	8000a0e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e036      	b.n	8000a7c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2221      	movs	r2, #33	; 0x21
 8000a12:	2102      	movs	r1, #2
 8000a14:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	4a18      	ldr	r2, [pc, #96]	; (8000a84 <HAL_DMA_Init+0x8c>)
 8000a22:	4013      	ands	r3, r2
 8000a24:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000a2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	695b      	ldr	r3, [r3, #20]
 8000a40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	69db      	ldr	r3, [r3, #28]
 8000a4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	68fa      	ldr	r2, [r7, #12]
 8000a5a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f000 f8b4 	bl	8000bcc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2221      	movs	r2, #33	; 0x21
 8000a6e:	2101      	movs	r1, #1
 8000a70:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2220      	movs	r2, #32
 8000a76:	2100      	movs	r1, #0
 8000a78:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000a7a:	2300      	movs	r3, #0
}  
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	b004      	add	sp, #16
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	ffffc00f 	.word	0xffffc00f

08000a88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	2204      	movs	r2, #4
 8000aa6:	409a      	lsls	r2, r3
 8000aa8:	0013      	movs	r3, r2
 8000aaa:	68fa      	ldr	r2, [r7, #12]
 8000aac:	4013      	ands	r3, r2
 8000aae:	d024      	beq.n	8000afa <HAL_DMA_IRQHandler+0x72>
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	2204      	movs	r2, #4
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	d020      	beq.n	8000afa <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2220      	movs	r2, #32
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	d107      	bne.n	8000ad4 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2104      	movs	r1, #4
 8000ad0:	438a      	bics	r2, r1
 8000ad2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000adc:	2104      	movs	r1, #4
 8000ade:	4091      	lsls	r1, r2
 8000ae0:	000a      	movs	r2, r1
 8000ae2:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d100      	bne.n	8000aee <HAL_DMA_IRQHandler+0x66>
 8000aec:	e06a      	b.n	8000bc4 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	0010      	movs	r0, r2
 8000af6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000af8:	e064      	b.n	8000bc4 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	2202      	movs	r2, #2
 8000b00:	409a      	lsls	r2, r3
 8000b02:	0013      	movs	r3, r2
 8000b04:	68fa      	ldr	r2, [r7, #12]
 8000b06:	4013      	ands	r3, r2
 8000b08:	d02b      	beq.n	8000b62 <HAL_DMA_IRQHandler+0xda>
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	2202      	movs	r2, #2
 8000b0e:	4013      	ands	r3, r2
 8000b10:	d027      	beq.n	8000b62 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2220      	movs	r2, #32
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	d10b      	bne.n	8000b36 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	210a      	movs	r1, #10
 8000b2a:	438a      	bics	r2, r1
 8000b2c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2221      	movs	r2, #33	; 0x21
 8000b32:	2101      	movs	r1, #1
 8000b34:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b3e:	2102      	movs	r1, #2
 8000b40:	4091      	lsls	r1, r2
 8000b42:	000a      	movs	r2, r1
 8000b44:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2220      	movs	r2, #32
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d036      	beq.n	8000bc4 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	0010      	movs	r0, r2
 8000b5e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000b60:	e030      	b.n	8000bc4 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	2208      	movs	r2, #8
 8000b68:	409a      	lsls	r2, r3
 8000b6a:	0013      	movs	r3, r2
 8000b6c:	68fa      	ldr	r2, [r7, #12]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	d028      	beq.n	8000bc4 <HAL_DMA_IRQHandler+0x13c>
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	2208      	movs	r2, #8
 8000b76:	4013      	ands	r3, r2
 8000b78:	d024      	beq.n	8000bc4 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	210e      	movs	r1, #14
 8000b86:	438a      	bics	r2, r1
 8000b88:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b92:	2101      	movs	r1, #1
 8000b94:	4091      	lsls	r1, r2
 8000b96:	000a      	movs	r2, r1
 8000b98:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2221      	movs	r2, #33	; 0x21
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2220      	movs	r2, #32
 8000bac:	2100      	movs	r1, #0
 8000bae:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d005      	beq.n	8000bc4 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	0010      	movs	r0, r2
 8000bc0:	4798      	blx	r3
    }
   }
}  
 8000bc2:	e7ff      	b.n	8000bc4 <HAL_DMA_IRQHandler+0x13c>
 8000bc4:	46c0      	nop			; (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	b004      	add	sp, #16
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a08      	ldr	r2, [pc, #32]	; (8000bfc <DMA_CalcBaseAndBitshift+0x30>)
 8000bda:	4694      	mov	ip, r2
 8000bdc:	4463      	add	r3, ip
 8000bde:	2114      	movs	r1, #20
 8000be0:	0018      	movs	r0, r3
 8000be2:	f7ff fa91 	bl	8000108 <__udivsi3>
 8000be6:	0003      	movs	r3, r0
 8000be8:	009a      	lsls	r2, r3, #2
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a03      	ldr	r2, [pc, #12]	; (8000c00 <DMA_CalcBaseAndBitshift+0x34>)
 8000bf2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000bf4:	46c0      	nop			; (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	b002      	add	sp, #8
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	bffdfff8 	.word	0xbffdfff8
 8000c00:	40020000 	.word	0x40020000

08000c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c12:	e149      	b.n	8000ea8 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2101      	movs	r1, #1
 8000c1a:	697a      	ldr	r2, [r7, #20]
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	000a      	movs	r2, r1
 8000c20:	4013      	ands	r3, r2
 8000c22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d100      	bne.n	8000c2c <HAL_GPIO_Init+0x28>
 8000c2a:	e13a      	b.n	8000ea2 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	2203      	movs	r2, #3
 8000c32:	4013      	ands	r3, r2
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d005      	beq.n	8000c44 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	d130      	bne.n	8000ca6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	2203      	movs	r2, #3
 8000c50:	409a      	lsls	r2, r3
 8000c52:	0013      	movs	r3, r2
 8000c54:	43da      	mvns	r2, r3
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	68da      	ldr	r2, [r3, #12]
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	409a      	lsls	r2, r3
 8000c66:	0013      	movs	r3, r2
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	409a      	lsls	r2, r3
 8000c80:	0013      	movs	r3, r2
 8000c82:	43da      	mvns	r2, r3
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	4013      	ands	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	091b      	lsrs	r3, r3, #4
 8000c90:	2201      	movs	r2, #1
 8000c92:	401a      	ands	r2, r3
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	409a      	lsls	r2, r3
 8000c98:	0013      	movs	r3, r2
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	2203      	movs	r2, #3
 8000cac:	4013      	ands	r3, r2
 8000cae:	2b03      	cmp	r3, #3
 8000cb0:	d017      	beq.n	8000ce2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	68db      	ldr	r3, [r3, #12]
 8000cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	409a      	lsls	r2, r3
 8000cc0:	0013      	movs	r3, r2
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	689a      	ldr	r2, [r3, #8]
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	409a      	lsls	r2, r3
 8000cd4:	0013      	movs	r3, r2
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	4013      	ands	r3, r2
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d123      	bne.n	8000d36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	08da      	lsrs	r2, r3, #3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	3208      	adds	r2, #8
 8000cf6:	0092      	lsls	r2, r2, #2
 8000cf8:	58d3      	ldr	r3, [r2, r3]
 8000cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	2207      	movs	r2, #7
 8000d00:	4013      	ands	r3, r2
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	220f      	movs	r2, #15
 8000d06:	409a      	lsls	r2, r3
 8000d08:	0013      	movs	r3, r2
 8000d0a:	43da      	mvns	r2, r3
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	691a      	ldr	r2, [r3, #16]
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	2107      	movs	r1, #7
 8000d1a:	400b      	ands	r3, r1
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	409a      	lsls	r2, r3
 8000d20:	0013      	movs	r3, r2
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	08da      	lsrs	r2, r3, #3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3208      	adds	r2, #8
 8000d30:	0092      	lsls	r2, r2, #2
 8000d32:	6939      	ldr	r1, [r7, #16]
 8000d34:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	2203      	movs	r2, #3
 8000d42:	409a      	lsls	r2, r3
 8000d44:	0013      	movs	r3, r2
 8000d46:	43da      	mvns	r2, r3
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	2203      	movs	r2, #3
 8000d54:	401a      	ands	r2, r3
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	409a      	lsls	r2, r3
 8000d5c:	0013      	movs	r3, r2
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685a      	ldr	r2, [r3, #4]
 8000d6e:	23c0      	movs	r3, #192	; 0xc0
 8000d70:	029b      	lsls	r3, r3, #10
 8000d72:	4013      	ands	r3, r2
 8000d74:	d100      	bne.n	8000d78 <HAL_GPIO_Init+0x174>
 8000d76:	e094      	b.n	8000ea2 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d78:	4b51      	ldr	r3, [pc, #324]	; (8000ec0 <HAL_GPIO_Init+0x2bc>)
 8000d7a:	699a      	ldr	r2, [r3, #24]
 8000d7c:	4b50      	ldr	r3, [pc, #320]	; (8000ec0 <HAL_GPIO_Init+0x2bc>)
 8000d7e:	2101      	movs	r1, #1
 8000d80:	430a      	orrs	r2, r1
 8000d82:	619a      	str	r2, [r3, #24]
 8000d84:	4b4e      	ldr	r3, [pc, #312]	; (8000ec0 <HAL_GPIO_Init+0x2bc>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	2201      	movs	r2, #1
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d90:	4a4c      	ldr	r2, [pc, #304]	; (8000ec4 <HAL_GPIO_Init+0x2c0>)
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	089b      	lsrs	r3, r3, #2
 8000d96:	3302      	adds	r3, #2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	589b      	ldr	r3, [r3, r2]
 8000d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	2203      	movs	r2, #3
 8000da2:	4013      	ands	r3, r2
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	220f      	movs	r2, #15
 8000da8:	409a      	lsls	r2, r3
 8000daa:	0013      	movs	r3, r2
 8000dac:	43da      	mvns	r2, r3
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	2390      	movs	r3, #144	; 0x90
 8000db8:	05db      	lsls	r3, r3, #23
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d00d      	beq.n	8000dda <HAL_GPIO_Init+0x1d6>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a41      	ldr	r2, [pc, #260]	; (8000ec8 <HAL_GPIO_Init+0x2c4>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d007      	beq.n	8000dd6 <HAL_GPIO_Init+0x1d2>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a40      	ldr	r2, [pc, #256]	; (8000ecc <HAL_GPIO_Init+0x2c8>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d101      	bne.n	8000dd2 <HAL_GPIO_Init+0x1ce>
 8000dce:	2302      	movs	r3, #2
 8000dd0:	e004      	b.n	8000ddc <HAL_GPIO_Init+0x1d8>
 8000dd2:	2305      	movs	r3, #5
 8000dd4:	e002      	b.n	8000ddc <HAL_GPIO_Init+0x1d8>
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e000      	b.n	8000ddc <HAL_GPIO_Init+0x1d8>
 8000dda:	2300      	movs	r3, #0
 8000ddc:	697a      	ldr	r2, [r7, #20]
 8000dde:	2103      	movs	r1, #3
 8000de0:	400a      	ands	r2, r1
 8000de2:	0092      	lsls	r2, r2, #2
 8000de4:	4093      	lsls	r3, r2
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dec:	4935      	ldr	r1, [pc, #212]	; (8000ec4 <HAL_GPIO_Init+0x2c0>)
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	089b      	lsrs	r3, r3, #2
 8000df2:	3302      	adds	r3, #2
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dfa:	4b35      	ldr	r3, [pc, #212]	; (8000ed0 <HAL_GPIO_Init+0x2cc>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	43da      	mvns	r2, r3
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685a      	ldr	r2, [r3, #4]
 8000e0e:	2380      	movs	r3, #128	; 0x80
 8000e10:	025b      	lsls	r3, r3, #9
 8000e12:	4013      	ands	r3, r2
 8000e14:	d003      	beq.n	8000e1e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e1e:	4b2c      	ldr	r3, [pc, #176]	; (8000ed0 <HAL_GPIO_Init+0x2cc>)
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000e24:	4b2a      	ldr	r3, [pc, #168]	; (8000ed0 <HAL_GPIO_Init+0x2cc>)
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	43da      	mvns	r2, r3
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685a      	ldr	r2, [r3, #4]
 8000e38:	2380      	movs	r3, #128	; 0x80
 8000e3a:	029b      	lsls	r3, r3, #10
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	d003      	beq.n	8000e48 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e48:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <HAL_GPIO_Init+0x2cc>)
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e4e:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <HAL_GPIO_Init+0x2cc>)
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	43da      	mvns	r2, r3
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685a      	ldr	r2, [r3, #4]
 8000e62:	2380      	movs	r3, #128	; 0x80
 8000e64:	035b      	lsls	r3, r3, #13
 8000e66:	4013      	ands	r3, r2
 8000e68:	d003      	beq.n	8000e72 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e72:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <HAL_GPIO_Init+0x2cc>)
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e78:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <HAL_GPIO_Init+0x2cc>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	43da      	mvns	r2, r3
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	4013      	ands	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685a      	ldr	r2, [r3, #4]
 8000e8c:	2380      	movs	r3, #128	; 0x80
 8000e8e:	039b      	lsls	r3, r3, #14
 8000e90:	4013      	ands	r3, r2
 8000e92:	d003      	beq.n	8000e9c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <HAL_GPIO_Init+0x2cc>)
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	40da      	lsrs	r2, r3
 8000eb0:	1e13      	subs	r3, r2, #0
 8000eb2:	d000      	beq.n	8000eb6 <HAL_GPIO_Init+0x2b2>
 8000eb4:	e6ae      	b.n	8000c14 <HAL_GPIO_Init+0x10>
  } 
}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	46c0      	nop			; (mov r8, r8)
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	b006      	add	sp, #24
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40010000 	.word	0x40010000
 8000ec8:	48000400 	.word	0x48000400
 8000ecc:	48000800 	.word	0x48000800
 8000ed0:	40010400 	.word	0x40010400

08000ed4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d102      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	f000 fb76 	bl	80015d4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2201      	movs	r2, #1
 8000eee:	4013      	ands	r3, r2
 8000ef0:	d100      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x20>
 8000ef2:	e08e      	b.n	8001012 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ef4:	4bc5      	ldr	r3, [pc, #788]	; (800120c <HAL_RCC_OscConfig+0x338>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	220c      	movs	r2, #12
 8000efa:	4013      	ands	r3, r2
 8000efc:	2b04      	cmp	r3, #4
 8000efe:	d00e      	beq.n	8000f1e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f00:	4bc2      	ldr	r3, [pc, #776]	; (800120c <HAL_RCC_OscConfig+0x338>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	220c      	movs	r2, #12
 8000f06:	4013      	ands	r3, r2
 8000f08:	2b08      	cmp	r3, #8
 8000f0a:	d117      	bne.n	8000f3c <HAL_RCC_OscConfig+0x68>
 8000f0c:	4bbf      	ldr	r3, [pc, #764]	; (800120c <HAL_RCC_OscConfig+0x338>)
 8000f0e:	685a      	ldr	r2, [r3, #4]
 8000f10:	23c0      	movs	r3, #192	; 0xc0
 8000f12:	025b      	lsls	r3, r3, #9
 8000f14:	401a      	ands	r2, r3
 8000f16:	2380      	movs	r3, #128	; 0x80
 8000f18:	025b      	lsls	r3, r3, #9
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d10e      	bne.n	8000f3c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f1e:	4bbb      	ldr	r3, [pc, #748]	; (800120c <HAL_RCC_OscConfig+0x338>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	2380      	movs	r3, #128	; 0x80
 8000f24:	029b      	lsls	r3, r3, #10
 8000f26:	4013      	ands	r3, r2
 8000f28:	d100      	bne.n	8000f2c <HAL_RCC_OscConfig+0x58>
 8000f2a:	e071      	b.n	8001010 <HAL_RCC_OscConfig+0x13c>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d000      	beq.n	8000f36 <HAL_RCC_OscConfig+0x62>
 8000f34:	e06c      	b.n	8001010 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	f000 fb4c 	bl	80015d4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d107      	bne.n	8000f54 <HAL_RCC_OscConfig+0x80>
 8000f44:	4bb1      	ldr	r3, [pc, #708]	; (800120c <HAL_RCC_OscConfig+0x338>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4bb0      	ldr	r3, [pc, #704]	; (800120c <HAL_RCC_OscConfig+0x338>)
 8000f4a:	2180      	movs	r1, #128	; 0x80
 8000f4c:	0249      	lsls	r1, r1, #9
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	e02f      	b.n	8000fb4 <HAL_RCC_OscConfig+0xe0>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d10c      	bne.n	8000f76 <HAL_RCC_OscConfig+0xa2>
 8000f5c:	4bab      	ldr	r3, [pc, #684]	; (800120c <HAL_RCC_OscConfig+0x338>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4baa      	ldr	r3, [pc, #680]	; (800120c <HAL_RCC_OscConfig+0x338>)
 8000f62:	49ab      	ldr	r1, [pc, #684]	; (8001210 <HAL_RCC_OscConfig+0x33c>)
 8000f64:	400a      	ands	r2, r1
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	4ba8      	ldr	r3, [pc, #672]	; (800120c <HAL_RCC_OscConfig+0x338>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4ba7      	ldr	r3, [pc, #668]	; (800120c <HAL_RCC_OscConfig+0x338>)
 8000f6e:	49a9      	ldr	r1, [pc, #676]	; (8001214 <HAL_RCC_OscConfig+0x340>)
 8000f70:	400a      	ands	r2, r1
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	e01e      	b.n	8000fb4 <HAL_RCC_OscConfig+0xe0>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	2b05      	cmp	r3, #5
 8000f7c:	d10e      	bne.n	8000f9c <HAL_RCC_OscConfig+0xc8>
 8000f7e:	4ba3      	ldr	r3, [pc, #652]	; (800120c <HAL_RCC_OscConfig+0x338>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	4ba2      	ldr	r3, [pc, #648]	; (800120c <HAL_RCC_OscConfig+0x338>)
 8000f84:	2180      	movs	r1, #128	; 0x80
 8000f86:	02c9      	lsls	r1, r1, #11
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	4b9f      	ldr	r3, [pc, #636]	; (800120c <HAL_RCC_OscConfig+0x338>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4b9e      	ldr	r3, [pc, #632]	; (800120c <HAL_RCC_OscConfig+0x338>)
 8000f92:	2180      	movs	r1, #128	; 0x80
 8000f94:	0249      	lsls	r1, r1, #9
 8000f96:	430a      	orrs	r2, r1
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	e00b      	b.n	8000fb4 <HAL_RCC_OscConfig+0xe0>
 8000f9c:	4b9b      	ldr	r3, [pc, #620]	; (800120c <HAL_RCC_OscConfig+0x338>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b9a      	ldr	r3, [pc, #616]	; (800120c <HAL_RCC_OscConfig+0x338>)
 8000fa2:	499b      	ldr	r1, [pc, #620]	; (8001210 <HAL_RCC_OscConfig+0x33c>)
 8000fa4:	400a      	ands	r2, r1
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	4b98      	ldr	r3, [pc, #608]	; (800120c <HAL_RCC_OscConfig+0x338>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b97      	ldr	r3, [pc, #604]	; (800120c <HAL_RCC_OscConfig+0x338>)
 8000fae:	4999      	ldr	r1, [pc, #612]	; (8001214 <HAL_RCC_OscConfig+0x340>)
 8000fb0:	400a      	ands	r2, r1
 8000fb2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d014      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbc:	f7ff fc34 	bl	8000828 <HAL_GetTick>
 8000fc0:	0003      	movs	r3, r0
 8000fc2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fc4:	e008      	b.n	8000fd8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fc6:	f7ff fc2f 	bl	8000828 <HAL_GetTick>
 8000fca:	0002      	movs	r2, r0
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b64      	cmp	r3, #100	; 0x64
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e2fd      	b.n	80015d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fd8:	4b8c      	ldr	r3, [pc, #560]	; (800120c <HAL_RCC_OscConfig+0x338>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	2380      	movs	r3, #128	; 0x80
 8000fde:	029b      	lsls	r3, r3, #10
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	d0f0      	beq.n	8000fc6 <HAL_RCC_OscConfig+0xf2>
 8000fe4:	e015      	b.n	8001012 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe6:	f7ff fc1f 	bl	8000828 <HAL_GetTick>
 8000fea:	0003      	movs	r3, r0
 8000fec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fee:	e008      	b.n	8001002 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ff0:	f7ff fc1a 	bl	8000828 <HAL_GetTick>
 8000ff4:	0002      	movs	r2, r0
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	2b64      	cmp	r3, #100	; 0x64
 8000ffc:	d901      	bls.n	8001002 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000ffe:	2303      	movs	r3, #3
 8001000:	e2e8      	b.n	80015d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001002:	4b82      	ldr	r3, [pc, #520]	; (800120c <HAL_RCC_OscConfig+0x338>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	2380      	movs	r3, #128	; 0x80
 8001008:	029b      	lsls	r3, r3, #10
 800100a:	4013      	ands	r3, r2
 800100c:	d1f0      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x11c>
 800100e:	e000      	b.n	8001012 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001010:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2202      	movs	r2, #2
 8001018:	4013      	ands	r3, r2
 800101a:	d100      	bne.n	800101e <HAL_RCC_OscConfig+0x14a>
 800101c:	e06c      	b.n	80010f8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800101e:	4b7b      	ldr	r3, [pc, #492]	; (800120c <HAL_RCC_OscConfig+0x338>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	220c      	movs	r2, #12
 8001024:	4013      	ands	r3, r2
 8001026:	d00e      	beq.n	8001046 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001028:	4b78      	ldr	r3, [pc, #480]	; (800120c <HAL_RCC_OscConfig+0x338>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	220c      	movs	r2, #12
 800102e:	4013      	ands	r3, r2
 8001030:	2b08      	cmp	r3, #8
 8001032:	d11f      	bne.n	8001074 <HAL_RCC_OscConfig+0x1a0>
 8001034:	4b75      	ldr	r3, [pc, #468]	; (800120c <HAL_RCC_OscConfig+0x338>)
 8001036:	685a      	ldr	r2, [r3, #4]
 8001038:	23c0      	movs	r3, #192	; 0xc0
 800103a:	025b      	lsls	r3, r3, #9
 800103c:	401a      	ands	r2, r3
 800103e:	2380      	movs	r3, #128	; 0x80
 8001040:	021b      	lsls	r3, r3, #8
 8001042:	429a      	cmp	r2, r3
 8001044:	d116      	bne.n	8001074 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001046:	4b71      	ldr	r3, [pc, #452]	; (800120c <HAL_RCC_OscConfig+0x338>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2202      	movs	r2, #2
 800104c:	4013      	ands	r3, r2
 800104e:	d005      	beq.n	800105c <HAL_RCC_OscConfig+0x188>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d001      	beq.n	800105c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e2bb      	b.n	80015d4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800105c:	4b6b      	ldr	r3, [pc, #428]	; (800120c <HAL_RCC_OscConfig+0x338>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	22f8      	movs	r2, #248	; 0xf8
 8001062:	4393      	bics	r3, r2
 8001064:	0019      	movs	r1, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	691b      	ldr	r3, [r3, #16]
 800106a:	00da      	lsls	r2, r3, #3
 800106c:	4b67      	ldr	r3, [pc, #412]	; (800120c <HAL_RCC_OscConfig+0x338>)
 800106e:	430a      	orrs	r2, r1
 8001070:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001072:	e041      	b.n	80010f8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d024      	beq.n	80010c6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800107c:	4b63      	ldr	r3, [pc, #396]	; (800120c <HAL_RCC_OscConfig+0x338>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4b62      	ldr	r3, [pc, #392]	; (800120c <HAL_RCC_OscConfig+0x338>)
 8001082:	2101      	movs	r1, #1
 8001084:	430a      	orrs	r2, r1
 8001086:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001088:	f7ff fbce 	bl	8000828 <HAL_GetTick>
 800108c:	0003      	movs	r3, r0
 800108e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001090:	e008      	b.n	80010a4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001092:	f7ff fbc9 	bl	8000828 <HAL_GetTick>
 8001096:	0002      	movs	r2, r0
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	2b02      	cmp	r3, #2
 800109e:	d901      	bls.n	80010a4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80010a0:	2303      	movs	r3, #3
 80010a2:	e297      	b.n	80015d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a4:	4b59      	ldr	r3, [pc, #356]	; (800120c <HAL_RCC_OscConfig+0x338>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2202      	movs	r2, #2
 80010aa:	4013      	ands	r3, r2
 80010ac:	d0f1      	beq.n	8001092 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ae:	4b57      	ldr	r3, [pc, #348]	; (800120c <HAL_RCC_OscConfig+0x338>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	22f8      	movs	r2, #248	; 0xf8
 80010b4:	4393      	bics	r3, r2
 80010b6:	0019      	movs	r1, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	00da      	lsls	r2, r3, #3
 80010be:	4b53      	ldr	r3, [pc, #332]	; (800120c <HAL_RCC_OscConfig+0x338>)
 80010c0:	430a      	orrs	r2, r1
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	e018      	b.n	80010f8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010c6:	4b51      	ldr	r3, [pc, #324]	; (800120c <HAL_RCC_OscConfig+0x338>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	4b50      	ldr	r3, [pc, #320]	; (800120c <HAL_RCC_OscConfig+0x338>)
 80010cc:	2101      	movs	r1, #1
 80010ce:	438a      	bics	r2, r1
 80010d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d2:	f7ff fba9 	bl	8000828 <HAL_GetTick>
 80010d6:	0003      	movs	r3, r0
 80010d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010da:	e008      	b.n	80010ee <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010dc:	f7ff fba4 	bl	8000828 <HAL_GetTick>
 80010e0:	0002      	movs	r2, r0
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d901      	bls.n	80010ee <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e272      	b.n	80015d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ee:	4b47      	ldr	r3, [pc, #284]	; (800120c <HAL_RCC_OscConfig+0x338>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2202      	movs	r2, #2
 80010f4:	4013      	ands	r3, r2
 80010f6:	d1f1      	bne.n	80010dc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2208      	movs	r2, #8
 80010fe:	4013      	ands	r3, r2
 8001100:	d036      	beq.n	8001170 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d019      	beq.n	800113e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800110a:	4b40      	ldr	r3, [pc, #256]	; (800120c <HAL_RCC_OscConfig+0x338>)
 800110c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800110e:	4b3f      	ldr	r3, [pc, #252]	; (800120c <HAL_RCC_OscConfig+0x338>)
 8001110:	2101      	movs	r1, #1
 8001112:	430a      	orrs	r2, r1
 8001114:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001116:	f7ff fb87 	bl	8000828 <HAL_GetTick>
 800111a:	0003      	movs	r3, r0
 800111c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001120:	f7ff fb82 	bl	8000828 <HAL_GetTick>
 8001124:	0002      	movs	r2, r0
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b02      	cmp	r3, #2
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e250      	b.n	80015d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001132:	4b36      	ldr	r3, [pc, #216]	; (800120c <HAL_RCC_OscConfig+0x338>)
 8001134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001136:	2202      	movs	r2, #2
 8001138:	4013      	ands	r3, r2
 800113a:	d0f1      	beq.n	8001120 <HAL_RCC_OscConfig+0x24c>
 800113c:	e018      	b.n	8001170 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800113e:	4b33      	ldr	r3, [pc, #204]	; (800120c <HAL_RCC_OscConfig+0x338>)
 8001140:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001142:	4b32      	ldr	r3, [pc, #200]	; (800120c <HAL_RCC_OscConfig+0x338>)
 8001144:	2101      	movs	r1, #1
 8001146:	438a      	bics	r2, r1
 8001148:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800114a:	f7ff fb6d 	bl	8000828 <HAL_GetTick>
 800114e:	0003      	movs	r3, r0
 8001150:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001154:	f7ff fb68 	bl	8000828 <HAL_GetTick>
 8001158:	0002      	movs	r2, r0
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e236      	b.n	80015d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001166:	4b29      	ldr	r3, [pc, #164]	; (800120c <HAL_RCC_OscConfig+0x338>)
 8001168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116a:	2202      	movs	r2, #2
 800116c:	4013      	ands	r3, r2
 800116e:	d1f1      	bne.n	8001154 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2204      	movs	r2, #4
 8001176:	4013      	ands	r3, r2
 8001178:	d100      	bne.n	800117c <HAL_RCC_OscConfig+0x2a8>
 800117a:	e0b5      	b.n	80012e8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800117c:	201f      	movs	r0, #31
 800117e:	183b      	adds	r3, r7, r0
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001184:	4b21      	ldr	r3, [pc, #132]	; (800120c <HAL_RCC_OscConfig+0x338>)
 8001186:	69da      	ldr	r2, [r3, #28]
 8001188:	2380      	movs	r3, #128	; 0x80
 800118a:	055b      	lsls	r3, r3, #21
 800118c:	4013      	ands	r3, r2
 800118e:	d110      	bne.n	80011b2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001190:	4b1e      	ldr	r3, [pc, #120]	; (800120c <HAL_RCC_OscConfig+0x338>)
 8001192:	69da      	ldr	r2, [r3, #28]
 8001194:	4b1d      	ldr	r3, [pc, #116]	; (800120c <HAL_RCC_OscConfig+0x338>)
 8001196:	2180      	movs	r1, #128	; 0x80
 8001198:	0549      	lsls	r1, r1, #21
 800119a:	430a      	orrs	r2, r1
 800119c:	61da      	str	r2, [r3, #28]
 800119e:	4b1b      	ldr	r3, [pc, #108]	; (800120c <HAL_RCC_OscConfig+0x338>)
 80011a0:	69da      	ldr	r2, [r3, #28]
 80011a2:	2380      	movs	r3, #128	; 0x80
 80011a4:	055b      	lsls	r3, r3, #21
 80011a6:	4013      	ands	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80011ac:	183b      	adds	r3, r7, r0
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b2:	4b19      	ldr	r3, [pc, #100]	; (8001218 <HAL_RCC_OscConfig+0x344>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	2380      	movs	r3, #128	; 0x80
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	4013      	ands	r3, r2
 80011bc:	d11a      	bne.n	80011f4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011be:	4b16      	ldr	r3, [pc, #88]	; (8001218 <HAL_RCC_OscConfig+0x344>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <HAL_RCC_OscConfig+0x344>)
 80011c4:	2180      	movs	r1, #128	; 0x80
 80011c6:	0049      	lsls	r1, r1, #1
 80011c8:	430a      	orrs	r2, r1
 80011ca:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011cc:	f7ff fb2c 	bl	8000828 <HAL_GetTick>
 80011d0:	0003      	movs	r3, r0
 80011d2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d4:	e008      	b.n	80011e8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011d6:	f7ff fb27 	bl	8000828 <HAL_GetTick>
 80011da:	0002      	movs	r2, r0
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b64      	cmp	r3, #100	; 0x64
 80011e2:	d901      	bls.n	80011e8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e1f5      	b.n	80015d4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <HAL_RCC_OscConfig+0x344>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	2380      	movs	r3, #128	; 0x80
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	4013      	ands	r3, r2
 80011f2:	d0f0      	beq.n	80011d6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d10f      	bne.n	800121c <HAL_RCC_OscConfig+0x348>
 80011fc:	4b03      	ldr	r3, [pc, #12]	; (800120c <HAL_RCC_OscConfig+0x338>)
 80011fe:	6a1a      	ldr	r2, [r3, #32]
 8001200:	4b02      	ldr	r3, [pc, #8]	; (800120c <HAL_RCC_OscConfig+0x338>)
 8001202:	2101      	movs	r1, #1
 8001204:	430a      	orrs	r2, r1
 8001206:	621a      	str	r2, [r3, #32]
 8001208:	e036      	b.n	8001278 <HAL_RCC_OscConfig+0x3a4>
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	40021000 	.word	0x40021000
 8001210:	fffeffff 	.word	0xfffeffff
 8001214:	fffbffff 	.word	0xfffbffff
 8001218:	40007000 	.word	0x40007000
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d10c      	bne.n	800123e <HAL_RCC_OscConfig+0x36a>
 8001224:	4bca      	ldr	r3, [pc, #808]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 8001226:	6a1a      	ldr	r2, [r3, #32]
 8001228:	4bc9      	ldr	r3, [pc, #804]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 800122a:	2101      	movs	r1, #1
 800122c:	438a      	bics	r2, r1
 800122e:	621a      	str	r2, [r3, #32]
 8001230:	4bc7      	ldr	r3, [pc, #796]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 8001232:	6a1a      	ldr	r2, [r3, #32]
 8001234:	4bc6      	ldr	r3, [pc, #792]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 8001236:	2104      	movs	r1, #4
 8001238:	438a      	bics	r2, r1
 800123a:	621a      	str	r2, [r3, #32]
 800123c:	e01c      	b.n	8001278 <HAL_RCC_OscConfig+0x3a4>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	2b05      	cmp	r3, #5
 8001244:	d10c      	bne.n	8001260 <HAL_RCC_OscConfig+0x38c>
 8001246:	4bc2      	ldr	r3, [pc, #776]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 8001248:	6a1a      	ldr	r2, [r3, #32]
 800124a:	4bc1      	ldr	r3, [pc, #772]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 800124c:	2104      	movs	r1, #4
 800124e:	430a      	orrs	r2, r1
 8001250:	621a      	str	r2, [r3, #32]
 8001252:	4bbf      	ldr	r3, [pc, #764]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 8001254:	6a1a      	ldr	r2, [r3, #32]
 8001256:	4bbe      	ldr	r3, [pc, #760]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 8001258:	2101      	movs	r1, #1
 800125a:	430a      	orrs	r2, r1
 800125c:	621a      	str	r2, [r3, #32]
 800125e:	e00b      	b.n	8001278 <HAL_RCC_OscConfig+0x3a4>
 8001260:	4bbb      	ldr	r3, [pc, #748]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 8001262:	6a1a      	ldr	r2, [r3, #32]
 8001264:	4bba      	ldr	r3, [pc, #744]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 8001266:	2101      	movs	r1, #1
 8001268:	438a      	bics	r2, r1
 800126a:	621a      	str	r2, [r3, #32]
 800126c:	4bb8      	ldr	r3, [pc, #736]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 800126e:	6a1a      	ldr	r2, [r3, #32]
 8001270:	4bb7      	ldr	r3, [pc, #732]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 8001272:	2104      	movs	r1, #4
 8001274:	438a      	bics	r2, r1
 8001276:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d014      	beq.n	80012aa <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001280:	f7ff fad2 	bl	8000828 <HAL_GetTick>
 8001284:	0003      	movs	r3, r0
 8001286:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001288:	e009      	b.n	800129e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800128a:	f7ff facd 	bl	8000828 <HAL_GetTick>
 800128e:	0002      	movs	r2, r0
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	4aaf      	ldr	r2, [pc, #700]	; (8001554 <HAL_RCC_OscConfig+0x680>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e19a      	b.n	80015d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800129e:	4bac      	ldr	r3, [pc, #688]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 80012a0:	6a1b      	ldr	r3, [r3, #32]
 80012a2:	2202      	movs	r2, #2
 80012a4:	4013      	ands	r3, r2
 80012a6:	d0f0      	beq.n	800128a <HAL_RCC_OscConfig+0x3b6>
 80012a8:	e013      	b.n	80012d2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012aa:	f7ff fabd 	bl	8000828 <HAL_GetTick>
 80012ae:	0003      	movs	r3, r0
 80012b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012b2:	e009      	b.n	80012c8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012b4:	f7ff fab8 	bl	8000828 <HAL_GetTick>
 80012b8:	0002      	movs	r2, r0
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	4aa5      	ldr	r2, [pc, #660]	; (8001554 <HAL_RCC_OscConfig+0x680>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e185      	b.n	80015d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012c8:	4ba1      	ldr	r3, [pc, #644]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 80012ca:	6a1b      	ldr	r3, [r3, #32]
 80012cc:	2202      	movs	r2, #2
 80012ce:	4013      	ands	r3, r2
 80012d0:	d1f0      	bne.n	80012b4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80012d2:	231f      	movs	r3, #31
 80012d4:	18fb      	adds	r3, r7, r3
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d105      	bne.n	80012e8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012dc:	4b9c      	ldr	r3, [pc, #624]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 80012de:	69da      	ldr	r2, [r3, #28]
 80012e0:	4b9b      	ldr	r3, [pc, #620]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 80012e2:	499d      	ldr	r1, [pc, #628]	; (8001558 <HAL_RCC_OscConfig+0x684>)
 80012e4:	400a      	ands	r2, r1
 80012e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2210      	movs	r2, #16
 80012ee:	4013      	ands	r3, r2
 80012f0:	d063      	beq.n	80013ba <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d12a      	bne.n	8001350 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80012fa:	4b95      	ldr	r3, [pc, #596]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 80012fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012fe:	4b94      	ldr	r3, [pc, #592]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 8001300:	2104      	movs	r1, #4
 8001302:	430a      	orrs	r2, r1
 8001304:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001306:	4b92      	ldr	r3, [pc, #584]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 8001308:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800130a:	4b91      	ldr	r3, [pc, #580]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 800130c:	2101      	movs	r1, #1
 800130e:	430a      	orrs	r2, r1
 8001310:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001312:	f7ff fa89 	bl	8000828 <HAL_GetTick>
 8001316:	0003      	movs	r3, r0
 8001318:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800131c:	f7ff fa84 	bl	8000828 <HAL_GetTick>
 8001320:	0002      	movs	r2, r0
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e152      	b.n	80015d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800132e:	4b88      	ldr	r3, [pc, #544]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 8001330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001332:	2202      	movs	r2, #2
 8001334:	4013      	ands	r3, r2
 8001336:	d0f1      	beq.n	800131c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001338:	4b85      	ldr	r3, [pc, #532]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 800133a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800133c:	22f8      	movs	r2, #248	; 0xf8
 800133e:	4393      	bics	r3, r2
 8001340:	0019      	movs	r1, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	00da      	lsls	r2, r3, #3
 8001348:	4b81      	ldr	r3, [pc, #516]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 800134a:	430a      	orrs	r2, r1
 800134c:	635a      	str	r2, [r3, #52]	; 0x34
 800134e:	e034      	b.n	80013ba <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	3305      	adds	r3, #5
 8001356:	d111      	bne.n	800137c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001358:	4b7d      	ldr	r3, [pc, #500]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 800135a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800135c:	4b7c      	ldr	r3, [pc, #496]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 800135e:	2104      	movs	r1, #4
 8001360:	438a      	bics	r2, r1
 8001362:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001364:	4b7a      	ldr	r3, [pc, #488]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 8001366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001368:	22f8      	movs	r2, #248	; 0xf8
 800136a:	4393      	bics	r3, r2
 800136c:	0019      	movs	r1, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	00da      	lsls	r2, r3, #3
 8001374:	4b76      	ldr	r3, [pc, #472]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 8001376:	430a      	orrs	r2, r1
 8001378:	635a      	str	r2, [r3, #52]	; 0x34
 800137a:	e01e      	b.n	80013ba <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800137c:	4b74      	ldr	r3, [pc, #464]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 800137e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001380:	4b73      	ldr	r3, [pc, #460]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 8001382:	2104      	movs	r1, #4
 8001384:	430a      	orrs	r2, r1
 8001386:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001388:	4b71      	ldr	r3, [pc, #452]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 800138a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800138c:	4b70      	ldr	r3, [pc, #448]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 800138e:	2101      	movs	r1, #1
 8001390:	438a      	bics	r2, r1
 8001392:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001394:	f7ff fa48 	bl	8000828 <HAL_GetTick>
 8001398:	0003      	movs	r3, r0
 800139a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800139e:	f7ff fa43 	bl	8000828 <HAL_GetTick>
 80013a2:	0002      	movs	r2, r0
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e111      	b.n	80015d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013b0:	4b67      	ldr	r3, [pc, #412]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 80013b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b4:	2202      	movs	r2, #2
 80013b6:	4013      	ands	r3, r2
 80013b8:	d1f1      	bne.n	800139e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2220      	movs	r2, #32
 80013c0:	4013      	ands	r3, r2
 80013c2:	d05c      	beq.n	800147e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80013c4:	4b62      	ldr	r3, [pc, #392]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	220c      	movs	r2, #12
 80013ca:	4013      	ands	r3, r2
 80013cc:	2b0c      	cmp	r3, #12
 80013ce:	d00e      	beq.n	80013ee <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80013d0:	4b5f      	ldr	r3, [pc, #380]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	220c      	movs	r2, #12
 80013d6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80013d8:	2b08      	cmp	r3, #8
 80013da:	d114      	bne.n	8001406 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80013dc:	4b5c      	ldr	r3, [pc, #368]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	23c0      	movs	r3, #192	; 0xc0
 80013e2:	025b      	lsls	r3, r3, #9
 80013e4:	401a      	ands	r2, r3
 80013e6:	23c0      	movs	r3, #192	; 0xc0
 80013e8:	025b      	lsls	r3, r3, #9
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d10b      	bne.n	8001406 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80013ee:	4b58      	ldr	r3, [pc, #352]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 80013f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013f2:	2380      	movs	r3, #128	; 0x80
 80013f4:	025b      	lsls	r3, r3, #9
 80013f6:	4013      	ands	r3, r2
 80013f8:	d040      	beq.n	800147c <HAL_RCC_OscConfig+0x5a8>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a1b      	ldr	r3, [r3, #32]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d03c      	beq.n	800147c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e0e6      	b.n	80015d4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a1b      	ldr	r3, [r3, #32]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d01b      	beq.n	8001446 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800140e:	4b50      	ldr	r3, [pc, #320]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 8001410:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001412:	4b4f      	ldr	r3, [pc, #316]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 8001414:	2180      	movs	r1, #128	; 0x80
 8001416:	0249      	lsls	r1, r1, #9
 8001418:	430a      	orrs	r2, r1
 800141a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141c:	f7ff fa04 	bl	8000828 <HAL_GetTick>
 8001420:	0003      	movs	r3, r0
 8001422:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001426:	f7ff f9ff 	bl	8000828 <HAL_GetTick>
 800142a:	0002      	movs	r2, r0
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e0cd      	b.n	80015d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001438:	4b45      	ldr	r3, [pc, #276]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 800143a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800143c:	2380      	movs	r3, #128	; 0x80
 800143e:	025b      	lsls	r3, r3, #9
 8001440:	4013      	ands	r3, r2
 8001442:	d0f0      	beq.n	8001426 <HAL_RCC_OscConfig+0x552>
 8001444:	e01b      	b.n	800147e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001446:	4b42      	ldr	r3, [pc, #264]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 8001448:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800144a:	4b41      	ldr	r3, [pc, #260]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 800144c:	4943      	ldr	r1, [pc, #268]	; (800155c <HAL_RCC_OscConfig+0x688>)
 800144e:	400a      	ands	r2, r1
 8001450:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001452:	f7ff f9e9 	bl	8000828 <HAL_GetTick>
 8001456:	0003      	movs	r3, r0
 8001458:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800145c:	f7ff f9e4 	bl	8000828 <HAL_GetTick>
 8001460:	0002      	movs	r2, r0
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e0b2      	b.n	80015d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800146e:	4b38      	ldr	r3, [pc, #224]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 8001470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001472:	2380      	movs	r3, #128	; 0x80
 8001474:	025b      	lsls	r3, r3, #9
 8001476:	4013      	ands	r3, r2
 8001478:	d1f0      	bne.n	800145c <HAL_RCC_OscConfig+0x588>
 800147a:	e000      	b.n	800147e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800147c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001482:	2b00      	cmp	r3, #0
 8001484:	d100      	bne.n	8001488 <HAL_RCC_OscConfig+0x5b4>
 8001486:	e0a4      	b.n	80015d2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001488:	4b31      	ldr	r3, [pc, #196]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	220c      	movs	r2, #12
 800148e:	4013      	ands	r3, r2
 8001490:	2b08      	cmp	r3, #8
 8001492:	d100      	bne.n	8001496 <HAL_RCC_OscConfig+0x5c2>
 8001494:	e078      	b.n	8001588 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149a:	2b02      	cmp	r3, #2
 800149c:	d14c      	bne.n	8001538 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149e:	4b2c      	ldr	r3, [pc, #176]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 80014a4:	492e      	ldr	r1, [pc, #184]	; (8001560 <HAL_RCC_OscConfig+0x68c>)
 80014a6:	400a      	ands	r2, r1
 80014a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014aa:	f7ff f9bd 	bl	8000828 <HAL_GetTick>
 80014ae:	0003      	movs	r3, r0
 80014b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b4:	f7ff f9b8 	bl	8000828 <HAL_GetTick>
 80014b8:	0002      	movs	r2, r0
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e086      	b.n	80015d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014c6:	4b22      	ldr	r3, [pc, #136]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	2380      	movs	r3, #128	; 0x80
 80014cc:	049b      	lsls	r3, r3, #18
 80014ce:	4013      	ands	r3, r2
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014d2:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 80014d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d6:	220f      	movs	r2, #15
 80014d8:	4393      	bics	r3, r2
 80014da:	0019      	movs	r1, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014e0:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 80014e2:	430a      	orrs	r2, r1
 80014e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80014e6:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	4a1e      	ldr	r2, [pc, #120]	; (8001564 <HAL_RCC_OscConfig+0x690>)
 80014ec:	4013      	ands	r3, r2
 80014ee:	0019      	movs	r1, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f8:	431a      	orrs	r2, r3
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 80014fc:	430a      	orrs	r2, r1
 80014fe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001500:	4b13      	ldr	r3, [pc, #76]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 8001506:	2180      	movs	r1, #128	; 0x80
 8001508:	0449      	lsls	r1, r1, #17
 800150a:	430a      	orrs	r2, r1
 800150c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150e:	f7ff f98b 	bl	8000828 <HAL_GetTick>
 8001512:	0003      	movs	r3, r0
 8001514:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001518:	f7ff f986 	bl	8000828 <HAL_GetTick>
 800151c:	0002      	movs	r2, r0
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e054      	b.n	80015d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	2380      	movs	r3, #128	; 0x80
 8001530:	049b      	lsls	r3, r3, #18
 8001532:	4013      	ands	r3, r2
 8001534:	d0f0      	beq.n	8001518 <HAL_RCC_OscConfig+0x644>
 8001536:	e04c      	b.n	80015d2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4b04      	ldr	r3, [pc, #16]	; (8001550 <HAL_RCC_OscConfig+0x67c>)
 800153e:	4908      	ldr	r1, [pc, #32]	; (8001560 <HAL_RCC_OscConfig+0x68c>)
 8001540:	400a      	ands	r2, r1
 8001542:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001544:	f7ff f970 	bl	8000828 <HAL_GetTick>
 8001548:	0003      	movs	r3, r0
 800154a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800154c:	e015      	b.n	800157a <HAL_RCC_OscConfig+0x6a6>
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	40021000 	.word	0x40021000
 8001554:	00001388 	.word	0x00001388
 8001558:	efffffff 	.word	0xefffffff
 800155c:	fffeffff 	.word	0xfffeffff
 8001560:	feffffff 	.word	0xfeffffff
 8001564:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001568:	f7ff f95e 	bl	8000828 <HAL_GetTick>
 800156c:	0002      	movs	r2, r0
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e02c      	b.n	80015d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800157a:	4b18      	ldr	r3, [pc, #96]	; (80015dc <HAL_RCC_OscConfig+0x708>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	2380      	movs	r3, #128	; 0x80
 8001580:	049b      	lsls	r3, r3, #18
 8001582:	4013      	ands	r3, r2
 8001584:	d1f0      	bne.n	8001568 <HAL_RCC_OscConfig+0x694>
 8001586:	e024      	b.n	80015d2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158c:	2b01      	cmp	r3, #1
 800158e:	d101      	bne.n	8001594 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e01f      	b.n	80015d4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <HAL_RCC_OscConfig+0x708>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <HAL_RCC_OscConfig+0x708>)
 800159c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	23c0      	movs	r3, #192	; 0xc0
 80015a4:	025b      	lsls	r3, r3, #9
 80015a6:	401a      	ands	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d10e      	bne.n	80015ce <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	220f      	movs	r2, #15
 80015b4:	401a      	ands	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d107      	bne.n	80015ce <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	23f0      	movs	r3, #240	; 0xf0
 80015c2:	039b      	lsls	r3, r3, #14
 80015c4:	401a      	ands	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d001      	beq.n	80015d2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e000      	b.n	80015d4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	0018      	movs	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	b008      	add	sp, #32
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40021000 	.word	0x40021000

080015e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d101      	bne.n	80015f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e0bf      	b.n	8001774 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015f4:	4b61      	ldr	r3, [pc, #388]	; (800177c <HAL_RCC_ClockConfig+0x19c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2201      	movs	r2, #1
 80015fa:	4013      	ands	r3, r2
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d911      	bls.n	8001626 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001602:	4b5e      	ldr	r3, [pc, #376]	; (800177c <HAL_RCC_ClockConfig+0x19c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2201      	movs	r2, #1
 8001608:	4393      	bics	r3, r2
 800160a:	0019      	movs	r1, r3
 800160c:	4b5b      	ldr	r3, [pc, #364]	; (800177c <HAL_RCC_ClockConfig+0x19c>)
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	430a      	orrs	r2, r1
 8001612:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001614:	4b59      	ldr	r3, [pc, #356]	; (800177c <HAL_RCC_ClockConfig+0x19c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2201      	movs	r2, #1
 800161a:	4013      	ands	r3, r2
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	429a      	cmp	r2, r3
 8001620:	d001      	beq.n	8001626 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e0a6      	b.n	8001774 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2202      	movs	r2, #2
 800162c:	4013      	ands	r3, r2
 800162e:	d015      	beq.n	800165c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2204      	movs	r2, #4
 8001636:	4013      	ands	r3, r2
 8001638:	d006      	beq.n	8001648 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800163a:	4b51      	ldr	r3, [pc, #324]	; (8001780 <HAL_RCC_ClockConfig+0x1a0>)
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	4b50      	ldr	r3, [pc, #320]	; (8001780 <HAL_RCC_ClockConfig+0x1a0>)
 8001640:	21e0      	movs	r1, #224	; 0xe0
 8001642:	00c9      	lsls	r1, r1, #3
 8001644:	430a      	orrs	r2, r1
 8001646:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001648:	4b4d      	ldr	r3, [pc, #308]	; (8001780 <HAL_RCC_ClockConfig+0x1a0>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	22f0      	movs	r2, #240	; 0xf0
 800164e:	4393      	bics	r3, r2
 8001650:	0019      	movs	r1, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	4b4a      	ldr	r3, [pc, #296]	; (8001780 <HAL_RCC_ClockConfig+0x1a0>)
 8001658:	430a      	orrs	r2, r1
 800165a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2201      	movs	r2, #1
 8001662:	4013      	ands	r3, r2
 8001664:	d04c      	beq.n	8001700 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d107      	bne.n	800167e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166e:	4b44      	ldr	r3, [pc, #272]	; (8001780 <HAL_RCC_ClockConfig+0x1a0>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	2380      	movs	r3, #128	; 0x80
 8001674:	029b      	lsls	r3, r3, #10
 8001676:	4013      	ands	r3, r2
 8001678:	d120      	bne.n	80016bc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e07a      	b.n	8001774 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2b02      	cmp	r3, #2
 8001684:	d107      	bne.n	8001696 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001686:	4b3e      	ldr	r3, [pc, #248]	; (8001780 <HAL_RCC_ClockConfig+0x1a0>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	2380      	movs	r3, #128	; 0x80
 800168c:	049b      	lsls	r3, r3, #18
 800168e:	4013      	ands	r3, r2
 8001690:	d114      	bne.n	80016bc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e06e      	b.n	8001774 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b03      	cmp	r3, #3
 800169c:	d107      	bne.n	80016ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800169e:	4b38      	ldr	r3, [pc, #224]	; (8001780 <HAL_RCC_ClockConfig+0x1a0>)
 80016a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016a2:	2380      	movs	r3, #128	; 0x80
 80016a4:	025b      	lsls	r3, r3, #9
 80016a6:	4013      	ands	r3, r2
 80016a8:	d108      	bne.n	80016bc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e062      	b.n	8001774 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ae:	4b34      	ldr	r3, [pc, #208]	; (8001780 <HAL_RCC_ClockConfig+0x1a0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2202      	movs	r2, #2
 80016b4:	4013      	ands	r3, r2
 80016b6:	d101      	bne.n	80016bc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e05b      	b.n	8001774 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016bc:	4b30      	ldr	r3, [pc, #192]	; (8001780 <HAL_RCC_ClockConfig+0x1a0>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2203      	movs	r2, #3
 80016c2:	4393      	bics	r3, r2
 80016c4:	0019      	movs	r1, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	4b2d      	ldr	r3, [pc, #180]	; (8001780 <HAL_RCC_ClockConfig+0x1a0>)
 80016cc:	430a      	orrs	r2, r1
 80016ce:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016d0:	f7ff f8aa 	bl	8000828 <HAL_GetTick>
 80016d4:	0003      	movs	r3, r0
 80016d6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d8:	e009      	b.n	80016ee <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016da:	f7ff f8a5 	bl	8000828 <HAL_GetTick>
 80016de:	0002      	movs	r2, r0
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	4a27      	ldr	r2, [pc, #156]	; (8001784 <HAL_RCC_ClockConfig+0x1a4>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e042      	b.n	8001774 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ee:	4b24      	ldr	r3, [pc, #144]	; (8001780 <HAL_RCC_ClockConfig+0x1a0>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	220c      	movs	r2, #12
 80016f4:	401a      	ands	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d1ec      	bne.n	80016da <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001700:	4b1e      	ldr	r3, [pc, #120]	; (800177c <HAL_RCC_ClockConfig+0x19c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2201      	movs	r2, #1
 8001706:	4013      	ands	r3, r2
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	429a      	cmp	r2, r3
 800170c:	d211      	bcs.n	8001732 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170e:	4b1b      	ldr	r3, [pc, #108]	; (800177c <HAL_RCC_ClockConfig+0x19c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2201      	movs	r2, #1
 8001714:	4393      	bics	r3, r2
 8001716:	0019      	movs	r1, r3
 8001718:	4b18      	ldr	r3, [pc, #96]	; (800177c <HAL_RCC_ClockConfig+0x19c>)
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001720:	4b16      	ldr	r3, [pc, #88]	; (800177c <HAL_RCC_ClockConfig+0x19c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2201      	movs	r2, #1
 8001726:	4013      	ands	r3, r2
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d001      	beq.n	8001732 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e020      	b.n	8001774 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2204      	movs	r2, #4
 8001738:	4013      	ands	r3, r2
 800173a:	d009      	beq.n	8001750 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800173c:	4b10      	ldr	r3, [pc, #64]	; (8001780 <HAL_RCC_ClockConfig+0x1a0>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	4a11      	ldr	r2, [pc, #68]	; (8001788 <HAL_RCC_ClockConfig+0x1a8>)
 8001742:	4013      	ands	r3, r2
 8001744:	0019      	movs	r1, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68da      	ldr	r2, [r3, #12]
 800174a:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <HAL_RCC_ClockConfig+0x1a0>)
 800174c:	430a      	orrs	r2, r1
 800174e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001750:	f000 f820 	bl	8001794 <HAL_RCC_GetSysClockFreq>
 8001754:	0001      	movs	r1, r0
 8001756:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <HAL_RCC_ClockConfig+0x1a0>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	091b      	lsrs	r3, r3, #4
 800175c:	220f      	movs	r2, #15
 800175e:	4013      	ands	r3, r2
 8001760:	4a0a      	ldr	r2, [pc, #40]	; (800178c <HAL_RCC_ClockConfig+0x1ac>)
 8001762:	5cd3      	ldrb	r3, [r2, r3]
 8001764:	000a      	movs	r2, r1
 8001766:	40da      	lsrs	r2, r3
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <HAL_RCC_ClockConfig+0x1b0>)
 800176a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800176c:	2000      	movs	r0, #0
 800176e:	f7ff f815 	bl	800079c <HAL_InitTick>
  
  return HAL_OK;
 8001772:	2300      	movs	r3, #0
}
 8001774:	0018      	movs	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	b004      	add	sp, #16
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40022000 	.word	0x40022000
 8001780:	40021000 	.word	0x40021000
 8001784:	00001388 	.word	0x00001388
 8001788:	fffff8ff 	.word	0xfffff8ff
 800178c:	08002794 	.word	0x08002794
 8001790:	20000000 	.word	0x20000000

08001794 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001794:	b590      	push	{r4, r7, lr}
 8001796:	b08f      	sub	sp, #60	; 0x3c
 8001798:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800179a:	2314      	movs	r3, #20
 800179c:	18fb      	adds	r3, r7, r3
 800179e:	4a38      	ldr	r2, [pc, #224]	; (8001880 <HAL_RCC_GetSysClockFreq+0xec>)
 80017a0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80017a2:	c313      	stmia	r3!, {r0, r1, r4}
 80017a4:	6812      	ldr	r2, [r2, #0]
 80017a6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	4a36      	ldr	r2, [pc, #216]	; (8001884 <HAL_RCC_GetSysClockFreq+0xf0>)
 80017ac:	ca13      	ldmia	r2!, {r0, r1, r4}
 80017ae:	c313      	stmia	r3!, {r0, r1, r4}
 80017b0:	6812      	ldr	r2, [r2, #0]
 80017b2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017b8:	2300      	movs	r3, #0
 80017ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80017bc:	2300      	movs	r3, #0
 80017be:	637b      	str	r3, [r7, #52]	; 0x34
 80017c0:	2300      	movs	r3, #0
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80017c8:	4b2f      	ldr	r3, [pc, #188]	; (8001888 <HAL_RCC_GetSysClockFreq+0xf4>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d0:	220c      	movs	r2, #12
 80017d2:	4013      	ands	r3, r2
 80017d4:	2b0c      	cmp	r3, #12
 80017d6:	d047      	beq.n	8001868 <HAL_RCC_GetSysClockFreq+0xd4>
 80017d8:	d849      	bhi.n	800186e <HAL_RCC_GetSysClockFreq+0xda>
 80017da:	2b04      	cmp	r3, #4
 80017dc:	d002      	beq.n	80017e4 <HAL_RCC_GetSysClockFreq+0x50>
 80017de:	2b08      	cmp	r3, #8
 80017e0:	d003      	beq.n	80017ea <HAL_RCC_GetSysClockFreq+0x56>
 80017e2:	e044      	b.n	800186e <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017e4:	4b29      	ldr	r3, [pc, #164]	; (800188c <HAL_RCC_GetSysClockFreq+0xf8>)
 80017e6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017e8:	e044      	b.n	8001874 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80017ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ec:	0c9b      	lsrs	r3, r3, #18
 80017ee:	220f      	movs	r2, #15
 80017f0:	4013      	ands	r3, r2
 80017f2:	2214      	movs	r2, #20
 80017f4:	18ba      	adds	r2, r7, r2
 80017f6:	5cd3      	ldrb	r3, [r2, r3]
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80017fa:	4b23      	ldr	r3, [pc, #140]	; (8001888 <HAL_RCC_GetSysClockFreq+0xf4>)
 80017fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fe:	220f      	movs	r2, #15
 8001800:	4013      	ands	r3, r2
 8001802:	1d3a      	adds	r2, r7, #4
 8001804:	5cd3      	ldrb	r3, [r2, r3]
 8001806:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001808:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800180a:	23c0      	movs	r3, #192	; 0xc0
 800180c:	025b      	lsls	r3, r3, #9
 800180e:	401a      	ands	r2, r3
 8001810:	2380      	movs	r3, #128	; 0x80
 8001812:	025b      	lsls	r3, r3, #9
 8001814:	429a      	cmp	r2, r3
 8001816:	d109      	bne.n	800182c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001818:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800181a:	481c      	ldr	r0, [pc, #112]	; (800188c <HAL_RCC_GetSysClockFreq+0xf8>)
 800181c:	f7fe fc74 	bl	8000108 <__udivsi3>
 8001820:	0003      	movs	r3, r0
 8001822:	001a      	movs	r2, r3
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	4353      	muls	r3, r2
 8001828:	637b      	str	r3, [r7, #52]	; 0x34
 800182a:	e01a      	b.n	8001862 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800182c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800182e:	23c0      	movs	r3, #192	; 0xc0
 8001830:	025b      	lsls	r3, r3, #9
 8001832:	401a      	ands	r2, r3
 8001834:	23c0      	movs	r3, #192	; 0xc0
 8001836:	025b      	lsls	r3, r3, #9
 8001838:	429a      	cmp	r2, r3
 800183a:	d109      	bne.n	8001850 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800183c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800183e:	4814      	ldr	r0, [pc, #80]	; (8001890 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001840:	f7fe fc62 	bl	8000108 <__udivsi3>
 8001844:	0003      	movs	r3, r0
 8001846:	001a      	movs	r2, r3
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	4353      	muls	r3, r2
 800184c:	637b      	str	r3, [r7, #52]	; 0x34
 800184e:	e008      	b.n	8001862 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001850:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001852:	480e      	ldr	r0, [pc, #56]	; (800188c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001854:	f7fe fc58 	bl	8000108 <__udivsi3>
 8001858:	0003      	movs	r3, r0
 800185a:	001a      	movs	r2, r3
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	4353      	muls	r3, r2
 8001860:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001864:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001866:	e005      	b.n	8001874 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001868:	4b09      	ldr	r3, [pc, #36]	; (8001890 <HAL_RCC_GetSysClockFreq+0xfc>)
 800186a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800186c:	e002      	b.n	8001874 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800186e:	4b07      	ldr	r3, [pc, #28]	; (800188c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001870:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001872:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001876:	0018      	movs	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	b00f      	add	sp, #60	; 0x3c
 800187c:	bd90      	pop	{r4, r7, pc}
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	08002774 	.word	0x08002774
 8001884:	08002784 	.word	0x08002784
 8001888:	40021000 	.word	0x40021000
 800188c:	007a1200 	.word	0x007a1200
 8001890:	02dc6c00 	.word	0x02dc6c00

08001894 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001898:	4b02      	ldr	r3, [pc, #8]	; (80018a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	0018      	movs	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	46c0      	nop			; (mov r8, r8)
 80018a4:	20000000 	.word	0x20000000

080018a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80018ac:	f7ff fff2 	bl	8001894 <HAL_RCC_GetHCLKFreq>
 80018b0:	0001      	movs	r1, r0
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	0a1b      	lsrs	r3, r3, #8
 80018b8:	2207      	movs	r2, #7
 80018ba:	4013      	ands	r3, r2
 80018bc:	4a04      	ldr	r2, [pc, #16]	; (80018d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80018be:	5cd3      	ldrb	r3, [r2, r3]
 80018c0:	40d9      	lsrs	r1, r3
 80018c2:	000b      	movs	r3, r1
}    
 80018c4:	0018      	movs	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	46c0      	nop			; (mov r8, r8)
 80018cc:	40021000 	.word	0x40021000
 80018d0:	080027a4 	.word	0x080027a4

080018d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e042      	b.n	800196c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	223d      	movs	r2, #61	; 0x3d
 80018ea:	5c9b      	ldrb	r3, [r3, r2]
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d107      	bne.n	8001902 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	223c      	movs	r2, #60	; 0x3c
 80018f6:	2100      	movs	r1, #0
 80018f8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	0018      	movs	r0, r3
 80018fe:	f7fe fdeb 	bl	80004d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	223d      	movs	r2, #61	; 0x3d
 8001906:	2102      	movs	r1, #2
 8001908:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3304      	adds	r3, #4
 8001912:	0019      	movs	r1, r3
 8001914:	0010      	movs	r0, r2
 8001916:	f000 f8f3 	bl	8001b00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2246      	movs	r2, #70	; 0x46
 800191e:	2101      	movs	r1, #1
 8001920:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	223e      	movs	r2, #62	; 0x3e
 8001926:	2101      	movs	r1, #1
 8001928:	5499      	strb	r1, [r3, r2]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	223f      	movs	r2, #63	; 0x3f
 800192e:	2101      	movs	r1, #1
 8001930:	5499      	strb	r1, [r3, r2]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2240      	movs	r2, #64	; 0x40
 8001936:	2101      	movs	r1, #1
 8001938:	5499      	strb	r1, [r3, r2]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2241      	movs	r2, #65	; 0x41
 800193e:	2101      	movs	r1, #1
 8001940:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2242      	movs	r2, #66	; 0x42
 8001946:	2101      	movs	r1, #1
 8001948:	5499      	strb	r1, [r3, r2]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2243      	movs	r2, #67	; 0x43
 800194e:	2101      	movs	r1, #1
 8001950:	5499      	strb	r1, [r3, r2]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2244      	movs	r2, #68	; 0x44
 8001956:	2101      	movs	r1, #1
 8001958:	5499      	strb	r1, [r3, r2]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2245      	movs	r2, #69	; 0x45
 800195e:	2101      	movs	r1, #1
 8001960:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	223d      	movs	r2, #61	; 0x3d
 8001966:	2101      	movs	r1, #1
 8001968:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	0018      	movs	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	b002      	add	sp, #8
 8001972:	bd80      	pop	{r7, pc}

08001974 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001980:	2317      	movs	r3, #23
 8001982:	18fb      	adds	r3, r7, r3
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	223c      	movs	r2, #60	; 0x3c
 800198c:	5c9b      	ldrb	r3, [r3, r2]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d101      	bne.n	8001996 <HAL_TIM_PWM_ConfigChannel+0x22>
 8001992:	2302      	movs	r3, #2
 8001994:	e0ad      	b.n	8001af2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	223c      	movs	r2, #60	; 0x3c
 800199a:	2101      	movs	r1, #1
 800199c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b0c      	cmp	r3, #12
 80019a2:	d100      	bne.n	80019a6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80019a4:	e076      	b.n	8001a94 <HAL_TIM_PWM_ConfigChannel+0x120>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b0c      	cmp	r3, #12
 80019aa:	d900      	bls.n	80019ae <HAL_TIM_PWM_ConfigChannel+0x3a>
 80019ac:	e095      	b.n	8001ada <HAL_TIM_PWM_ConfigChannel+0x166>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b08      	cmp	r3, #8
 80019b2:	d04e      	beq.n	8001a52 <HAL_TIM_PWM_ConfigChannel+0xde>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b08      	cmp	r3, #8
 80019b8:	d900      	bls.n	80019bc <HAL_TIM_PWM_ConfigChannel+0x48>
 80019ba:	e08e      	b.n	8001ada <HAL_TIM_PWM_ConfigChannel+0x166>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_TIM_PWM_ConfigChannel+0x56>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b04      	cmp	r3, #4
 80019c6:	d021      	beq.n	8001a0c <HAL_TIM_PWM_ConfigChannel+0x98>
 80019c8:	e087      	b.n	8001ada <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	0011      	movs	r1, r2
 80019d2:	0018      	movs	r0, r3
 80019d4:	f000 f90a 	bl	8001bec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	699a      	ldr	r2, [r3, #24]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2108      	movs	r1, #8
 80019e4:	430a      	orrs	r2, r1
 80019e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	699a      	ldr	r2, [r3, #24]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2104      	movs	r1, #4
 80019f4:	438a      	bics	r2, r1
 80019f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6999      	ldr	r1, [r3, #24]
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	691a      	ldr	r2, [r3, #16]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	430a      	orrs	r2, r1
 8001a08:	619a      	str	r2, [r3, #24]
      break;
 8001a0a:	e06b      	b.n	8001ae4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68ba      	ldr	r2, [r7, #8]
 8001a12:	0011      	movs	r1, r2
 8001a14:	0018      	movs	r0, r3
 8001a16:	f000 f967 	bl	8001ce8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	699a      	ldr	r2, [r3, #24]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2180      	movs	r1, #128	; 0x80
 8001a26:	0109      	lsls	r1, r1, #4
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	699a      	ldr	r2, [r3, #24]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4931      	ldr	r1, [pc, #196]	; (8001afc <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001a38:	400a      	ands	r2, r1
 8001a3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6999      	ldr	r1, [r3, #24]
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	021a      	lsls	r2, r3, #8
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	619a      	str	r2, [r3, #24]
      break;
 8001a50:	e048      	b.n	8001ae4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	0011      	movs	r1, r2
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f000 f9c2 	bl	8001de4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	69da      	ldr	r2, [r3, #28]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2108      	movs	r1, #8
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	69da      	ldr	r2, [r3, #28]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2104      	movs	r1, #4
 8001a7c:	438a      	bics	r2, r1
 8001a7e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	69d9      	ldr	r1, [r3, #28]
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	691a      	ldr	r2, [r3, #16]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	61da      	str	r2, [r3, #28]
      break;
 8001a92:	e027      	b.n	8001ae4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68ba      	ldr	r2, [r7, #8]
 8001a9a:	0011      	movs	r1, r2
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f000 fa21 	bl	8001ee4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	69da      	ldr	r2, [r3, #28]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2180      	movs	r1, #128	; 0x80
 8001aae:	0109      	lsls	r1, r1, #4
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	69da      	ldr	r2, [r3, #28]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	490f      	ldr	r1, [pc, #60]	; (8001afc <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001ac0:	400a      	ands	r2, r1
 8001ac2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	69d9      	ldr	r1, [r3, #28]
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	021a      	lsls	r2, r3, #8
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	61da      	str	r2, [r3, #28]
      break;
 8001ad8:	e004      	b.n	8001ae4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8001ada:	2317      	movs	r3, #23
 8001adc:	18fb      	adds	r3, r7, r3
 8001ade:	2201      	movs	r2, #1
 8001ae0:	701a      	strb	r2, [r3, #0]
      break;
 8001ae2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	223c      	movs	r2, #60	; 0x3c
 8001ae8:	2100      	movs	r1, #0
 8001aea:	5499      	strb	r1, [r3, r2]

  return status;
 8001aec:	2317      	movs	r3, #23
 8001aee:	18fb      	adds	r3, r7, r3
 8001af0:	781b      	ldrb	r3, [r3, #0]
}
 8001af2:	0018      	movs	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	b006      	add	sp, #24
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	46c0      	nop			; (mov r8, r8)
 8001afc:	fffffbff 	.word	0xfffffbff

08001b00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a30      	ldr	r2, [pc, #192]	; (8001bd4 <TIM_Base_SetConfig+0xd4>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d008      	beq.n	8001b2a <TIM_Base_SetConfig+0x2a>
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	2380      	movs	r3, #128	; 0x80
 8001b1c:	05db      	lsls	r3, r3, #23
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d003      	beq.n	8001b2a <TIM_Base_SetConfig+0x2a>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a2c      	ldr	r2, [pc, #176]	; (8001bd8 <TIM_Base_SetConfig+0xd8>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d108      	bne.n	8001b3c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2270      	movs	r2, #112	; 0x70
 8001b2e:	4393      	bics	r3, r2
 8001b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a25      	ldr	r2, [pc, #148]	; (8001bd4 <TIM_Base_SetConfig+0xd4>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d014      	beq.n	8001b6e <TIM_Base_SetConfig+0x6e>
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	2380      	movs	r3, #128	; 0x80
 8001b48:	05db      	lsls	r3, r3, #23
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d00f      	beq.n	8001b6e <TIM_Base_SetConfig+0x6e>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a21      	ldr	r2, [pc, #132]	; (8001bd8 <TIM_Base_SetConfig+0xd8>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d00b      	beq.n	8001b6e <TIM_Base_SetConfig+0x6e>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a20      	ldr	r2, [pc, #128]	; (8001bdc <TIM_Base_SetConfig+0xdc>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d007      	beq.n	8001b6e <TIM_Base_SetConfig+0x6e>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a1f      	ldr	r2, [pc, #124]	; (8001be0 <TIM_Base_SetConfig+0xe0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d003      	beq.n	8001b6e <TIM_Base_SetConfig+0x6e>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a1e      	ldr	r2, [pc, #120]	; (8001be4 <TIM_Base_SetConfig+0xe4>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d108      	bne.n	8001b80 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4a1d      	ldr	r2, [pc, #116]	; (8001be8 <TIM_Base_SetConfig+0xe8>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2280      	movs	r2, #128	; 0x80
 8001b84:	4393      	bics	r3, r2
 8001b86:	001a      	movs	r2, r3
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	695b      	ldr	r3, [r3, #20]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a0a      	ldr	r2, [pc, #40]	; (8001bd4 <TIM_Base_SetConfig+0xd4>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d007      	beq.n	8001bbe <TIM_Base_SetConfig+0xbe>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a0b      	ldr	r2, [pc, #44]	; (8001be0 <TIM_Base_SetConfig+0xe0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d003      	beq.n	8001bbe <TIM_Base_SetConfig+0xbe>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a0a      	ldr	r2, [pc, #40]	; (8001be4 <TIM_Base_SetConfig+0xe4>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d103      	bne.n	8001bc6 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	691a      	ldr	r2, [r3, #16]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	615a      	str	r2, [r3, #20]
}
 8001bcc:	46c0      	nop			; (mov r8, r8)
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	b004      	add	sp, #16
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40012c00 	.word	0x40012c00
 8001bd8:	40000400 	.word	0x40000400
 8001bdc:	40002000 	.word	0x40002000
 8001be0:	40014400 	.word	0x40014400
 8001be4:	40014800 	.word	0x40014800
 8001be8:	fffffcff 	.word	0xfffffcff

08001bec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	4393      	bics	r3, r2
 8001bfe:	001a      	movs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2270      	movs	r2, #112	; 0x70
 8001c1a:	4393      	bics	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2203      	movs	r2, #3
 8001c22:	4393      	bics	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	2202      	movs	r2, #2
 8001c34:	4393      	bics	r3, r2
 8001c36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a23      	ldr	r2, [pc, #140]	; (8001cd4 <TIM_OC1_SetConfig+0xe8>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d007      	beq.n	8001c5a <TIM_OC1_SetConfig+0x6e>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a22      	ldr	r2, [pc, #136]	; (8001cd8 <TIM_OC1_SetConfig+0xec>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d003      	beq.n	8001c5a <TIM_OC1_SetConfig+0x6e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a21      	ldr	r2, [pc, #132]	; (8001cdc <TIM_OC1_SetConfig+0xf0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d10c      	bne.n	8001c74 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	2208      	movs	r2, #8
 8001c5e:	4393      	bics	r3, r2
 8001c60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	2204      	movs	r2, #4
 8001c70:	4393      	bics	r3, r2
 8001c72:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a17      	ldr	r2, [pc, #92]	; (8001cd4 <TIM_OC1_SetConfig+0xe8>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d007      	beq.n	8001c8c <TIM_OC1_SetConfig+0xa0>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a16      	ldr	r2, [pc, #88]	; (8001cd8 <TIM_OC1_SetConfig+0xec>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d003      	beq.n	8001c8c <TIM_OC1_SetConfig+0xa0>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a15      	ldr	r2, [pc, #84]	; (8001cdc <TIM_OC1_SetConfig+0xf0>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d111      	bne.n	8001cb0 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	4a14      	ldr	r2, [pc, #80]	; (8001ce0 <TIM_OC1_SetConfig+0xf4>)
 8001c90:	4013      	ands	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	4a13      	ldr	r2, [pc, #76]	; (8001ce4 <TIM_OC1_SetConfig+0xf8>)
 8001c98:	4013      	ands	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	621a      	str	r2, [r3, #32]
}
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	b006      	add	sp, #24
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	40012c00 	.word	0x40012c00
 8001cd8:	40014400 	.word	0x40014400
 8001cdc:	40014800 	.word	0x40014800
 8001ce0:	fffffeff 	.word	0xfffffeff
 8001ce4:	fffffdff 	.word	0xfffffdff

08001ce8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	2210      	movs	r2, #16
 8001cf8:	4393      	bics	r3, r2
 8001cfa:	001a      	movs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	4a2c      	ldr	r2, [pc, #176]	; (8001dc8 <TIM_OC2_SetConfig+0xe0>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4a2b      	ldr	r2, [pc, #172]	; (8001dcc <TIM_OC2_SetConfig+0xe4>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	021b      	lsls	r3, r3, #8
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	2220      	movs	r2, #32
 8001d32:	4393      	bics	r3, r2
 8001d34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	011b      	lsls	r3, r3, #4
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a22      	ldr	r2, [pc, #136]	; (8001dd0 <TIM_OC2_SetConfig+0xe8>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d10d      	bne.n	8001d66 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	2280      	movs	r2, #128	; 0x80
 8001d4e:	4393      	bics	r3, r2
 8001d50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	011b      	lsls	r3, r3, #4
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	2240      	movs	r2, #64	; 0x40
 8001d62:	4393      	bics	r3, r2
 8001d64:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a19      	ldr	r2, [pc, #100]	; (8001dd0 <TIM_OC2_SetConfig+0xe8>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d007      	beq.n	8001d7e <TIM_OC2_SetConfig+0x96>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a18      	ldr	r2, [pc, #96]	; (8001dd4 <TIM_OC2_SetConfig+0xec>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d003      	beq.n	8001d7e <TIM_OC2_SetConfig+0x96>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a17      	ldr	r2, [pc, #92]	; (8001dd8 <TIM_OC2_SetConfig+0xf0>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d113      	bne.n	8001da6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	4a16      	ldr	r2, [pc, #88]	; (8001ddc <TIM_OC2_SetConfig+0xf4>)
 8001d82:	4013      	ands	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4a15      	ldr	r2, [pc, #84]	; (8001de0 <TIM_OC2_SetConfig+0xf8>)
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	621a      	str	r2, [r3, #32]
}
 8001dc0:	46c0      	nop			; (mov r8, r8)
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	b006      	add	sp, #24
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	ffff8fff 	.word	0xffff8fff
 8001dcc:	fffffcff 	.word	0xfffffcff
 8001dd0:	40012c00 	.word	0x40012c00
 8001dd4:	40014400 	.word	0x40014400
 8001dd8:	40014800 	.word	0x40014800
 8001ddc:	fffffbff 	.word	0xfffffbff
 8001de0:	fffff7ff 	.word	0xfffff7ff

08001de4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	4a33      	ldr	r2, [pc, #204]	; (8001ec0 <TIM_OC3_SetConfig+0xdc>)
 8001df4:	401a      	ands	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2270      	movs	r2, #112	; 0x70
 8001e10:	4393      	bics	r3, r2
 8001e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2203      	movs	r2, #3
 8001e18:	4393      	bics	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	4a26      	ldr	r2, [pc, #152]	; (8001ec4 <TIM_OC3_SetConfig+0xe0>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	021b      	lsls	r3, r3, #8
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a22      	ldr	r2, [pc, #136]	; (8001ec8 <TIM_OC3_SetConfig+0xe4>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d10d      	bne.n	8001e5e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	4a21      	ldr	r2, [pc, #132]	; (8001ecc <TIM_OC3_SetConfig+0xe8>)
 8001e46:	4013      	ands	r3, r2
 8001e48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	021b      	lsls	r3, r3, #8
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	4a1d      	ldr	r2, [pc, #116]	; (8001ed0 <TIM_OC3_SetConfig+0xec>)
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a19      	ldr	r2, [pc, #100]	; (8001ec8 <TIM_OC3_SetConfig+0xe4>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d007      	beq.n	8001e76 <TIM_OC3_SetConfig+0x92>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a1a      	ldr	r2, [pc, #104]	; (8001ed4 <TIM_OC3_SetConfig+0xf0>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d003      	beq.n	8001e76 <TIM_OC3_SetConfig+0x92>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a19      	ldr	r2, [pc, #100]	; (8001ed8 <TIM_OC3_SetConfig+0xf4>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d113      	bne.n	8001e9e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4a18      	ldr	r2, [pc, #96]	; (8001edc <TIM_OC3_SetConfig+0xf8>)
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4a17      	ldr	r2, [pc, #92]	; (8001ee0 <TIM_OC3_SetConfig+0xfc>)
 8001e82:	4013      	ands	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	011b      	lsls	r3, r3, #4
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	011b      	lsls	r3, r3, #4
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	621a      	str	r2, [r3, #32]
}
 8001eb8:	46c0      	nop			; (mov r8, r8)
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	b006      	add	sp, #24
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	fffffeff 	.word	0xfffffeff
 8001ec4:	fffffdff 	.word	0xfffffdff
 8001ec8:	40012c00 	.word	0x40012c00
 8001ecc:	fffff7ff 	.word	0xfffff7ff
 8001ed0:	fffffbff 	.word	0xfffffbff
 8001ed4:	40014400 	.word	0x40014400
 8001ed8:	40014800 	.word	0x40014800
 8001edc:	ffffefff 	.word	0xffffefff
 8001ee0:	ffffdfff 	.word	0xffffdfff

08001ee4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	4a26      	ldr	r2, [pc, #152]	; (8001f8c <TIM_OC4_SetConfig+0xa8>)
 8001ef4:	401a      	ands	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4a20      	ldr	r2, [pc, #128]	; (8001f90 <TIM_OC4_SetConfig+0xac>)
 8001f10:	4013      	ands	r3, r2
 8001f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4a1f      	ldr	r2, [pc, #124]	; (8001f94 <TIM_OC4_SetConfig+0xb0>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	021b      	lsls	r3, r3, #8
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	4a1b      	ldr	r2, [pc, #108]	; (8001f98 <TIM_OC4_SetConfig+0xb4>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	031b      	lsls	r3, r3, #12
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a17      	ldr	r2, [pc, #92]	; (8001f9c <TIM_OC4_SetConfig+0xb8>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d007      	beq.n	8001f54 <TIM_OC4_SetConfig+0x70>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a16      	ldr	r2, [pc, #88]	; (8001fa0 <TIM_OC4_SetConfig+0xbc>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d003      	beq.n	8001f54 <TIM_OC4_SetConfig+0x70>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a15      	ldr	r2, [pc, #84]	; (8001fa4 <TIM_OC4_SetConfig+0xc0>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d109      	bne.n	8001f68 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	4a14      	ldr	r2, [pc, #80]	; (8001fa8 <TIM_OC4_SetConfig+0xc4>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	019b      	lsls	r3, r3, #6
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	621a      	str	r2, [r3, #32]
}
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	46bd      	mov	sp, r7
 8001f86:	b006      	add	sp, #24
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	46c0      	nop			; (mov r8, r8)
 8001f8c:	ffffefff 	.word	0xffffefff
 8001f90:	ffff8fff 	.word	0xffff8fff
 8001f94:	fffffcff 	.word	0xfffffcff
 8001f98:	ffffdfff 	.word	0xffffdfff
 8001f9c:	40012c00 	.word	0x40012c00
 8001fa0:	40014400 	.word	0x40014400
 8001fa4:	40014800 	.word	0x40014800
 8001fa8:	ffffbfff 	.word	0xffffbfff

08001fac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	223c      	movs	r2, #60	; 0x3c
 8001fba:	5c9b      	ldrb	r3, [r3, r2]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d101      	bne.n	8001fc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	e042      	b.n	800204a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	223c      	movs	r2, #60	; 0x3c
 8001fc8:	2101      	movs	r1, #1
 8001fca:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	223d      	movs	r2, #61	; 0x3d
 8001fd0:	2102      	movs	r1, #2
 8001fd2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2270      	movs	r2, #112	; 0x70
 8001fe8:	4393      	bics	r3, r2
 8001fea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a14      	ldr	r2, [pc, #80]	; (8002054 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d00a      	beq.n	800201e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	2380      	movs	r3, #128	; 0x80
 800200e:	05db      	lsls	r3, r3, #23
 8002010:	429a      	cmp	r2, r3
 8002012:	d004      	beq.n	800201e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a0f      	ldr	r2, [pc, #60]	; (8002058 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d10c      	bne.n	8002038 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	2280      	movs	r2, #128	; 0x80
 8002022:	4393      	bics	r3, r2
 8002024:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	4313      	orrs	r3, r2
 800202e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	223d      	movs	r2, #61	; 0x3d
 800203c:	2101      	movs	r1, #1
 800203e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	223c      	movs	r2, #60	; 0x3c
 8002044:	2100      	movs	r1, #0
 8002046:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	0018      	movs	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	b004      	add	sp, #16
 8002050:	bd80      	pop	{r7, pc}
 8002052:	46c0      	nop			; (mov r8, r8)
 8002054:	40012c00 	.word	0x40012c00
 8002058:	40000400 	.word	0x40000400

0800205c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e044      	b.n	80020f8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002072:	2b00      	cmp	r3, #0
 8002074:	d107      	bne.n	8002086 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2274      	movs	r2, #116	; 0x74
 800207a:	2100      	movs	r1, #0
 800207c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	0018      	movs	r0, r3
 8002082:	f7fe fae7 	bl	8000654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2224      	movs	r2, #36	; 0x24
 800208a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2101      	movs	r1, #1
 8002098:	438a      	bics	r2, r1
 800209a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	0018      	movs	r0, r3
 80020a0:	f000 f830 	bl	8002104 <UART_SetConfig>
 80020a4:	0003      	movs	r3, r0
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d101      	bne.n	80020ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e024      	b.n	80020f8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	0018      	movs	r0, r3
 80020ba:	f000 f963 	bl	8002384 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	490d      	ldr	r1, [pc, #52]	; (8002100 <HAL_UART_Init+0xa4>)
 80020ca:	400a      	ands	r2, r1
 80020cc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	212a      	movs	r1, #42	; 0x2a
 80020da:	438a      	bics	r2, r1
 80020dc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2101      	movs	r1, #1
 80020ea:	430a      	orrs	r2, r1
 80020ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	0018      	movs	r0, r3
 80020f2:	f000 f9fb 	bl	80024ec <UART_CheckIdleState>
 80020f6:	0003      	movs	r3, r0
}
 80020f8:	0018      	movs	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	b002      	add	sp, #8
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	ffffb7ff 	.word	0xffffb7ff

08002104 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800210c:	231e      	movs	r3, #30
 800210e:	18fb      	adds	r3, r7, r3
 8002110:	2200      	movs	r2, #0
 8002112:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	431a      	orrs	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	4313      	orrs	r3, r2
 800212a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a8d      	ldr	r2, [pc, #564]	; (8002368 <UART_SetConfig+0x264>)
 8002134:	4013      	ands	r3, r2
 8002136:	0019      	movs	r1, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	430a      	orrs	r2, r1
 8002140:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	4a88      	ldr	r2, [pc, #544]	; (800236c <UART_SetConfig+0x268>)
 800214a:	4013      	ands	r3, r2
 800214c:	0019      	movs	r1, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68da      	ldr	r2, [r3, #12]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	4313      	orrs	r3, r2
 8002168:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	4a7f      	ldr	r2, [pc, #508]	; (8002370 <UART_SetConfig+0x26c>)
 8002172:	4013      	ands	r3, r2
 8002174:	0019      	movs	r1, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	430a      	orrs	r2, r1
 800217e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a7b      	ldr	r2, [pc, #492]	; (8002374 <UART_SetConfig+0x270>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d127      	bne.n	80021da <UART_SetConfig+0xd6>
 800218a:	4b7b      	ldr	r3, [pc, #492]	; (8002378 <UART_SetConfig+0x274>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	2203      	movs	r2, #3
 8002190:	4013      	ands	r3, r2
 8002192:	2b03      	cmp	r3, #3
 8002194:	d00d      	beq.n	80021b2 <UART_SetConfig+0xae>
 8002196:	d81b      	bhi.n	80021d0 <UART_SetConfig+0xcc>
 8002198:	2b02      	cmp	r3, #2
 800219a:	d014      	beq.n	80021c6 <UART_SetConfig+0xc2>
 800219c:	d818      	bhi.n	80021d0 <UART_SetConfig+0xcc>
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d002      	beq.n	80021a8 <UART_SetConfig+0xa4>
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d00a      	beq.n	80021bc <UART_SetConfig+0xb8>
 80021a6:	e013      	b.n	80021d0 <UART_SetConfig+0xcc>
 80021a8:	231f      	movs	r3, #31
 80021aa:	18fb      	adds	r3, r7, r3
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
 80021b0:	e021      	b.n	80021f6 <UART_SetConfig+0xf2>
 80021b2:	231f      	movs	r3, #31
 80021b4:	18fb      	adds	r3, r7, r3
 80021b6:	2202      	movs	r2, #2
 80021b8:	701a      	strb	r2, [r3, #0]
 80021ba:	e01c      	b.n	80021f6 <UART_SetConfig+0xf2>
 80021bc:	231f      	movs	r3, #31
 80021be:	18fb      	adds	r3, r7, r3
 80021c0:	2204      	movs	r2, #4
 80021c2:	701a      	strb	r2, [r3, #0]
 80021c4:	e017      	b.n	80021f6 <UART_SetConfig+0xf2>
 80021c6:	231f      	movs	r3, #31
 80021c8:	18fb      	adds	r3, r7, r3
 80021ca:	2208      	movs	r2, #8
 80021cc:	701a      	strb	r2, [r3, #0]
 80021ce:	e012      	b.n	80021f6 <UART_SetConfig+0xf2>
 80021d0:	231f      	movs	r3, #31
 80021d2:	18fb      	adds	r3, r7, r3
 80021d4:	2210      	movs	r2, #16
 80021d6:	701a      	strb	r2, [r3, #0]
 80021d8:	e00d      	b.n	80021f6 <UART_SetConfig+0xf2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a67      	ldr	r2, [pc, #412]	; (800237c <UART_SetConfig+0x278>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d104      	bne.n	80021ee <UART_SetConfig+0xea>
 80021e4:	231f      	movs	r3, #31
 80021e6:	18fb      	adds	r3, r7, r3
 80021e8:	2200      	movs	r2, #0
 80021ea:	701a      	strb	r2, [r3, #0]
 80021ec:	e003      	b.n	80021f6 <UART_SetConfig+0xf2>
 80021ee:	231f      	movs	r3, #31
 80021f0:	18fb      	adds	r3, r7, r3
 80021f2:	2210      	movs	r2, #16
 80021f4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69da      	ldr	r2, [r3, #28]
 80021fa:	2380      	movs	r3, #128	; 0x80
 80021fc:	021b      	lsls	r3, r3, #8
 80021fe:	429a      	cmp	r2, r3
 8002200:	d15d      	bne.n	80022be <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8002202:	231f      	movs	r3, #31
 8002204:	18fb      	adds	r3, r7, r3
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b08      	cmp	r3, #8
 800220a:	d015      	beq.n	8002238 <UART_SetConfig+0x134>
 800220c:	dc18      	bgt.n	8002240 <UART_SetConfig+0x13c>
 800220e:	2b04      	cmp	r3, #4
 8002210:	d00d      	beq.n	800222e <UART_SetConfig+0x12a>
 8002212:	dc15      	bgt.n	8002240 <UART_SetConfig+0x13c>
 8002214:	2b00      	cmp	r3, #0
 8002216:	d002      	beq.n	800221e <UART_SetConfig+0x11a>
 8002218:	2b02      	cmp	r3, #2
 800221a:	d005      	beq.n	8002228 <UART_SetConfig+0x124>
 800221c:	e010      	b.n	8002240 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800221e:	f7ff fb43 	bl	80018a8 <HAL_RCC_GetPCLK1Freq>
 8002222:	0003      	movs	r3, r0
 8002224:	61bb      	str	r3, [r7, #24]
        break;
 8002226:	e012      	b.n	800224e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002228:	4b55      	ldr	r3, [pc, #340]	; (8002380 <UART_SetConfig+0x27c>)
 800222a:	61bb      	str	r3, [r7, #24]
        break;
 800222c:	e00f      	b.n	800224e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800222e:	f7ff fab1 	bl	8001794 <HAL_RCC_GetSysClockFreq>
 8002232:	0003      	movs	r3, r0
 8002234:	61bb      	str	r3, [r7, #24]
        break;
 8002236:	e00a      	b.n	800224e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002238:	2380      	movs	r3, #128	; 0x80
 800223a:	021b      	lsls	r3, r3, #8
 800223c:	61bb      	str	r3, [r7, #24]
        break;
 800223e:	e006      	b.n	800224e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002244:	231e      	movs	r3, #30
 8002246:	18fb      	adds	r3, r7, r3
 8002248:	2201      	movs	r2, #1
 800224a:	701a      	strb	r2, [r3, #0]
        break;
 800224c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d100      	bne.n	8002256 <UART_SetConfig+0x152>
 8002254:	e07b      	b.n	800234e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	005a      	lsls	r2, r3, #1
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	085b      	lsrs	r3, r3, #1
 8002260:	18d2      	adds	r2, r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	0019      	movs	r1, r3
 8002268:	0010      	movs	r0, r2
 800226a:	f7fd ff4d 	bl	8000108 <__udivsi3>
 800226e:	0003      	movs	r3, r0
 8002270:	b29b      	uxth	r3, r3
 8002272:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	2b0f      	cmp	r3, #15
 8002278:	d91c      	bls.n	80022b4 <UART_SetConfig+0x1b0>
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	2380      	movs	r3, #128	; 0x80
 800227e:	025b      	lsls	r3, r3, #9
 8002280:	429a      	cmp	r2, r3
 8002282:	d217      	bcs.n	80022b4 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	b29a      	uxth	r2, r3
 8002288:	200e      	movs	r0, #14
 800228a:	183b      	adds	r3, r7, r0
 800228c:	210f      	movs	r1, #15
 800228e:	438a      	bics	r2, r1
 8002290:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	085b      	lsrs	r3, r3, #1
 8002296:	b29b      	uxth	r3, r3
 8002298:	2207      	movs	r2, #7
 800229a:	4013      	ands	r3, r2
 800229c:	b299      	uxth	r1, r3
 800229e:	183b      	adds	r3, r7, r0
 80022a0:	183a      	adds	r2, r7, r0
 80022a2:	8812      	ldrh	r2, [r2, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	183a      	adds	r2, r7, r0
 80022ae:	8812      	ldrh	r2, [r2, #0]
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	e04c      	b.n	800234e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80022b4:	231e      	movs	r3, #30
 80022b6:	18fb      	adds	r3, r7, r3
 80022b8:	2201      	movs	r2, #1
 80022ba:	701a      	strb	r2, [r3, #0]
 80022bc:	e047      	b.n	800234e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80022be:	231f      	movs	r3, #31
 80022c0:	18fb      	adds	r3, r7, r3
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d015      	beq.n	80022f4 <UART_SetConfig+0x1f0>
 80022c8:	dc18      	bgt.n	80022fc <UART_SetConfig+0x1f8>
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d00d      	beq.n	80022ea <UART_SetConfig+0x1e6>
 80022ce:	dc15      	bgt.n	80022fc <UART_SetConfig+0x1f8>
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d002      	beq.n	80022da <UART_SetConfig+0x1d6>
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d005      	beq.n	80022e4 <UART_SetConfig+0x1e0>
 80022d8:	e010      	b.n	80022fc <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022da:	f7ff fae5 	bl	80018a8 <HAL_RCC_GetPCLK1Freq>
 80022de:	0003      	movs	r3, r0
 80022e0:	61bb      	str	r3, [r7, #24]
        break;
 80022e2:	e012      	b.n	800230a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80022e4:	4b26      	ldr	r3, [pc, #152]	; (8002380 <UART_SetConfig+0x27c>)
 80022e6:	61bb      	str	r3, [r7, #24]
        break;
 80022e8:	e00f      	b.n	800230a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022ea:	f7ff fa53 	bl	8001794 <HAL_RCC_GetSysClockFreq>
 80022ee:	0003      	movs	r3, r0
 80022f0:	61bb      	str	r3, [r7, #24]
        break;
 80022f2:	e00a      	b.n	800230a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022f4:	2380      	movs	r3, #128	; 0x80
 80022f6:	021b      	lsls	r3, r3, #8
 80022f8:	61bb      	str	r3, [r7, #24]
        break;
 80022fa:	e006      	b.n	800230a <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002300:	231e      	movs	r3, #30
 8002302:	18fb      	adds	r3, r7, r3
 8002304:	2201      	movs	r2, #1
 8002306:	701a      	strb	r2, [r3, #0]
        break;
 8002308:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d01e      	beq.n	800234e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	085a      	lsrs	r2, r3, #1
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	18d2      	adds	r2, r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	0019      	movs	r1, r3
 8002320:	0010      	movs	r0, r2
 8002322:	f7fd fef1 	bl	8000108 <__udivsi3>
 8002326:	0003      	movs	r3, r0
 8002328:	b29b      	uxth	r3, r3
 800232a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	2b0f      	cmp	r3, #15
 8002330:	d909      	bls.n	8002346 <UART_SetConfig+0x242>
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	2380      	movs	r3, #128	; 0x80
 8002336:	025b      	lsls	r3, r3, #9
 8002338:	429a      	cmp	r2, r3
 800233a:	d204      	bcs.n	8002346 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	60da      	str	r2, [r3, #12]
 8002344:	e003      	b.n	800234e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002346:	231e      	movs	r3, #30
 8002348:	18fb      	adds	r3, r7, r3
 800234a:	2201      	movs	r2, #1
 800234c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800235a:	231e      	movs	r3, #30
 800235c:	18fb      	adds	r3, r7, r3
 800235e:	781b      	ldrb	r3, [r3, #0]
}
 8002360:	0018      	movs	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	b008      	add	sp, #32
 8002366:	bd80      	pop	{r7, pc}
 8002368:	efff69f3 	.word	0xefff69f3
 800236c:	ffffcfff 	.word	0xffffcfff
 8002370:	fffff4ff 	.word	0xfffff4ff
 8002374:	40013800 	.word	0x40013800
 8002378:	40021000 	.word	0x40021000
 800237c:	40004400 	.word	0x40004400
 8002380:	007a1200 	.word	0x007a1200

08002384 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	2201      	movs	r2, #1
 8002392:	4013      	ands	r3, r2
 8002394:	d00b      	beq.n	80023ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	4a4a      	ldr	r2, [pc, #296]	; (80024c8 <UART_AdvFeatureConfig+0x144>)
 800239e:	4013      	ands	r3, r2
 80023a0:	0019      	movs	r1, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	2202      	movs	r2, #2
 80023b4:	4013      	ands	r3, r2
 80023b6:	d00b      	beq.n	80023d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	4a43      	ldr	r2, [pc, #268]	; (80024cc <UART_AdvFeatureConfig+0x148>)
 80023c0:	4013      	ands	r3, r2
 80023c2:	0019      	movs	r1, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	2204      	movs	r2, #4
 80023d6:	4013      	ands	r3, r2
 80023d8:	d00b      	beq.n	80023f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	4a3b      	ldr	r2, [pc, #236]	; (80024d0 <UART_AdvFeatureConfig+0x14c>)
 80023e2:	4013      	ands	r3, r2
 80023e4:	0019      	movs	r1, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	2208      	movs	r2, #8
 80023f8:	4013      	ands	r3, r2
 80023fa:	d00b      	beq.n	8002414 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	4a34      	ldr	r2, [pc, #208]	; (80024d4 <UART_AdvFeatureConfig+0x150>)
 8002404:	4013      	ands	r3, r2
 8002406:	0019      	movs	r1, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002418:	2210      	movs	r2, #16
 800241a:	4013      	ands	r3, r2
 800241c:	d00b      	beq.n	8002436 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	4a2c      	ldr	r2, [pc, #176]	; (80024d8 <UART_AdvFeatureConfig+0x154>)
 8002426:	4013      	ands	r3, r2
 8002428:	0019      	movs	r1, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	430a      	orrs	r2, r1
 8002434:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	2220      	movs	r2, #32
 800243c:	4013      	ands	r3, r2
 800243e:	d00b      	beq.n	8002458 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	4a25      	ldr	r2, [pc, #148]	; (80024dc <UART_AdvFeatureConfig+0x158>)
 8002448:	4013      	ands	r3, r2
 800244a:	0019      	movs	r1, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	2240      	movs	r2, #64	; 0x40
 800245e:	4013      	ands	r3, r2
 8002460:	d01d      	beq.n	800249e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	4a1d      	ldr	r2, [pc, #116]	; (80024e0 <UART_AdvFeatureConfig+0x15c>)
 800246a:	4013      	ands	r3, r2
 800246c:	0019      	movs	r1, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800247e:	2380      	movs	r3, #128	; 0x80
 8002480:	035b      	lsls	r3, r3, #13
 8002482:	429a      	cmp	r2, r3
 8002484:	d10b      	bne.n	800249e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	4a15      	ldr	r2, [pc, #84]	; (80024e4 <UART_AdvFeatureConfig+0x160>)
 800248e:	4013      	ands	r3, r2
 8002490:	0019      	movs	r1, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	2280      	movs	r2, #128	; 0x80
 80024a4:	4013      	ands	r3, r2
 80024a6:	d00b      	beq.n	80024c0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	4a0e      	ldr	r2, [pc, #56]	; (80024e8 <UART_AdvFeatureConfig+0x164>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	0019      	movs	r1, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	605a      	str	r2, [r3, #4]
  }
}
 80024c0:	46c0      	nop			; (mov r8, r8)
 80024c2:	46bd      	mov	sp, r7
 80024c4:	b002      	add	sp, #8
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	fffdffff 	.word	0xfffdffff
 80024cc:	fffeffff 	.word	0xfffeffff
 80024d0:	fffbffff 	.word	0xfffbffff
 80024d4:	ffff7fff 	.word	0xffff7fff
 80024d8:	ffffefff 	.word	0xffffefff
 80024dc:	ffffdfff 	.word	0xffffdfff
 80024e0:	ffefffff 	.word	0xffefffff
 80024e4:	ff9fffff 	.word	0xff9fffff
 80024e8:	fff7ffff 	.word	0xfff7ffff

080024ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af02      	add	r7, sp, #8
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2280      	movs	r2, #128	; 0x80
 80024f8:	2100      	movs	r1, #0
 80024fa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80024fc:	f7fe f994 	bl	8000828 <HAL_GetTick>
 8002500:	0003      	movs	r3, r0
 8002502:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2208      	movs	r2, #8
 800250c:	4013      	ands	r3, r2
 800250e:	2b08      	cmp	r3, #8
 8002510:	d10c      	bne.n	800252c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2280      	movs	r2, #128	; 0x80
 8002516:	0391      	lsls	r1, r2, #14
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	4a17      	ldr	r2, [pc, #92]	; (8002578 <UART_CheckIdleState+0x8c>)
 800251c:	9200      	str	r2, [sp, #0]
 800251e:	2200      	movs	r2, #0
 8002520:	f000 f82c 	bl	800257c <UART_WaitOnFlagUntilTimeout>
 8002524:	1e03      	subs	r3, r0, #0
 8002526:	d001      	beq.n	800252c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e021      	b.n	8002570 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2204      	movs	r2, #4
 8002534:	4013      	ands	r3, r2
 8002536:	2b04      	cmp	r3, #4
 8002538:	d10c      	bne.n	8002554 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2280      	movs	r2, #128	; 0x80
 800253e:	03d1      	lsls	r1, r2, #15
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	4a0d      	ldr	r2, [pc, #52]	; (8002578 <UART_CheckIdleState+0x8c>)
 8002544:	9200      	str	r2, [sp, #0]
 8002546:	2200      	movs	r2, #0
 8002548:	f000 f818 	bl	800257c <UART_WaitOnFlagUntilTimeout>
 800254c:	1e03      	subs	r3, r0, #0
 800254e:	d001      	beq.n	8002554 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e00d      	b.n	8002570 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2220      	movs	r2, #32
 8002558:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2220      	movs	r2, #32
 800255e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2274      	movs	r2, #116	; 0x74
 800256a:	2100      	movs	r1, #0
 800256c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	0018      	movs	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	b004      	add	sp, #16
 8002576:	bd80      	pop	{r7, pc}
 8002578:	01ffffff 	.word	0x01ffffff

0800257c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b094      	sub	sp, #80	; 0x50
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	603b      	str	r3, [r7, #0]
 8002588:	1dfb      	adds	r3, r7, #7
 800258a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800258c:	e0a3      	b.n	80026d6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800258e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002590:	3301      	adds	r3, #1
 8002592:	d100      	bne.n	8002596 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002594:	e09f      	b.n	80026d6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002596:	f7fe f947 	bl	8000828 <HAL_GetTick>
 800259a:	0002      	movs	r2, r0
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d302      	bcc.n	80025ac <UART_WaitOnFlagUntilTimeout+0x30>
 80025a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d13d      	bne.n	8002628 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025ac:	f3ef 8310 	mrs	r3, PRIMASK
 80025b0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80025b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025b4:	647b      	str	r3, [r7, #68]	; 0x44
 80025b6:	2301      	movs	r3, #1
 80025b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025bc:	f383 8810 	msr	PRIMASK, r3
}
 80025c0:	46c0      	nop			; (mov r8, r8)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	494c      	ldr	r1, [pc, #304]	; (8002700 <UART_WaitOnFlagUntilTimeout+0x184>)
 80025ce:	400a      	ands	r2, r1
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025d4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d8:	f383 8810 	msr	PRIMASK, r3
}
 80025dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025de:	f3ef 8310 	mrs	r3, PRIMASK
 80025e2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80025e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025e6:	643b      	str	r3, [r7, #64]	; 0x40
 80025e8:	2301      	movs	r3, #1
 80025ea:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ee:	f383 8810 	msr	PRIMASK, r3
}
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689a      	ldr	r2, [r3, #8]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2101      	movs	r1, #1
 8002600:	438a      	bics	r2, r1
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002606:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800260a:	f383 8810 	msr	PRIMASK, r3
}
 800260e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2220      	movs	r2, #32
 8002614:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2220      	movs	r2, #32
 800261a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2274      	movs	r2, #116	; 0x74
 8002620:	2100      	movs	r1, #0
 8002622:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e067      	b.n	80026f8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2204      	movs	r2, #4
 8002630:	4013      	ands	r3, r2
 8002632:	d050      	beq.n	80026d6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	69da      	ldr	r2, [r3, #28]
 800263a:	2380      	movs	r3, #128	; 0x80
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	401a      	ands	r2, r3
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	429a      	cmp	r2, r3
 8002646:	d146      	bne.n	80026d6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2280      	movs	r2, #128	; 0x80
 800264e:	0112      	lsls	r2, r2, #4
 8002650:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002652:	f3ef 8310 	mrs	r3, PRIMASK
 8002656:	613b      	str	r3, [r7, #16]
  return(result);
 8002658:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800265a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800265c:	2301      	movs	r3, #1
 800265e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f383 8810 	msr	PRIMASK, r3
}
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4923      	ldr	r1, [pc, #140]	; (8002700 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002674:	400a      	ands	r2, r1
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800267a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	f383 8810 	msr	PRIMASK, r3
}
 8002682:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002684:	f3ef 8310 	mrs	r3, PRIMASK
 8002688:	61fb      	str	r3, [r7, #28]
  return(result);
 800268a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800268c:	64bb      	str	r3, [r7, #72]	; 0x48
 800268e:	2301      	movs	r3, #1
 8002690:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	f383 8810 	msr	PRIMASK, r3
}
 8002698:	46c0      	nop			; (mov r8, r8)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2101      	movs	r1, #1
 80026a6:	438a      	bics	r2, r1
 80026a8:	609a      	str	r2, [r3, #8]
 80026aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	f383 8810 	msr	PRIMASK, r3
}
 80026b4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2220      	movs	r2, #32
 80026ba:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2220      	movs	r2, #32
 80026c0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2280      	movs	r2, #128	; 0x80
 80026c6:	2120      	movs	r1, #32
 80026c8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2274      	movs	r2, #116	; 0x74
 80026ce:	2100      	movs	r1, #0
 80026d0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e010      	b.n	80026f8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	4013      	ands	r3, r2
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	425a      	negs	r2, r3
 80026e6:	4153      	adcs	r3, r2
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	001a      	movs	r2, r3
 80026ec:	1dfb      	adds	r3, r7, #7
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d100      	bne.n	80026f6 <UART_WaitOnFlagUntilTimeout+0x17a>
 80026f4:	e74b      	b.n	800258e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	0018      	movs	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b014      	add	sp, #80	; 0x50
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	fffffe5f 	.word	0xfffffe5f

08002704 <__libc_init_array>:
 8002704:	b570      	push	{r4, r5, r6, lr}
 8002706:	2600      	movs	r6, #0
 8002708:	4d0c      	ldr	r5, [pc, #48]	; (800273c <__libc_init_array+0x38>)
 800270a:	4c0d      	ldr	r4, [pc, #52]	; (8002740 <__libc_init_array+0x3c>)
 800270c:	1b64      	subs	r4, r4, r5
 800270e:	10a4      	asrs	r4, r4, #2
 8002710:	42a6      	cmp	r6, r4
 8002712:	d109      	bne.n	8002728 <__libc_init_array+0x24>
 8002714:	2600      	movs	r6, #0
 8002716:	f000 f821 	bl	800275c <_init>
 800271a:	4d0a      	ldr	r5, [pc, #40]	; (8002744 <__libc_init_array+0x40>)
 800271c:	4c0a      	ldr	r4, [pc, #40]	; (8002748 <__libc_init_array+0x44>)
 800271e:	1b64      	subs	r4, r4, r5
 8002720:	10a4      	asrs	r4, r4, #2
 8002722:	42a6      	cmp	r6, r4
 8002724:	d105      	bne.n	8002732 <__libc_init_array+0x2e>
 8002726:	bd70      	pop	{r4, r5, r6, pc}
 8002728:	00b3      	lsls	r3, r6, #2
 800272a:	58eb      	ldr	r3, [r5, r3]
 800272c:	4798      	blx	r3
 800272e:	3601      	adds	r6, #1
 8002730:	e7ee      	b.n	8002710 <__libc_init_array+0xc>
 8002732:	00b3      	lsls	r3, r6, #2
 8002734:	58eb      	ldr	r3, [r5, r3]
 8002736:	4798      	blx	r3
 8002738:	3601      	adds	r6, #1
 800273a:	e7f2      	b.n	8002722 <__libc_init_array+0x1e>
 800273c:	080027ac 	.word	0x080027ac
 8002740:	080027ac 	.word	0x080027ac
 8002744:	080027ac 	.word	0x080027ac
 8002748:	080027b0 	.word	0x080027b0

0800274c <memset>:
 800274c:	0003      	movs	r3, r0
 800274e:	1882      	adds	r2, r0, r2
 8002750:	4293      	cmp	r3, r2
 8002752:	d100      	bne.n	8002756 <memset+0xa>
 8002754:	4770      	bx	lr
 8002756:	7019      	strb	r1, [r3, #0]
 8002758:	3301      	adds	r3, #1
 800275a:	e7f9      	b.n	8002750 <memset+0x4>

0800275c <_init>:
 800275c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002762:	bc08      	pop	{r3}
 8002764:	469e      	mov	lr, r3
 8002766:	4770      	bx	lr

08002768 <_fini>:
 8002768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800276a:	46c0      	nop			; (mov r8, r8)
 800276c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800276e:	bc08      	pop	{r3}
 8002770:	469e      	mov	lr, r3
 8002772:	4770      	bx	lr
