
ws2812b_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b20  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003be0  08003be0  00013be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c18  08003c18  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08003c18  08003c18  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c18  08003c18  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c18  08003c18  00013c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c1c  08003c1c  00013c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08003c20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000020  08003c40  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08003c40  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e814  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002131  00000000  00000000  0002e85c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  00030990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b70  00000000  00000000  000315f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018983  00000000  00000000  00032168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113cf  00000000  00000000  0004aaeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e255  00000000  00000000  0005beba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ea10f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b44  00000000  00000000  000ea164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003bc8 	.word	0x08003bc8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	08003bc8 	.word	0x08003bc8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000226:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <MX_DMA_Init+0x38>)
 8000228:	695a      	ldr	r2, [r3, #20]
 800022a:	4b0b      	ldr	r3, [pc, #44]	; (8000258 <MX_DMA_Init+0x38>)
 800022c:	2101      	movs	r1, #1
 800022e:	430a      	orrs	r2, r1
 8000230:	615a      	str	r2, [r3, #20]
 8000232:	4b09      	ldr	r3, [pc, #36]	; (8000258 <MX_DMA_Init+0x38>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	2201      	movs	r2, #1
 8000238:	4013      	ands	r3, r2
 800023a:	607b      	str	r3, [r7, #4]
 800023c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800023e:	2200      	movs	r2, #0
 8000240:	2100      	movs	r1, #0
 8000242:	200a      	movs	r0, #10
 8000244:	f000 fba8 	bl	8000998 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000248:	200a      	movs	r0, #10
 800024a:	f000 fbba 	bl	80009c2 <HAL_NVIC_EnableIRQ>

}
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	46bd      	mov	sp, r7
 8000252:	b002      	add	sp, #8
 8000254:	bd80      	pop	{r7, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	40021000 	.word	0x40021000

0800025c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b084      	sub	sp, #16
 8000260:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000262:	4b17      	ldr	r3, [pc, #92]	; (80002c0 <MX_GPIO_Init+0x64>)
 8000264:	695a      	ldr	r2, [r3, #20]
 8000266:	4b16      	ldr	r3, [pc, #88]	; (80002c0 <MX_GPIO_Init+0x64>)
 8000268:	2180      	movs	r1, #128	; 0x80
 800026a:	03c9      	lsls	r1, r1, #15
 800026c:	430a      	orrs	r2, r1
 800026e:	615a      	str	r2, [r3, #20]
 8000270:	4b13      	ldr	r3, [pc, #76]	; (80002c0 <MX_GPIO_Init+0x64>)
 8000272:	695a      	ldr	r2, [r3, #20]
 8000274:	2380      	movs	r3, #128	; 0x80
 8000276:	03db      	lsls	r3, r3, #15
 8000278:	4013      	ands	r3, r2
 800027a:	60fb      	str	r3, [r7, #12]
 800027c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800027e:	4b10      	ldr	r3, [pc, #64]	; (80002c0 <MX_GPIO_Init+0x64>)
 8000280:	695a      	ldr	r2, [r3, #20]
 8000282:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <MX_GPIO_Init+0x64>)
 8000284:	2180      	movs	r1, #128	; 0x80
 8000286:	0289      	lsls	r1, r1, #10
 8000288:	430a      	orrs	r2, r1
 800028a:	615a      	str	r2, [r3, #20]
 800028c:	4b0c      	ldr	r3, [pc, #48]	; (80002c0 <MX_GPIO_Init+0x64>)
 800028e:	695a      	ldr	r2, [r3, #20]
 8000290:	2380      	movs	r3, #128	; 0x80
 8000292:	029b      	lsls	r3, r3, #10
 8000294:	4013      	ands	r3, r2
 8000296:	60bb      	str	r3, [r7, #8]
 8000298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800029a:	4b09      	ldr	r3, [pc, #36]	; (80002c0 <MX_GPIO_Init+0x64>)
 800029c:	695a      	ldr	r2, [r3, #20]
 800029e:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <MX_GPIO_Init+0x64>)
 80002a0:	2180      	movs	r1, #128	; 0x80
 80002a2:	02c9      	lsls	r1, r1, #11
 80002a4:	430a      	orrs	r2, r1
 80002a6:	615a      	str	r2, [r3, #20]
 80002a8:	4b05      	ldr	r3, [pc, #20]	; (80002c0 <MX_GPIO_Init+0x64>)
 80002aa:	695a      	ldr	r2, [r3, #20]
 80002ac:	2380      	movs	r3, #128	; 0x80
 80002ae:	02db      	lsls	r3, r3, #11
 80002b0:	4013      	ands	r3, r2
 80002b2:	607b      	str	r3, [r7, #4]
 80002b4:	687b      	ldr	r3, [r7, #4]

}
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	46bd      	mov	sp, r7
 80002ba:	b004      	add	sp, #16
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	46c0      	nop			; (mov r8, r8)
 80002c0:	40021000 	.word	0x40021000

080002c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c8:	f000 fa56 	bl	8000778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002cc:	f000 f80f 	bl	80002ee <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002d0:	f7ff ffc4 	bl	800025c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002d4:	f000 f990 	bl	80005f8 <MX_USART2_UART_Init>
  MX_DMA_Init();
 80002d8:	f7ff ffa2 	bl	8000220 <MX_DMA_Init>
  MX_TIM3_Init();
 80002dc:	f000 f896 	bl	800040c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  ws2812b_init();
 80002e0:	f002 ff3c 	bl	800315c <ws2812b_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ws2812b_main();
 80002e4:	f002 ff3f 	bl	8003166 <ws2812b_main>
	  test_main();
 80002e8:	f002 ff22 	bl	8003130 <test_main>
	  ws2812b_main();
 80002ec:	e7fa      	b.n	80002e4 <main+0x20>

080002ee <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ee:	b590      	push	{r4, r7, lr}
 80002f0:	b093      	sub	sp, #76	; 0x4c
 80002f2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f4:	2414      	movs	r4, #20
 80002f6:	193b      	adds	r3, r7, r4
 80002f8:	0018      	movs	r0, r3
 80002fa:	2334      	movs	r3, #52	; 0x34
 80002fc:	001a      	movs	r2, r3
 80002fe:	2100      	movs	r1, #0
 8000300:	f003 fc5a 	bl	8003bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	0018      	movs	r0, r3
 8000308:	2310      	movs	r3, #16
 800030a:	001a      	movs	r2, r3
 800030c:	2100      	movs	r1, #0
 800030e:	f003 fc53 	bl	8003bb8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000312:	193b      	adds	r3, r7, r4
 8000314:	2220      	movs	r2, #32
 8000316:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000318:	193b      	adds	r3, r7, r4
 800031a:	2201      	movs	r2, #1
 800031c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800031e:	193b      	adds	r3, r7, r4
 8000320:	2200      	movs	r2, #0
 8000322:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000324:	193b      	adds	r3, r7, r4
 8000326:	0018      	movs	r0, r3
 8000328:	f000 feae 	bl	8001088 <HAL_RCC_OscConfig>
 800032c:	1e03      	subs	r3, r0, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000330:	f000 f819 	bl	8000366 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	2207      	movs	r2, #7
 8000338:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	2203      	movs	r2, #3
 800033e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2200      	movs	r2, #0
 8000344:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	2200      	movs	r2, #0
 800034a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	2101      	movs	r1, #1
 8000350:	0018      	movs	r0, r3
 8000352:	f001 fa1f 	bl	8001794 <HAL_RCC_ClockConfig>
 8000356:	1e03      	subs	r3, r0, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0x70>
  {
    Error_Handler();
 800035a:	f000 f804 	bl	8000366 <Error_Handler>
  }
}
 800035e:	46c0      	nop			; (mov r8, r8)
 8000360:	46bd      	mov	sp, r7
 8000362:	b013      	add	sp, #76	; 0x4c
 8000364:	bd90      	pop	{r4, r7, pc}

08000366 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000366:	b580      	push	{r7, lr}
 8000368:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800036a:	b672      	cpsid	i
}
 800036c:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800036e:	e7fe      	b.n	800036e <Error_Handler+0x8>

08000370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000376:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <HAL_MspInit+0x44>)
 8000378:	699a      	ldr	r2, [r3, #24]
 800037a:	4b0e      	ldr	r3, [pc, #56]	; (80003b4 <HAL_MspInit+0x44>)
 800037c:	2101      	movs	r1, #1
 800037e:	430a      	orrs	r2, r1
 8000380:	619a      	str	r2, [r3, #24]
 8000382:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <HAL_MspInit+0x44>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	2201      	movs	r2, #1
 8000388:	4013      	ands	r3, r2
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800038e:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <HAL_MspInit+0x44>)
 8000390:	69da      	ldr	r2, [r3, #28]
 8000392:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <HAL_MspInit+0x44>)
 8000394:	2180      	movs	r1, #128	; 0x80
 8000396:	0549      	lsls	r1, r1, #21
 8000398:	430a      	orrs	r2, r1
 800039a:	61da      	str	r2, [r3, #28]
 800039c:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <HAL_MspInit+0x44>)
 800039e:	69da      	ldr	r2, [r3, #28]
 80003a0:	2380      	movs	r3, #128	; 0x80
 80003a2:	055b      	lsls	r3, r3, #21
 80003a4:	4013      	ands	r3, r2
 80003a6:	603b      	str	r3, [r7, #0]
 80003a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	46bd      	mov	sp, r7
 80003ae:	b002      	add	sp, #8
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	40021000 	.word	0x40021000

080003b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003bc:	e7fe      	b.n	80003bc <NMI_Handler+0x4>

080003be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003be:	b580      	push	{r7, lr}
 80003c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003c2:	e7fe      	b.n	80003c2 <HardFault_Handler+0x4>

080003c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80003c8:	46c0      	nop			; (mov r8, r8)
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}

080003ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003ce:	b580      	push	{r7, lr}
 80003d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003d2:	46c0      	nop			; (mov r8, r8)
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}

080003d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003dc:	f000 fa14 	bl	8000808 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003e0:	46c0      	nop			; (mov r8, r8)
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
	...

080003e8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 80003ec:	4b03      	ldr	r3, [pc, #12]	; (80003fc <DMA1_Channel2_3_IRQHandler+0x14>)
 80003ee:	0018      	movs	r0, r3
 80003f0:	f000 fbf7 	bl	8000be2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80003f4:	46c0      	nop			; (mov r8, r8)
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	20000130 	.word	0x20000130

08000400 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000404:	46c0      	nop			; (mov r8, r8)
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
	...

0800040c <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim3_ch4_up;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b08a      	sub	sp, #40	; 0x28
 8000410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000412:	2320      	movs	r3, #32
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	0018      	movs	r0, r3
 8000418:	2308      	movs	r3, #8
 800041a:	001a      	movs	r2, r3
 800041c:	2100      	movs	r1, #0
 800041e:	f003 fbcb 	bl	8003bb8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	0018      	movs	r0, r3
 8000426:	231c      	movs	r3, #28
 8000428:	001a      	movs	r2, r3
 800042a:	2100      	movs	r1, #0
 800042c:	f003 fbc4 	bl	8003bb8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000430:	4b24      	ldr	r3, [pc, #144]	; (80004c4 <MX_TIM3_Init+0xb8>)
 8000432:	4a25      	ldr	r2, [pc, #148]	; (80004c8 <MX_TIM3_Init+0xbc>)
 8000434:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000436:	4b23      	ldr	r3, [pc, #140]	; (80004c4 <MX_TIM3_Init+0xb8>)
 8000438:	2200      	movs	r2, #0
 800043a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800043c:	4b21      	ldr	r3, [pc, #132]	; (80004c4 <MX_TIM3_Init+0xb8>)
 800043e:	2200      	movs	r2, #0
 8000440:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60;
 8000442:	4b20      	ldr	r3, [pc, #128]	; (80004c4 <MX_TIM3_Init+0xb8>)
 8000444:	223c      	movs	r2, #60	; 0x3c
 8000446:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000448:	4b1e      	ldr	r3, [pc, #120]	; (80004c4 <MX_TIM3_Init+0xb8>)
 800044a:	2200      	movs	r2, #0
 800044c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800044e:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <MX_TIM3_Init+0xb8>)
 8000450:	2200      	movs	r2, #0
 8000452:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000454:	4b1b      	ldr	r3, [pc, #108]	; (80004c4 <MX_TIM3_Init+0xb8>)
 8000456:	0018      	movs	r0, r3
 8000458:	f001 fb16 	bl	8001a88 <HAL_TIM_PWM_Init>
 800045c:	1e03      	subs	r3, r0, #0
 800045e:	d001      	beq.n	8000464 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000460:	f7ff ff81 	bl	8000366 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000464:	2120      	movs	r1, #32
 8000466:	187b      	adds	r3, r7, r1
 8000468:	2200      	movs	r2, #0
 800046a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800046c:	187b      	adds	r3, r7, r1
 800046e:	2200      	movs	r2, #0
 8000470:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000472:	187a      	adds	r2, r7, r1
 8000474:	4b13      	ldr	r3, [pc, #76]	; (80004c4 <MX_TIM3_Init+0xb8>)
 8000476:	0011      	movs	r1, r2
 8000478:	0018      	movs	r0, r3
 800047a:	f002 fa95 	bl	80029a8 <HAL_TIMEx_MasterConfigSynchronization>
 800047e:	1e03      	subs	r3, r0, #0
 8000480:	d001      	beq.n	8000486 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000482:	f7ff ff70 	bl	8000366 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	2260      	movs	r2, #96	; 0x60
 800048a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	2200      	movs	r2, #0
 8000490:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	2200      	movs	r2, #0
 8000496:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	2200      	movs	r2, #0
 800049c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800049e:	1d39      	adds	r1, r7, #4
 80004a0:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <MX_TIM3_Init+0xb8>)
 80004a2:	220c      	movs	r2, #12
 80004a4:	0018      	movs	r0, r3
 80004a6:	f001 fdcf 	bl	8002048 <HAL_TIM_PWM_ConfigChannel>
 80004aa:	1e03      	subs	r3, r0, #0
 80004ac:	d001      	beq.n	80004b2 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80004ae:	f7ff ff5a 	bl	8000366 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80004b2:	4b04      	ldr	r3, [pc, #16]	; (80004c4 <MX_TIM3_Init+0xb8>)
 80004b4:	0018      	movs	r0, r3
 80004b6:	f000 f85f 	bl	8000578 <HAL_TIM_MspPostInit>

}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	46bd      	mov	sp, r7
 80004be:	b00a      	add	sp, #40	; 0x28
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	2000007c 	.word	0x2000007c
 80004c8:	40000400 	.word	0x40000400

080004cc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a23      	ldr	r2, [pc, #140]	; (8000568 <HAL_TIM_PWM_MspInit+0x9c>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d140      	bne.n	8000560 <HAL_TIM_PWM_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80004de:	4b23      	ldr	r3, [pc, #140]	; (800056c <HAL_TIM_PWM_MspInit+0xa0>)
 80004e0:	69da      	ldr	r2, [r3, #28]
 80004e2:	4b22      	ldr	r3, [pc, #136]	; (800056c <HAL_TIM_PWM_MspInit+0xa0>)
 80004e4:	2102      	movs	r1, #2
 80004e6:	430a      	orrs	r2, r1
 80004e8:	61da      	str	r2, [r3, #28]
 80004ea:	4b20      	ldr	r3, [pc, #128]	; (800056c <HAL_TIM_PWM_MspInit+0xa0>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	2202      	movs	r2, #2
 80004f0:	4013      	ands	r3, r2
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 80004f6:	4b1e      	ldr	r3, [pc, #120]	; (8000570 <HAL_TIM_PWM_MspInit+0xa4>)
 80004f8:	4a1e      	ldr	r2, [pc, #120]	; (8000574 <HAL_TIM_PWM_MspInit+0xa8>)
 80004fa:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80004fc:	4b1c      	ldr	r3, [pc, #112]	; (8000570 <HAL_TIM_PWM_MspInit+0xa4>)
 80004fe:	2210      	movs	r2, #16
 8000500:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000502:	4b1b      	ldr	r3, [pc, #108]	; (8000570 <HAL_TIM_PWM_MspInit+0xa4>)
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8000508:	4b19      	ldr	r3, [pc, #100]	; (8000570 <HAL_TIM_PWM_MspInit+0xa4>)
 800050a:	2280      	movs	r2, #128	; 0x80
 800050c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800050e:	4b18      	ldr	r3, [pc, #96]	; (8000570 <HAL_TIM_PWM_MspInit+0xa4>)
 8000510:	2280      	movs	r2, #128	; 0x80
 8000512:	0052      	lsls	r2, r2, #1
 8000514:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000516:	4b16      	ldr	r3, [pc, #88]	; (8000570 <HAL_TIM_PWM_MspInit+0xa4>)
 8000518:	2200      	movs	r2, #0
 800051a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_CIRCULAR;
 800051c:	4b14      	ldr	r3, [pc, #80]	; (8000570 <HAL_TIM_PWM_MspInit+0xa4>)
 800051e:	2220      	movs	r2, #32
 8000520:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8000522:	4b13      	ldr	r3, [pc, #76]	; (8000570 <HAL_TIM_PWM_MspInit+0xa4>)
 8000524:	2200      	movs	r2, #0
 8000526:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8000528:	4b11      	ldr	r3, [pc, #68]	; (8000570 <HAL_TIM_PWM_MspInit+0xa4>)
 800052a:	0018      	movs	r0, r3
 800052c:	f000 fa66 	bl	80009fc <HAL_DMA_Init>
 8000530:	1e03      	subs	r3, r0, #0
 8000532:	d001      	beq.n	8000538 <HAL_TIM_PWM_MspInit+0x6c>
    {
      Error_Handler();
 8000534:	f7ff ff17 	bl	8000366 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4a0d      	ldr	r2, [pc, #52]	; (8000570 <HAL_TIM_PWM_MspInit+0xa4>)
 800053c:	631a      	str	r2, [r3, #48]	; 0x30
 800053e:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <HAL_TIM_PWM_MspInit+0xa4>)
 8000540:	687a      	ldr	r2, [r7, #4]
 8000542:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4a0a      	ldr	r2, [pc, #40]	; (8000570 <HAL_TIM_PWM_MspInit+0xa4>)
 8000548:	621a      	str	r2, [r3, #32]
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <HAL_TIM_PWM_MspInit+0xa4>)
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN TIM3_MspInit 1 */

	HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, 0, 0);
 8000550:	2200      	movs	r2, #0
 8000552:	2100      	movs	r1, #0
 8000554:	200b      	movs	r0, #11
 8000556:	f000 fa1f 	bl	8000998 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 800055a:	200b      	movs	r0, #11
 800055c:	f000 fa31 	bl	80009c2 <HAL_NVIC_EnableIRQ>
//

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000560:	46c0      	nop			; (mov r8, r8)
 8000562:	46bd      	mov	sp, r7
 8000564:	b004      	add	sp, #16
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40000400 	.word	0x40000400
 800056c:	40021000 	.word	0x40021000
 8000570:	20000130 	.word	0x20000130
 8000574:	40020030 	.word	0x40020030

08000578 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000578:	b590      	push	{r4, r7, lr}
 800057a:	b089      	sub	sp, #36	; 0x24
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000580:	240c      	movs	r4, #12
 8000582:	193b      	adds	r3, r7, r4
 8000584:	0018      	movs	r0, r3
 8000586:	2314      	movs	r3, #20
 8000588:	001a      	movs	r2, r3
 800058a:	2100      	movs	r1, #0
 800058c:	f003 fb14 	bl	8003bb8 <memset>
  if(timHandle->Instance==TIM3)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a15      	ldr	r2, [pc, #84]	; (80005ec <HAL_TIM_MspPostInit+0x74>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d123      	bne.n	80005e2 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800059a:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <HAL_TIM_MspPostInit+0x78>)
 800059c:	695a      	ldr	r2, [r3, #20]
 800059e:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <HAL_TIM_MspPostInit+0x78>)
 80005a0:	2180      	movs	r1, #128	; 0x80
 80005a2:	02c9      	lsls	r1, r1, #11
 80005a4:	430a      	orrs	r2, r1
 80005a6:	615a      	str	r2, [r3, #20]
 80005a8:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <HAL_TIM_MspPostInit+0x78>)
 80005aa:	695a      	ldr	r2, [r3, #20]
 80005ac:	2380      	movs	r3, #128	; 0x80
 80005ae:	02db      	lsls	r3, r3, #11
 80005b0:	4013      	ands	r3, r2
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005b6:	0021      	movs	r1, r4
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	2202      	movs	r2, #2
 80005bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	2202      	movs	r2, #2
 80005c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	2200      	movs	r2, #0
 80005ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2201      	movs	r2, #1
 80005d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	4a06      	ldr	r2, [pc, #24]	; (80005f4 <HAL_TIM_MspPostInit+0x7c>)
 80005da:	0019      	movs	r1, r3
 80005dc:	0010      	movs	r0, r2
 80005de:	f000 fbeb 	bl	8000db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	46bd      	mov	sp, r7
 80005e6:	b009      	add	sp, #36	; 0x24
 80005e8:	bd90      	pop	{r4, r7, pc}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	40000400 	.word	0x40000400
 80005f0:	40021000 	.word	0x40021000
 80005f4:	48000400 	.word	0x48000400

080005f8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005fc:	4b14      	ldr	r3, [pc, #80]	; (8000650 <MX_USART2_UART_Init+0x58>)
 80005fe:	4a15      	ldr	r2, [pc, #84]	; (8000654 <MX_USART2_UART_Init+0x5c>)
 8000600:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000602:	4b13      	ldr	r3, [pc, #76]	; (8000650 <MX_USART2_UART_Init+0x58>)
 8000604:	2296      	movs	r2, #150	; 0x96
 8000606:	0212      	lsls	r2, r2, #8
 8000608:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_USART2_UART_Init+0x58>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_USART2_UART_Init+0x58>)
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_USART2_UART_Init+0x58>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_USART2_UART_Init+0x58>)
 800061e:	220c      	movs	r2, #12
 8000620:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <MX_USART2_UART_Init+0x58>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000628:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_USART2_UART_Init+0x58>)
 800062a:	2200      	movs	r2, #0
 800062c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <MX_USART2_UART_Init+0x58>)
 8000630:	2200      	movs	r2, #0
 8000632:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_USART2_UART_Init+0x58>)
 8000636:	2200      	movs	r2, #0
 8000638:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800063a:	4b05      	ldr	r3, [pc, #20]	; (8000650 <MX_USART2_UART_Init+0x58>)
 800063c:	0018      	movs	r0, r3
 800063e:	f002 fa23 	bl	8002a88 <HAL_UART_Init>
 8000642:	1e03      	subs	r3, r0, #0
 8000644:	d001      	beq.n	800064a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000646:	f7ff fe8e 	bl	8000366 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000174 	.word	0x20000174
 8000654:	40004400 	.word	0x40004400

08000658 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b08b      	sub	sp, #44	; 0x2c
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	2414      	movs	r4, #20
 8000662:	193b      	adds	r3, r7, r4
 8000664:	0018      	movs	r0, r3
 8000666:	2314      	movs	r3, #20
 8000668:	001a      	movs	r2, r3
 800066a:	2100      	movs	r1, #0
 800066c:	f003 faa4 	bl	8003bb8 <memset>
  if(uartHandle->Instance==USART2)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <HAL_UART_MspInit+0x90>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d132      	bne.n	80006e0 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800067a:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <HAL_UART_MspInit+0x94>)
 800067c:	69da      	ldr	r2, [r3, #28]
 800067e:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <HAL_UART_MspInit+0x94>)
 8000680:	2180      	movs	r1, #128	; 0x80
 8000682:	0289      	lsls	r1, r1, #10
 8000684:	430a      	orrs	r2, r1
 8000686:	61da      	str	r2, [r3, #28]
 8000688:	4b18      	ldr	r3, [pc, #96]	; (80006ec <HAL_UART_MspInit+0x94>)
 800068a:	69da      	ldr	r2, [r3, #28]
 800068c:	2380      	movs	r3, #128	; 0x80
 800068e:	029b      	lsls	r3, r3, #10
 8000690:	4013      	ands	r3, r2
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <HAL_UART_MspInit+0x94>)
 8000698:	695a      	ldr	r2, [r3, #20]
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <HAL_UART_MspInit+0x94>)
 800069c:	2180      	movs	r1, #128	; 0x80
 800069e:	0289      	lsls	r1, r1, #10
 80006a0:	430a      	orrs	r2, r1
 80006a2:	615a      	str	r2, [r3, #20]
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <HAL_UART_MspInit+0x94>)
 80006a6:	695a      	ldr	r2, [r3, #20]
 80006a8:	2380      	movs	r3, #128	; 0x80
 80006aa:	029b      	lsls	r3, r3, #10
 80006ac:	4013      	ands	r3, r2
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80006b2:	0021      	movs	r1, r4
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	4a0e      	ldr	r2, [pc, #56]	; (80006f0 <HAL_UART_MspInit+0x98>)
 80006b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2202      	movs	r2, #2
 80006be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2203      	movs	r2, #3
 80006ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2201      	movs	r2, #1
 80006d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d2:	187a      	adds	r2, r7, r1
 80006d4:	2390      	movs	r3, #144	; 0x90
 80006d6:	05db      	lsls	r3, r3, #23
 80006d8:	0011      	movs	r1, r2
 80006da:	0018      	movs	r0, r3
 80006dc:	f000 fb6c 	bl	8000db8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b00b      	add	sp, #44	; 0x2c
 80006e6:	bd90      	pop	{r4, r7, pc}
 80006e8:	40004400 	.word	0x40004400
 80006ec:	40021000 	.word	0x40021000
 80006f0:	00008004 	.word	0x00008004

080006f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006f4:	4813      	ldr	r0, [pc, #76]	; (8000744 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006f6:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80006f8:	4813      	ldr	r0, [pc, #76]	; (8000748 <LoopForever+0x6>)
    LDR R1, [R0]
 80006fa:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80006fc:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80006fe:	4a13      	ldr	r2, [pc, #76]	; (800074c <LoopForever+0xa>)
    CMP R1, R2
 8000700:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000702:	d105      	bne.n	8000710 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000704:	4812      	ldr	r0, [pc, #72]	; (8000750 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000706:	4913      	ldr	r1, [pc, #76]	; (8000754 <LoopForever+0x12>)
    STR R1, [R0]
 8000708:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800070a:	4813      	ldr	r0, [pc, #76]	; (8000758 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800070c:	4913      	ldr	r1, [pc, #76]	; (800075c <LoopForever+0x1a>)
    STR R1, [R0]
 800070e:	6001      	str	r1, [r0, #0]

08000710 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000710:	4813      	ldr	r0, [pc, #76]	; (8000760 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000712:	4914      	ldr	r1, [pc, #80]	; (8000764 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000714:	4a14      	ldr	r2, [pc, #80]	; (8000768 <LoopForever+0x26>)
  movs r3, #0
 8000716:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000718:	e002      	b.n	8000720 <LoopCopyDataInit>

0800071a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800071a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800071c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800071e:	3304      	adds	r3, #4

08000720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000724:	d3f9      	bcc.n	800071a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000726:	4a11      	ldr	r2, [pc, #68]	; (800076c <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000728:	4c11      	ldr	r4, [pc, #68]	; (8000770 <LoopForever+0x2e>)
  movs r3, #0
 800072a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800072c:	e001      	b.n	8000732 <LoopFillZerobss>

0800072e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800072e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000730:	3204      	adds	r2, #4

08000732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000734:	d3fb      	bcc.n	800072e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000736:	f7ff fe63 	bl	8000400 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800073a:	f003 fa19 	bl	8003b70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800073e:	f7ff fdc1 	bl	80002c4 <main>

08000742 <LoopForever>:

LoopForever:
    b LoopForever
 8000742:	e7fe      	b.n	8000742 <LoopForever>
  ldr   r0, =_estack
 8000744:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000748:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800074c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000750:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000754:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000758:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 800075c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000764:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000768:	08003c20 	.word	0x08003c20
  ldr r2, =_sbss
 800076c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000770:	200001fc 	.word	0x200001fc

08000774 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000774:	e7fe      	b.n	8000774 <ADC1_IRQHandler>
	...

08000778 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <HAL_Init+0x24>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <HAL_Init+0x24>)
 8000782:	2110      	movs	r1, #16
 8000784:	430a      	orrs	r2, r1
 8000786:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000788:	2000      	movs	r0, #0
 800078a:	f000 f809 	bl	80007a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800078e:	f7ff fdef 	bl	8000370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000792:	2300      	movs	r3, #0
}
 8000794:	0018      	movs	r0, r3
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	40022000 	.word	0x40022000

080007a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a0:	b590      	push	{r4, r7, lr}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <HAL_InitTick+0x5c>)
 80007aa:	681c      	ldr	r4, [r3, #0]
 80007ac:	4b14      	ldr	r3, [pc, #80]	; (8000800 <HAL_InitTick+0x60>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	0019      	movs	r1, r3
 80007b2:	23fa      	movs	r3, #250	; 0xfa
 80007b4:	0098      	lsls	r0, r3, #2
 80007b6:	f7ff fca7 	bl	8000108 <__udivsi3>
 80007ba:	0003      	movs	r3, r0
 80007bc:	0019      	movs	r1, r3
 80007be:	0020      	movs	r0, r4
 80007c0:	f7ff fca2 	bl	8000108 <__udivsi3>
 80007c4:	0003      	movs	r3, r0
 80007c6:	0018      	movs	r0, r3
 80007c8:	f000 f90b 	bl	80009e2 <HAL_SYSTICK_Config>
 80007cc:	1e03      	subs	r3, r0, #0
 80007ce:	d001      	beq.n	80007d4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80007d0:	2301      	movs	r3, #1
 80007d2:	e00f      	b.n	80007f4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b03      	cmp	r3, #3
 80007d8:	d80b      	bhi.n	80007f2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007da:	6879      	ldr	r1, [r7, #4]
 80007dc:	2301      	movs	r3, #1
 80007de:	425b      	negs	r3, r3
 80007e0:	2200      	movs	r2, #0
 80007e2:	0018      	movs	r0, r3
 80007e4:	f000 f8d8 	bl	8000998 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_InitTick+0x64>)
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80007ee:	2300      	movs	r3, #0
 80007f0:	e000      	b.n	80007f4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
}
 80007f4:	0018      	movs	r0, r3
 80007f6:	46bd      	mov	sp, r7
 80007f8:	b003      	add	sp, #12
 80007fa:	bd90      	pop	{r4, r7, pc}
 80007fc:	20000000 	.word	0x20000000
 8000800:	20000008 	.word	0x20000008
 8000804:	20000004 	.word	0x20000004

08000808 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <HAL_IncTick+0x1c>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	001a      	movs	r2, r3
 8000812:	4b05      	ldr	r3, [pc, #20]	; (8000828 <HAL_IncTick+0x20>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	18d2      	adds	r2, r2, r3
 8000818:	4b03      	ldr	r3, [pc, #12]	; (8000828 <HAL_IncTick+0x20>)
 800081a:	601a      	str	r2, [r3, #0]
}
 800081c:	46c0      	nop			; (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	20000008 	.word	0x20000008
 8000828:	200001f8 	.word	0x200001f8

0800082c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  return uwTick;
 8000830:	4b02      	ldr	r3, [pc, #8]	; (800083c <HAL_GetTick+0x10>)
 8000832:	681b      	ldr	r3, [r3, #0]
}
 8000834:	0018      	movs	r0, r3
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	200001f8 	.word	0x200001f8

08000840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	0002      	movs	r2, r0
 8000848:	1dfb      	adds	r3, r7, #7
 800084a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800084c:	1dfb      	adds	r3, r7, #7
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b7f      	cmp	r3, #127	; 0x7f
 8000852:	d809      	bhi.n	8000868 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000854:	1dfb      	adds	r3, r7, #7
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	001a      	movs	r2, r3
 800085a:	231f      	movs	r3, #31
 800085c:	401a      	ands	r2, r3
 800085e:	4b04      	ldr	r3, [pc, #16]	; (8000870 <__NVIC_EnableIRQ+0x30>)
 8000860:	2101      	movs	r1, #1
 8000862:	4091      	lsls	r1, r2
 8000864:	000a      	movs	r2, r1
 8000866:	601a      	str	r2, [r3, #0]
  }
}
 8000868:	46c0      	nop			; (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	b002      	add	sp, #8
 800086e:	bd80      	pop	{r7, pc}
 8000870:	e000e100 	.word	0xe000e100

08000874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	0002      	movs	r2, r0
 800087c:	6039      	str	r1, [r7, #0]
 800087e:	1dfb      	adds	r3, r7, #7
 8000880:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b7f      	cmp	r3, #127	; 0x7f
 8000888:	d828      	bhi.n	80008dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800088a:	4a2f      	ldr	r2, [pc, #188]	; (8000948 <__NVIC_SetPriority+0xd4>)
 800088c:	1dfb      	adds	r3, r7, #7
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b25b      	sxtb	r3, r3
 8000892:	089b      	lsrs	r3, r3, #2
 8000894:	33c0      	adds	r3, #192	; 0xc0
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	589b      	ldr	r3, [r3, r2]
 800089a:	1dfa      	adds	r2, r7, #7
 800089c:	7812      	ldrb	r2, [r2, #0]
 800089e:	0011      	movs	r1, r2
 80008a0:	2203      	movs	r2, #3
 80008a2:	400a      	ands	r2, r1
 80008a4:	00d2      	lsls	r2, r2, #3
 80008a6:	21ff      	movs	r1, #255	; 0xff
 80008a8:	4091      	lsls	r1, r2
 80008aa:	000a      	movs	r2, r1
 80008ac:	43d2      	mvns	r2, r2
 80008ae:	401a      	ands	r2, r3
 80008b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	019b      	lsls	r3, r3, #6
 80008b6:	22ff      	movs	r2, #255	; 0xff
 80008b8:	401a      	ands	r2, r3
 80008ba:	1dfb      	adds	r3, r7, #7
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	0018      	movs	r0, r3
 80008c0:	2303      	movs	r3, #3
 80008c2:	4003      	ands	r3, r0
 80008c4:	00db      	lsls	r3, r3, #3
 80008c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008c8:	481f      	ldr	r0, [pc, #124]	; (8000948 <__NVIC_SetPriority+0xd4>)
 80008ca:	1dfb      	adds	r3, r7, #7
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	b25b      	sxtb	r3, r3
 80008d0:	089b      	lsrs	r3, r3, #2
 80008d2:	430a      	orrs	r2, r1
 80008d4:	33c0      	adds	r3, #192	; 0xc0
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008da:	e031      	b.n	8000940 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008dc:	4a1b      	ldr	r2, [pc, #108]	; (800094c <__NVIC_SetPriority+0xd8>)
 80008de:	1dfb      	adds	r3, r7, #7
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	0019      	movs	r1, r3
 80008e4:	230f      	movs	r3, #15
 80008e6:	400b      	ands	r3, r1
 80008e8:	3b08      	subs	r3, #8
 80008ea:	089b      	lsrs	r3, r3, #2
 80008ec:	3306      	adds	r3, #6
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	18d3      	adds	r3, r2, r3
 80008f2:	3304      	adds	r3, #4
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	1dfa      	adds	r2, r7, #7
 80008f8:	7812      	ldrb	r2, [r2, #0]
 80008fa:	0011      	movs	r1, r2
 80008fc:	2203      	movs	r2, #3
 80008fe:	400a      	ands	r2, r1
 8000900:	00d2      	lsls	r2, r2, #3
 8000902:	21ff      	movs	r1, #255	; 0xff
 8000904:	4091      	lsls	r1, r2
 8000906:	000a      	movs	r2, r1
 8000908:	43d2      	mvns	r2, r2
 800090a:	401a      	ands	r2, r3
 800090c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	019b      	lsls	r3, r3, #6
 8000912:	22ff      	movs	r2, #255	; 0xff
 8000914:	401a      	ands	r2, r3
 8000916:	1dfb      	adds	r3, r7, #7
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	0018      	movs	r0, r3
 800091c:	2303      	movs	r3, #3
 800091e:	4003      	ands	r3, r0
 8000920:	00db      	lsls	r3, r3, #3
 8000922:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000924:	4809      	ldr	r0, [pc, #36]	; (800094c <__NVIC_SetPriority+0xd8>)
 8000926:	1dfb      	adds	r3, r7, #7
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	001c      	movs	r4, r3
 800092c:	230f      	movs	r3, #15
 800092e:	4023      	ands	r3, r4
 8000930:	3b08      	subs	r3, #8
 8000932:	089b      	lsrs	r3, r3, #2
 8000934:	430a      	orrs	r2, r1
 8000936:	3306      	adds	r3, #6
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	18c3      	adds	r3, r0, r3
 800093c:	3304      	adds	r3, #4
 800093e:	601a      	str	r2, [r3, #0]
}
 8000940:	46c0      	nop			; (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	b003      	add	sp, #12
 8000946:	bd90      	pop	{r4, r7, pc}
 8000948:	e000e100 	.word	0xe000e100
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	1e5a      	subs	r2, r3, #1
 800095c:	2380      	movs	r3, #128	; 0x80
 800095e:	045b      	lsls	r3, r3, #17
 8000960:	429a      	cmp	r2, r3
 8000962:	d301      	bcc.n	8000968 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000964:	2301      	movs	r3, #1
 8000966:	e010      	b.n	800098a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000968:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <SysTick_Config+0x44>)
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	3a01      	subs	r2, #1
 800096e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000970:	2301      	movs	r3, #1
 8000972:	425b      	negs	r3, r3
 8000974:	2103      	movs	r1, #3
 8000976:	0018      	movs	r0, r3
 8000978:	f7ff ff7c 	bl	8000874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <SysTick_Config+0x44>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000982:	4b04      	ldr	r3, [pc, #16]	; (8000994 <SysTick_Config+0x44>)
 8000984:	2207      	movs	r2, #7
 8000986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000988:	2300      	movs	r3, #0
}
 800098a:	0018      	movs	r0, r3
 800098c:	46bd      	mov	sp, r7
 800098e:	b002      	add	sp, #8
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	e000e010 	.word	0xe000e010

08000998 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	60b9      	str	r1, [r7, #8]
 80009a0:	607a      	str	r2, [r7, #4]
 80009a2:	210f      	movs	r1, #15
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	1c02      	adds	r2, r0, #0
 80009a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009aa:	68ba      	ldr	r2, [r7, #8]
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	b25b      	sxtb	r3, r3
 80009b2:	0011      	movs	r1, r2
 80009b4:	0018      	movs	r0, r3
 80009b6:	f7ff ff5d 	bl	8000874 <__NVIC_SetPriority>
}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	46bd      	mov	sp, r7
 80009be:	b004      	add	sp, #16
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b082      	sub	sp, #8
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	0002      	movs	r2, r0
 80009ca:	1dfb      	adds	r3, r7, #7
 80009cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009ce:	1dfb      	adds	r3, r7, #7
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	b25b      	sxtb	r3, r3
 80009d4:	0018      	movs	r0, r3
 80009d6:	f7ff ff33 	bl	8000840 <__NVIC_EnableIRQ>
}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	b002      	add	sp, #8
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b082      	sub	sp, #8
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	0018      	movs	r0, r3
 80009ee:	f7ff ffaf 	bl	8000950 <SysTick_Config>
 80009f2:	0003      	movs	r3, r0
}
 80009f4:	0018      	movs	r0, r3
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b002      	add	sp, #8
 80009fa:	bd80      	pop	{r7, pc}

080009fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d101      	bne.n	8000a12 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e036      	b.n	8000a80 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2221      	movs	r2, #33	; 0x21
 8000a16:	2102      	movs	r1, #2
 8000a18:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	4a18      	ldr	r2, [pc, #96]	; (8000a88 <HAL_DMA_Init+0x8c>)
 8000a26:	4013      	ands	r3, r2
 8000a28:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000a32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	695b      	ldr	r3, [r3, #20]
 8000a44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	69db      	ldr	r3, [r3, #28]
 8000a50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	68fa      	ldr	r2, [r7, #12]
 8000a5e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	0018      	movs	r0, r3
 8000a64:	f000 f98c 	bl	8000d80 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2221      	movs	r2, #33	; 0x21
 8000a72:	2101      	movs	r1, #1
 8000a74:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2220      	movs	r2, #32
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000a7e:	2300      	movs	r3, #0
}  
 8000a80:	0018      	movs	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b004      	add	sp, #16
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	ffffc00f 	.word	0xffffc00f

08000a8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
 8000a98:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000a9a:	2317      	movs	r3, #23
 8000a9c:	18fb      	adds	r3, r7, r3
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	2220      	movs	r2, #32
 8000aa6:	5c9b      	ldrb	r3, [r3, r2]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d101      	bne.n	8000ab0 <HAL_DMA_Start_IT+0x24>
 8000aac:	2302      	movs	r3, #2
 8000aae:	e04f      	b.n	8000b50 <HAL_DMA_Start_IT+0xc4>
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	2220      	movs	r2, #32
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	2221      	movs	r2, #33	; 0x21
 8000abc:	5c9b      	ldrb	r3, [r3, r2]
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d13a      	bne.n	8000b3a <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	2221      	movs	r2, #33	; 0x21
 8000ac8:	2102      	movs	r1, #2
 8000aca:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2101      	movs	r1, #1
 8000ade:	438a      	bics	r2, r1
 8000ae0:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	68b9      	ldr	r1, [r7, #8]
 8000ae8:	68f8      	ldr	r0, [r7, #12]
 8000aea:	f000 f91c 	bl	8000d26 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d008      	beq.n	8000b08 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	210e      	movs	r1, #14
 8000b02:	430a      	orrs	r2, r1
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	e00f      	b.n	8000b28 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	210a      	movs	r1, #10
 8000b14:	430a      	orrs	r2, r1
 8000b16:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2104      	movs	r1, #4
 8000b24:	438a      	bics	r2, r1
 8000b26:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2101      	movs	r1, #1
 8000b34:	430a      	orrs	r2, r1
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	e007      	b.n	8000b4a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	2220      	movs	r2, #32
 8000b3e:	2100      	movs	r1, #0
 8000b40:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000b42:	2317      	movs	r3, #23
 8000b44:	18fb      	adds	r3, r7, r3
 8000b46:	2202      	movs	r2, #2
 8000b48:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8000b4a:	2317      	movs	r3, #23
 8000b4c:	18fb      	adds	r3, r7, r3
 8000b4e:	781b      	ldrb	r3, [r3, #0]
} 
 8000b50:	0018      	movs	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b006      	add	sp, #24
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b60:	210f      	movs	r1, #15
 8000b62:	187b      	adds	r3, r7, r1
 8000b64:	2200      	movs	r2, #0
 8000b66:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2221      	movs	r2, #33	; 0x21
 8000b6c:	5c9b      	ldrb	r3, [r3, r2]
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	2b02      	cmp	r3, #2
 8000b72:	d006      	beq.n	8000b82 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2204      	movs	r2, #4
 8000b78:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b7a:	187b      	adds	r3, r7, r1
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	701a      	strb	r2, [r3, #0]
 8000b80:	e028      	b.n	8000bd4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	210e      	movs	r1, #14
 8000b8e:	438a      	bics	r2, r1
 8000b90:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	438a      	bics	r2, r1
 8000ba0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000baa:	2101      	movs	r1, #1
 8000bac:	4091      	lsls	r1, r2
 8000bae:	000a      	movs	r2, r1
 8000bb0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2221      	movs	r2, #33	; 0x21
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2220      	movs	r2, #32
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d004      	beq.n	8000bd4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	0010      	movs	r0, r2
 8000bd2:	4798      	blx	r3
    } 
  }
  return status;
 8000bd4:	230f      	movs	r3, #15
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	781b      	ldrb	r3, [r3, #0]
}
 8000bda:	0018      	movs	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	b004      	add	sp, #16
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b084      	sub	sp, #16
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	2204      	movs	r2, #4
 8000c00:	409a      	lsls	r2, r3
 8000c02:	0013      	movs	r3, r2
 8000c04:	68fa      	ldr	r2, [r7, #12]
 8000c06:	4013      	ands	r3, r2
 8000c08:	d024      	beq.n	8000c54 <HAL_DMA_IRQHandler+0x72>
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	2204      	movs	r2, #4
 8000c0e:	4013      	ands	r3, r2
 8000c10:	d020      	beq.n	8000c54 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2220      	movs	r2, #32
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	d107      	bne.n	8000c2e <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2104      	movs	r1, #4
 8000c2a:	438a      	bics	r2, r1
 8000c2c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c36:	2104      	movs	r1, #4
 8000c38:	4091      	lsls	r1, r2
 8000c3a:	000a      	movs	r2, r1
 8000c3c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d100      	bne.n	8000c48 <HAL_DMA_IRQHandler+0x66>
 8000c46:	e06a      	b.n	8000d1e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	0010      	movs	r0, r2
 8000c50:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000c52:	e064      	b.n	8000d1e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c58:	2202      	movs	r2, #2
 8000c5a:	409a      	lsls	r2, r3
 8000c5c:	0013      	movs	r3, r2
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	4013      	ands	r3, r2
 8000c62:	d02b      	beq.n	8000cbc <HAL_DMA_IRQHandler+0xda>
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	2202      	movs	r2, #2
 8000c68:	4013      	ands	r3, r2
 8000c6a:	d027      	beq.n	8000cbc <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2220      	movs	r2, #32
 8000c74:	4013      	ands	r3, r2
 8000c76:	d10b      	bne.n	8000c90 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	210a      	movs	r1, #10
 8000c84:	438a      	bics	r2, r1
 8000c86:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2221      	movs	r2, #33	; 0x21
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c98:	2102      	movs	r1, #2
 8000c9a:	4091      	lsls	r1, r2
 8000c9c:	000a      	movs	r2, r1
 8000c9e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2220      	movs	r2, #32
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d036      	beq.n	8000d1e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	0010      	movs	r0, r2
 8000cb8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000cba:	e030      	b.n	8000d1e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc0:	2208      	movs	r2, #8
 8000cc2:	409a      	lsls	r2, r3
 8000cc4:	0013      	movs	r3, r2
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	d028      	beq.n	8000d1e <HAL_DMA_IRQHandler+0x13c>
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	2208      	movs	r2, #8
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	d024      	beq.n	8000d1e <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	210e      	movs	r1, #14
 8000ce0:	438a      	bics	r2, r1
 8000ce2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cec:	2101      	movs	r1, #1
 8000cee:	4091      	lsls	r1, r2
 8000cf0:	000a      	movs	r2, r1
 8000cf2:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2221      	movs	r2, #33	; 0x21
 8000cfe:	2101      	movs	r1, #1
 8000d00:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2220      	movs	r2, #32
 8000d06:	2100      	movs	r1, #0
 8000d08:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d005      	beq.n	8000d1e <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	0010      	movs	r0, r2
 8000d1a:	4798      	blx	r3
    }
   }
}  
 8000d1c:	e7ff      	b.n	8000d1e <HAL_DMA_IRQHandler+0x13c>
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	46bd      	mov	sp, r7
 8000d22:	b004      	add	sp, #16
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b084      	sub	sp, #16
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	60f8      	str	r0, [r7, #12]
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	607a      	str	r2, [r7, #4]
 8000d32:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	4091      	lsls	r1, r2
 8000d40:	000a      	movs	r2, r1
 8000d42:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	683a      	ldr	r2, [r7, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	2b10      	cmp	r3, #16
 8000d52:	d108      	bne.n	8000d66 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	68ba      	ldr	r2, [r7, #8]
 8000d62:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000d64:	e007      	b.n	8000d76 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	60da      	str	r2, [r3, #12]
}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	b004      	add	sp, #16
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a08      	ldr	r2, [pc, #32]	; (8000db0 <DMA_CalcBaseAndBitshift+0x30>)
 8000d8e:	4694      	mov	ip, r2
 8000d90:	4463      	add	r3, ip
 8000d92:	2114      	movs	r1, #20
 8000d94:	0018      	movs	r0, r3
 8000d96:	f7ff f9b7 	bl	8000108 <__udivsi3>
 8000d9a:	0003      	movs	r3, r0
 8000d9c:	009a      	lsls	r2, r3, #2
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a03      	ldr	r2, [pc, #12]	; (8000db4 <DMA_CalcBaseAndBitshift+0x34>)
 8000da6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000da8:	46c0      	nop			; (mov r8, r8)
 8000daa:	46bd      	mov	sp, r7
 8000dac:	b002      	add	sp, #8
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	bffdfff8 	.word	0xbffdfff8
 8000db4:	40020000 	.word	0x40020000

08000db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc6:	e149      	b.n	800105c <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2101      	movs	r1, #1
 8000dce:	697a      	ldr	r2, [r7, #20]
 8000dd0:	4091      	lsls	r1, r2
 8000dd2:	000a      	movs	r2, r1
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d100      	bne.n	8000de0 <HAL_GPIO_Init+0x28>
 8000dde:	e13a      	b.n	8001056 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	2203      	movs	r2, #3
 8000de6:	4013      	ands	r3, r2
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d005      	beq.n	8000df8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	2203      	movs	r2, #3
 8000df2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d130      	bne.n	8000e5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	2203      	movs	r2, #3
 8000e04:	409a      	lsls	r2, r3
 8000e06:	0013      	movs	r3, r2
 8000e08:	43da      	mvns	r2, r3
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	68da      	ldr	r2, [r3, #12]
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	409a      	lsls	r2, r3
 8000e1a:	0013      	movs	r3, r2
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e2e:	2201      	movs	r2, #1
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	409a      	lsls	r2, r3
 8000e34:	0013      	movs	r3, r2
 8000e36:	43da      	mvns	r2, r3
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	091b      	lsrs	r3, r3, #4
 8000e44:	2201      	movs	r2, #1
 8000e46:	401a      	ands	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	409a      	lsls	r2, r3
 8000e4c:	0013      	movs	r3, r2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	2203      	movs	r2, #3
 8000e60:	4013      	ands	r3, r2
 8000e62:	2b03      	cmp	r3, #3
 8000e64:	d017      	beq.n	8000e96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	2203      	movs	r2, #3
 8000e72:	409a      	lsls	r2, r3
 8000e74:	0013      	movs	r3, r2
 8000e76:	43da      	mvns	r2, r3
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	689a      	ldr	r2, [r3, #8]
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	409a      	lsls	r2, r3
 8000e88:	0013      	movs	r3, r2
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d123      	bne.n	8000eea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	08da      	lsrs	r2, r3, #3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	3208      	adds	r2, #8
 8000eaa:	0092      	lsls	r2, r2, #2
 8000eac:	58d3      	ldr	r3, [r2, r3]
 8000eae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	2207      	movs	r2, #7
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	220f      	movs	r2, #15
 8000eba:	409a      	lsls	r2, r3
 8000ebc:	0013      	movs	r3, r2
 8000ebe:	43da      	mvns	r2, r3
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	691a      	ldr	r2, [r3, #16]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	2107      	movs	r1, #7
 8000ece:	400b      	ands	r3, r1
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	409a      	lsls	r2, r3
 8000ed4:	0013      	movs	r3, r2
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	08da      	lsrs	r2, r3, #3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3208      	adds	r2, #8
 8000ee4:	0092      	lsls	r2, r2, #2
 8000ee6:	6939      	ldr	r1, [r7, #16]
 8000ee8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	409a      	lsls	r2, r3
 8000ef8:	0013      	movs	r3, r2
 8000efa:	43da      	mvns	r2, r3
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	2203      	movs	r2, #3
 8000f08:	401a      	ands	r2, r3
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	409a      	lsls	r2, r3
 8000f10:	0013      	movs	r3, r2
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685a      	ldr	r2, [r3, #4]
 8000f22:	23c0      	movs	r3, #192	; 0xc0
 8000f24:	029b      	lsls	r3, r3, #10
 8000f26:	4013      	ands	r3, r2
 8000f28:	d100      	bne.n	8000f2c <HAL_GPIO_Init+0x174>
 8000f2a:	e094      	b.n	8001056 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2c:	4b51      	ldr	r3, [pc, #324]	; (8001074 <HAL_GPIO_Init+0x2bc>)
 8000f2e:	699a      	ldr	r2, [r3, #24]
 8000f30:	4b50      	ldr	r3, [pc, #320]	; (8001074 <HAL_GPIO_Init+0x2bc>)
 8000f32:	2101      	movs	r1, #1
 8000f34:	430a      	orrs	r2, r1
 8000f36:	619a      	str	r2, [r3, #24]
 8000f38:	4b4e      	ldr	r3, [pc, #312]	; (8001074 <HAL_GPIO_Init+0x2bc>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	4013      	ands	r3, r2
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f44:	4a4c      	ldr	r2, [pc, #304]	; (8001078 <HAL_GPIO_Init+0x2c0>)
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	089b      	lsrs	r3, r3, #2
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	589b      	ldr	r3, [r3, r2]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	2203      	movs	r2, #3
 8000f56:	4013      	ands	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	409a      	lsls	r2, r3
 8000f5e:	0013      	movs	r3, r2
 8000f60:	43da      	mvns	r2, r3
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	2390      	movs	r3, #144	; 0x90
 8000f6c:	05db      	lsls	r3, r3, #23
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d00d      	beq.n	8000f8e <HAL_GPIO_Init+0x1d6>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a41      	ldr	r2, [pc, #260]	; (800107c <HAL_GPIO_Init+0x2c4>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d007      	beq.n	8000f8a <HAL_GPIO_Init+0x1d2>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a40      	ldr	r2, [pc, #256]	; (8001080 <HAL_GPIO_Init+0x2c8>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d101      	bne.n	8000f86 <HAL_GPIO_Init+0x1ce>
 8000f82:	2302      	movs	r3, #2
 8000f84:	e004      	b.n	8000f90 <HAL_GPIO_Init+0x1d8>
 8000f86:	2305      	movs	r3, #5
 8000f88:	e002      	b.n	8000f90 <HAL_GPIO_Init+0x1d8>
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e000      	b.n	8000f90 <HAL_GPIO_Init+0x1d8>
 8000f8e:	2300      	movs	r3, #0
 8000f90:	697a      	ldr	r2, [r7, #20]
 8000f92:	2103      	movs	r1, #3
 8000f94:	400a      	ands	r2, r1
 8000f96:	0092      	lsls	r2, r2, #2
 8000f98:	4093      	lsls	r3, r2
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fa0:	4935      	ldr	r1, [pc, #212]	; (8001078 <HAL_GPIO_Init+0x2c0>)
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	089b      	lsrs	r3, r3, #2
 8000fa6:	3302      	adds	r3, #2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fae:	4b35      	ldr	r3, [pc, #212]	; (8001084 <HAL_GPIO_Init+0x2cc>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	2380      	movs	r3, #128	; 0x80
 8000fc4:	025b      	lsls	r3, r3, #9
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fd2:	4b2c      	ldr	r3, [pc, #176]	; (8001084 <HAL_GPIO_Init+0x2cc>)
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000fd8:	4b2a      	ldr	r3, [pc, #168]	; (8001084 <HAL_GPIO_Init+0x2cc>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	43da      	mvns	r2, r3
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	2380      	movs	r3, #128	; 0x80
 8000fee:	029b      	lsls	r3, r3, #10
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	d003      	beq.n	8000ffc <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ffc:	4b21      	ldr	r3, [pc, #132]	; (8001084 <HAL_GPIO_Init+0x2cc>)
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001002:	4b20      	ldr	r3, [pc, #128]	; (8001084 <HAL_GPIO_Init+0x2cc>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	43da      	mvns	r2, r3
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	4013      	ands	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	2380      	movs	r3, #128	; 0x80
 8001018:	035b      	lsls	r3, r3, #13
 800101a:	4013      	ands	r3, r2
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4313      	orrs	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <HAL_GPIO_Init+0x2cc>)
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800102c:	4b15      	ldr	r3, [pc, #84]	; (8001084 <HAL_GPIO_Init+0x2cc>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	43da      	mvns	r2, r3
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685a      	ldr	r2, [r3, #4]
 8001040:	2380      	movs	r3, #128	; 0x80
 8001042:	039b      	lsls	r3, r3, #14
 8001044:	4013      	ands	r3, r2
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <HAL_GPIO_Init+0x2cc>)
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	3301      	adds	r3, #1
 800105a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	40da      	lsrs	r2, r3
 8001064:	1e13      	subs	r3, r2, #0
 8001066:	d000      	beq.n	800106a <HAL_GPIO_Init+0x2b2>
 8001068:	e6ae      	b.n	8000dc8 <HAL_GPIO_Init+0x10>
  } 
}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	46c0      	nop			; (mov r8, r8)
 800106e:	46bd      	mov	sp, r7
 8001070:	b006      	add	sp, #24
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40021000 	.word	0x40021000
 8001078:	40010000 	.word	0x40010000
 800107c:	48000400 	.word	0x48000400
 8001080:	48000800 	.word	0x48000800
 8001084:	40010400 	.word	0x40010400

08001088 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d102      	bne.n	800109c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	f000 fb76 	bl	8001788 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2201      	movs	r2, #1
 80010a2:	4013      	ands	r3, r2
 80010a4:	d100      	bne.n	80010a8 <HAL_RCC_OscConfig+0x20>
 80010a6:	e08e      	b.n	80011c6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010a8:	4bc5      	ldr	r3, [pc, #788]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	220c      	movs	r2, #12
 80010ae:	4013      	ands	r3, r2
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	d00e      	beq.n	80010d2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010b4:	4bc2      	ldr	r3, [pc, #776]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	220c      	movs	r2, #12
 80010ba:	4013      	ands	r3, r2
 80010bc:	2b08      	cmp	r3, #8
 80010be:	d117      	bne.n	80010f0 <HAL_RCC_OscConfig+0x68>
 80010c0:	4bbf      	ldr	r3, [pc, #764]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80010c2:	685a      	ldr	r2, [r3, #4]
 80010c4:	23c0      	movs	r3, #192	; 0xc0
 80010c6:	025b      	lsls	r3, r3, #9
 80010c8:	401a      	ands	r2, r3
 80010ca:	2380      	movs	r3, #128	; 0x80
 80010cc:	025b      	lsls	r3, r3, #9
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d10e      	bne.n	80010f0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d2:	4bbb      	ldr	r3, [pc, #748]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	2380      	movs	r3, #128	; 0x80
 80010d8:	029b      	lsls	r3, r3, #10
 80010da:	4013      	ands	r3, r2
 80010dc:	d100      	bne.n	80010e0 <HAL_RCC_OscConfig+0x58>
 80010de:	e071      	b.n	80011c4 <HAL_RCC_OscConfig+0x13c>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d000      	beq.n	80010ea <HAL_RCC_OscConfig+0x62>
 80010e8:	e06c      	b.n	80011c4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	f000 fb4c 	bl	8001788 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d107      	bne.n	8001108 <HAL_RCC_OscConfig+0x80>
 80010f8:	4bb1      	ldr	r3, [pc, #708]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4bb0      	ldr	r3, [pc, #704]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80010fe:	2180      	movs	r1, #128	; 0x80
 8001100:	0249      	lsls	r1, r1, #9
 8001102:	430a      	orrs	r2, r1
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	e02f      	b.n	8001168 <HAL_RCC_OscConfig+0xe0>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d10c      	bne.n	800112a <HAL_RCC_OscConfig+0xa2>
 8001110:	4bab      	ldr	r3, [pc, #684]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4baa      	ldr	r3, [pc, #680]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001116:	49ab      	ldr	r1, [pc, #684]	; (80013c4 <HAL_RCC_OscConfig+0x33c>)
 8001118:	400a      	ands	r2, r1
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	4ba8      	ldr	r3, [pc, #672]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4ba7      	ldr	r3, [pc, #668]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001122:	49a9      	ldr	r1, [pc, #676]	; (80013c8 <HAL_RCC_OscConfig+0x340>)
 8001124:	400a      	ands	r2, r1
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	e01e      	b.n	8001168 <HAL_RCC_OscConfig+0xe0>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b05      	cmp	r3, #5
 8001130:	d10e      	bne.n	8001150 <HAL_RCC_OscConfig+0xc8>
 8001132:	4ba3      	ldr	r3, [pc, #652]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	4ba2      	ldr	r3, [pc, #648]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001138:	2180      	movs	r1, #128	; 0x80
 800113a:	02c9      	lsls	r1, r1, #11
 800113c:	430a      	orrs	r2, r1
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	4b9f      	ldr	r3, [pc, #636]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b9e      	ldr	r3, [pc, #632]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001146:	2180      	movs	r1, #128	; 0x80
 8001148:	0249      	lsls	r1, r1, #9
 800114a:	430a      	orrs	r2, r1
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	e00b      	b.n	8001168 <HAL_RCC_OscConfig+0xe0>
 8001150:	4b9b      	ldr	r3, [pc, #620]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b9a      	ldr	r3, [pc, #616]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001156:	499b      	ldr	r1, [pc, #620]	; (80013c4 <HAL_RCC_OscConfig+0x33c>)
 8001158:	400a      	ands	r2, r1
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	4b98      	ldr	r3, [pc, #608]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b97      	ldr	r3, [pc, #604]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001162:	4999      	ldr	r1, [pc, #612]	; (80013c8 <HAL_RCC_OscConfig+0x340>)
 8001164:	400a      	ands	r2, r1
 8001166:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d014      	beq.n	800119a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001170:	f7ff fb5c 	bl	800082c <HAL_GetTick>
 8001174:	0003      	movs	r3, r0
 8001176:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001178:	e008      	b.n	800118c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800117a:	f7ff fb57 	bl	800082c <HAL_GetTick>
 800117e:	0002      	movs	r2, r0
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b64      	cmp	r3, #100	; 0x64
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e2fd      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800118c:	4b8c      	ldr	r3, [pc, #560]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	2380      	movs	r3, #128	; 0x80
 8001192:	029b      	lsls	r3, r3, #10
 8001194:	4013      	ands	r3, r2
 8001196:	d0f0      	beq.n	800117a <HAL_RCC_OscConfig+0xf2>
 8001198:	e015      	b.n	80011c6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119a:	f7ff fb47 	bl	800082c <HAL_GetTick>
 800119e:	0003      	movs	r3, r0
 80011a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011a4:	f7ff fb42 	bl	800082c <HAL_GetTick>
 80011a8:	0002      	movs	r2, r0
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b64      	cmp	r3, #100	; 0x64
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e2e8      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011b6:	4b82      	ldr	r3, [pc, #520]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	2380      	movs	r3, #128	; 0x80
 80011bc:	029b      	lsls	r3, r3, #10
 80011be:	4013      	ands	r3, r2
 80011c0:	d1f0      	bne.n	80011a4 <HAL_RCC_OscConfig+0x11c>
 80011c2:	e000      	b.n	80011c6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2202      	movs	r2, #2
 80011cc:	4013      	ands	r3, r2
 80011ce:	d100      	bne.n	80011d2 <HAL_RCC_OscConfig+0x14a>
 80011d0:	e06c      	b.n	80012ac <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011d2:	4b7b      	ldr	r3, [pc, #492]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	220c      	movs	r2, #12
 80011d8:	4013      	ands	r3, r2
 80011da:	d00e      	beq.n	80011fa <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011dc:	4b78      	ldr	r3, [pc, #480]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	220c      	movs	r2, #12
 80011e2:	4013      	ands	r3, r2
 80011e4:	2b08      	cmp	r3, #8
 80011e6:	d11f      	bne.n	8001228 <HAL_RCC_OscConfig+0x1a0>
 80011e8:	4b75      	ldr	r3, [pc, #468]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	23c0      	movs	r3, #192	; 0xc0
 80011ee:	025b      	lsls	r3, r3, #9
 80011f0:	401a      	ands	r2, r3
 80011f2:	2380      	movs	r3, #128	; 0x80
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d116      	bne.n	8001228 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011fa:	4b71      	ldr	r3, [pc, #452]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2202      	movs	r2, #2
 8001200:	4013      	ands	r3, r2
 8001202:	d005      	beq.n	8001210 <HAL_RCC_OscConfig+0x188>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d001      	beq.n	8001210 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e2bb      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001210:	4b6b      	ldr	r3, [pc, #428]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	22f8      	movs	r2, #248	; 0xf8
 8001216:	4393      	bics	r3, r2
 8001218:	0019      	movs	r1, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	00da      	lsls	r2, r3, #3
 8001220:	4b67      	ldr	r3, [pc, #412]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001222:	430a      	orrs	r2, r1
 8001224:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001226:	e041      	b.n	80012ac <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d024      	beq.n	800127a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001230:	4b63      	ldr	r3, [pc, #396]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b62      	ldr	r3, [pc, #392]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001236:	2101      	movs	r1, #1
 8001238:	430a      	orrs	r2, r1
 800123a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123c:	f7ff faf6 	bl	800082c <HAL_GetTick>
 8001240:	0003      	movs	r3, r0
 8001242:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001246:	f7ff faf1 	bl	800082c <HAL_GetTick>
 800124a:	0002      	movs	r2, r0
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e297      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001258:	4b59      	ldr	r3, [pc, #356]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2202      	movs	r2, #2
 800125e:	4013      	ands	r3, r2
 8001260:	d0f1      	beq.n	8001246 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001262:	4b57      	ldr	r3, [pc, #348]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	22f8      	movs	r2, #248	; 0xf8
 8001268:	4393      	bics	r3, r2
 800126a:	0019      	movs	r1, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	00da      	lsls	r2, r3, #3
 8001272:	4b53      	ldr	r3, [pc, #332]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001274:	430a      	orrs	r2, r1
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	e018      	b.n	80012ac <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800127a:	4b51      	ldr	r3, [pc, #324]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	4b50      	ldr	r3, [pc, #320]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001280:	2101      	movs	r1, #1
 8001282:	438a      	bics	r2, r1
 8001284:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001286:	f7ff fad1 	bl	800082c <HAL_GetTick>
 800128a:	0003      	movs	r3, r0
 800128c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001290:	f7ff facc 	bl	800082c <HAL_GetTick>
 8001294:	0002      	movs	r2, r0
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e272      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a2:	4b47      	ldr	r3, [pc, #284]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2202      	movs	r2, #2
 80012a8:	4013      	ands	r3, r2
 80012aa:	d1f1      	bne.n	8001290 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2208      	movs	r2, #8
 80012b2:	4013      	ands	r3, r2
 80012b4:	d036      	beq.n	8001324 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d019      	beq.n	80012f2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012be:	4b40      	ldr	r3, [pc, #256]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80012c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012c2:	4b3f      	ldr	r3, [pc, #252]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80012c4:	2101      	movs	r1, #1
 80012c6:	430a      	orrs	r2, r1
 80012c8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ca:	f7ff faaf 	bl	800082c <HAL_GetTick>
 80012ce:	0003      	movs	r3, r0
 80012d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012d4:	f7ff faaa 	bl	800082c <HAL_GetTick>
 80012d8:	0002      	movs	r2, r0
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e250      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012e6:	4b36      	ldr	r3, [pc, #216]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80012e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ea:	2202      	movs	r2, #2
 80012ec:	4013      	ands	r3, r2
 80012ee:	d0f1      	beq.n	80012d4 <HAL_RCC_OscConfig+0x24c>
 80012f0:	e018      	b.n	8001324 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012f2:	4b33      	ldr	r3, [pc, #204]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80012f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012f6:	4b32      	ldr	r3, [pc, #200]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80012f8:	2101      	movs	r1, #1
 80012fa:	438a      	bics	r2, r1
 80012fc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012fe:	f7ff fa95 	bl	800082c <HAL_GetTick>
 8001302:	0003      	movs	r3, r0
 8001304:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001308:	f7ff fa90 	bl	800082c <HAL_GetTick>
 800130c:	0002      	movs	r2, r0
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e236      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800131a:	4b29      	ldr	r3, [pc, #164]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 800131c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131e:	2202      	movs	r2, #2
 8001320:	4013      	ands	r3, r2
 8001322:	d1f1      	bne.n	8001308 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2204      	movs	r2, #4
 800132a:	4013      	ands	r3, r2
 800132c:	d100      	bne.n	8001330 <HAL_RCC_OscConfig+0x2a8>
 800132e:	e0b5      	b.n	800149c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001330:	201f      	movs	r0, #31
 8001332:	183b      	adds	r3, r7, r0
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001338:	4b21      	ldr	r3, [pc, #132]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 800133a:	69da      	ldr	r2, [r3, #28]
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	055b      	lsls	r3, r3, #21
 8001340:	4013      	ands	r3, r2
 8001342:	d110      	bne.n	8001366 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001344:	4b1e      	ldr	r3, [pc, #120]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001346:	69da      	ldr	r2, [r3, #28]
 8001348:	4b1d      	ldr	r3, [pc, #116]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 800134a:	2180      	movs	r1, #128	; 0x80
 800134c:	0549      	lsls	r1, r1, #21
 800134e:	430a      	orrs	r2, r1
 8001350:	61da      	str	r2, [r3, #28]
 8001352:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001354:	69da      	ldr	r2, [r3, #28]
 8001356:	2380      	movs	r3, #128	; 0x80
 8001358:	055b      	lsls	r3, r3, #21
 800135a:	4013      	ands	r3, r2
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001360:	183b      	adds	r3, r7, r0
 8001362:	2201      	movs	r2, #1
 8001364:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <HAL_RCC_OscConfig+0x344>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	2380      	movs	r3, #128	; 0x80
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4013      	ands	r3, r2
 8001370:	d11a      	bne.n	80013a8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001372:	4b16      	ldr	r3, [pc, #88]	; (80013cc <HAL_RCC_OscConfig+0x344>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <HAL_RCC_OscConfig+0x344>)
 8001378:	2180      	movs	r1, #128	; 0x80
 800137a:	0049      	lsls	r1, r1, #1
 800137c:	430a      	orrs	r2, r1
 800137e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001380:	f7ff fa54 	bl	800082c <HAL_GetTick>
 8001384:	0003      	movs	r3, r0
 8001386:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001388:	e008      	b.n	800139c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800138a:	f7ff fa4f 	bl	800082c <HAL_GetTick>
 800138e:	0002      	movs	r2, r0
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b64      	cmp	r3, #100	; 0x64
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e1f5      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <HAL_RCC_OscConfig+0x344>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	2380      	movs	r3, #128	; 0x80
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	4013      	ands	r3, r2
 80013a6:	d0f0      	beq.n	800138a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d10f      	bne.n	80013d0 <HAL_RCC_OscConfig+0x348>
 80013b0:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80013b2:	6a1a      	ldr	r2, [r3, #32]
 80013b4:	4b02      	ldr	r3, [pc, #8]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80013b6:	2101      	movs	r1, #1
 80013b8:	430a      	orrs	r2, r1
 80013ba:	621a      	str	r2, [r3, #32]
 80013bc:	e036      	b.n	800142c <HAL_RCC_OscConfig+0x3a4>
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	40021000 	.word	0x40021000
 80013c4:	fffeffff 	.word	0xfffeffff
 80013c8:	fffbffff 	.word	0xfffbffff
 80013cc:	40007000 	.word	0x40007000
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d10c      	bne.n	80013f2 <HAL_RCC_OscConfig+0x36a>
 80013d8:	4bca      	ldr	r3, [pc, #808]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80013da:	6a1a      	ldr	r2, [r3, #32]
 80013dc:	4bc9      	ldr	r3, [pc, #804]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80013de:	2101      	movs	r1, #1
 80013e0:	438a      	bics	r2, r1
 80013e2:	621a      	str	r2, [r3, #32]
 80013e4:	4bc7      	ldr	r3, [pc, #796]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80013e6:	6a1a      	ldr	r2, [r3, #32]
 80013e8:	4bc6      	ldr	r3, [pc, #792]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80013ea:	2104      	movs	r1, #4
 80013ec:	438a      	bics	r2, r1
 80013ee:	621a      	str	r2, [r3, #32]
 80013f0:	e01c      	b.n	800142c <HAL_RCC_OscConfig+0x3a4>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	2b05      	cmp	r3, #5
 80013f8:	d10c      	bne.n	8001414 <HAL_RCC_OscConfig+0x38c>
 80013fa:	4bc2      	ldr	r3, [pc, #776]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80013fc:	6a1a      	ldr	r2, [r3, #32]
 80013fe:	4bc1      	ldr	r3, [pc, #772]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001400:	2104      	movs	r1, #4
 8001402:	430a      	orrs	r2, r1
 8001404:	621a      	str	r2, [r3, #32]
 8001406:	4bbf      	ldr	r3, [pc, #764]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001408:	6a1a      	ldr	r2, [r3, #32]
 800140a:	4bbe      	ldr	r3, [pc, #760]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 800140c:	2101      	movs	r1, #1
 800140e:	430a      	orrs	r2, r1
 8001410:	621a      	str	r2, [r3, #32]
 8001412:	e00b      	b.n	800142c <HAL_RCC_OscConfig+0x3a4>
 8001414:	4bbb      	ldr	r3, [pc, #748]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001416:	6a1a      	ldr	r2, [r3, #32]
 8001418:	4bba      	ldr	r3, [pc, #744]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 800141a:	2101      	movs	r1, #1
 800141c:	438a      	bics	r2, r1
 800141e:	621a      	str	r2, [r3, #32]
 8001420:	4bb8      	ldr	r3, [pc, #736]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001422:	6a1a      	ldr	r2, [r3, #32]
 8001424:	4bb7      	ldr	r3, [pc, #732]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001426:	2104      	movs	r1, #4
 8001428:	438a      	bics	r2, r1
 800142a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d014      	beq.n	800145e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001434:	f7ff f9fa 	bl	800082c <HAL_GetTick>
 8001438:	0003      	movs	r3, r0
 800143a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800143c:	e009      	b.n	8001452 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800143e:	f7ff f9f5 	bl	800082c <HAL_GetTick>
 8001442:	0002      	movs	r2, r0
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	4aaf      	ldr	r2, [pc, #700]	; (8001708 <HAL_RCC_OscConfig+0x680>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e19a      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001452:	4bac      	ldr	r3, [pc, #688]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	2202      	movs	r2, #2
 8001458:	4013      	ands	r3, r2
 800145a:	d0f0      	beq.n	800143e <HAL_RCC_OscConfig+0x3b6>
 800145c:	e013      	b.n	8001486 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145e:	f7ff f9e5 	bl	800082c <HAL_GetTick>
 8001462:	0003      	movs	r3, r0
 8001464:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001466:	e009      	b.n	800147c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001468:	f7ff f9e0 	bl	800082c <HAL_GetTick>
 800146c:	0002      	movs	r2, r0
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	4aa5      	ldr	r2, [pc, #660]	; (8001708 <HAL_RCC_OscConfig+0x680>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e185      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800147c:	4ba1      	ldr	r3, [pc, #644]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 800147e:	6a1b      	ldr	r3, [r3, #32]
 8001480:	2202      	movs	r2, #2
 8001482:	4013      	ands	r3, r2
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001486:	231f      	movs	r3, #31
 8001488:	18fb      	adds	r3, r7, r3
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d105      	bne.n	800149c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001490:	4b9c      	ldr	r3, [pc, #624]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001492:	69da      	ldr	r2, [r3, #28]
 8001494:	4b9b      	ldr	r3, [pc, #620]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001496:	499d      	ldr	r1, [pc, #628]	; (800170c <HAL_RCC_OscConfig+0x684>)
 8001498:	400a      	ands	r2, r1
 800149a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2210      	movs	r2, #16
 80014a2:	4013      	ands	r3, r2
 80014a4:	d063      	beq.n	800156e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d12a      	bne.n	8001504 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014ae:	4b95      	ldr	r3, [pc, #596]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80014b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014b2:	4b94      	ldr	r3, [pc, #592]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80014b4:	2104      	movs	r1, #4
 80014b6:	430a      	orrs	r2, r1
 80014b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80014ba:	4b92      	ldr	r3, [pc, #584]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80014bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014be:	4b91      	ldr	r3, [pc, #580]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80014c0:	2101      	movs	r1, #1
 80014c2:	430a      	orrs	r2, r1
 80014c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c6:	f7ff f9b1 	bl	800082c <HAL_GetTick>
 80014ca:	0003      	movs	r3, r0
 80014cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014d0:	f7ff f9ac 	bl	800082c <HAL_GetTick>
 80014d4:	0002      	movs	r2, r0
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e152      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80014e2:	4b88      	ldr	r3, [pc, #544]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80014e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014e6:	2202      	movs	r2, #2
 80014e8:	4013      	ands	r3, r2
 80014ea:	d0f1      	beq.n	80014d0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80014ec:	4b85      	ldr	r3, [pc, #532]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80014ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014f0:	22f8      	movs	r2, #248	; 0xf8
 80014f2:	4393      	bics	r3, r2
 80014f4:	0019      	movs	r1, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	00da      	lsls	r2, r3, #3
 80014fc:	4b81      	ldr	r3, [pc, #516]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80014fe:	430a      	orrs	r2, r1
 8001500:	635a      	str	r2, [r3, #52]	; 0x34
 8001502:	e034      	b.n	800156e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	695b      	ldr	r3, [r3, #20]
 8001508:	3305      	adds	r3, #5
 800150a:	d111      	bne.n	8001530 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800150c:	4b7d      	ldr	r3, [pc, #500]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 800150e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001510:	4b7c      	ldr	r3, [pc, #496]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001512:	2104      	movs	r1, #4
 8001514:	438a      	bics	r2, r1
 8001516:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001518:	4b7a      	ldr	r3, [pc, #488]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 800151a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800151c:	22f8      	movs	r2, #248	; 0xf8
 800151e:	4393      	bics	r3, r2
 8001520:	0019      	movs	r1, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	00da      	lsls	r2, r3, #3
 8001528:	4b76      	ldr	r3, [pc, #472]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 800152a:	430a      	orrs	r2, r1
 800152c:	635a      	str	r2, [r3, #52]	; 0x34
 800152e:	e01e      	b.n	800156e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001530:	4b74      	ldr	r3, [pc, #464]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001532:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001534:	4b73      	ldr	r3, [pc, #460]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001536:	2104      	movs	r1, #4
 8001538:	430a      	orrs	r2, r1
 800153a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800153c:	4b71      	ldr	r3, [pc, #452]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 800153e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001540:	4b70      	ldr	r3, [pc, #448]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001542:	2101      	movs	r1, #1
 8001544:	438a      	bics	r2, r1
 8001546:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001548:	f7ff f970 	bl	800082c <HAL_GetTick>
 800154c:	0003      	movs	r3, r0
 800154e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001552:	f7ff f96b 	bl	800082c <HAL_GetTick>
 8001556:	0002      	movs	r2, r0
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e111      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001564:	4b67      	ldr	r3, [pc, #412]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001568:	2202      	movs	r2, #2
 800156a:	4013      	ands	r3, r2
 800156c:	d1f1      	bne.n	8001552 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2220      	movs	r2, #32
 8001574:	4013      	ands	r3, r2
 8001576:	d05c      	beq.n	8001632 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001578:	4b62      	ldr	r3, [pc, #392]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	220c      	movs	r2, #12
 800157e:	4013      	ands	r3, r2
 8001580:	2b0c      	cmp	r3, #12
 8001582:	d00e      	beq.n	80015a2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001584:	4b5f      	ldr	r3, [pc, #380]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	220c      	movs	r2, #12
 800158a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800158c:	2b08      	cmp	r3, #8
 800158e:	d114      	bne.n	80015ba <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001590:	4b5c      	ldr	r3, [pc, #368]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	23c0      	movs	r3, #192	; 0xc0
 8001596:	025b      	lsls	r3, r3, #9
 8001598:	401a      	ands	r2, r3
 800159a:	23c0      	movs	r3, #192	; 0xc0
 800159c:	025b      	lsls	r3, r3, #9
 800159e:	429a      	cmp	r2, r3
 80015a0:	d10b      	bne.n	80015ba <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80015a2:	4b58      	ldr	r3, [pc, #352]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80015a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015a6:	2380      	movs	r3, #128	; 0x80
 80015a8:	025b      	lsls	r3, r3, #9
 80015aa:	4013      	ands	r3, r2
 80015ac:	d040      	beq.n	8001630 <HAL_RCC_OscConfig+0x5a8>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a1b      	ldr	r3, [r3, #32]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d03c      	beq.n	8001630 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e0e6      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d01b      	beq.n	80015fa <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80015c2:	4b50      	ldr	r3, [pc, #320]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80015c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015c6:	4b4f      	ldr	r3, [pc, #316]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80015c8:	2180      	movs	r1, #128	; 0x80
 80015ca:	0249      	lsls	r1, r1, #9
 80015cc:	430a      	orrs	r2, r1
 80015ce:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d0:	f7ff f92c 	bl	800082c <HAL_GetTick>
 80015d4:	0003      	movs	r3, r0
 80015d6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015da:	f7ff f927 	bl	800082c <HAL_GetTick>
 80015de:	0002      	movs	r2, r0
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e0cd      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80015ec:	4b45      	ldr	r3, [pc, #276]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80015ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	025b      	lsls	r3, r3, #9
 80015f4:	4013      	ands	r3, r2
 80015f6:	d0f0      	beq.n	80015da <HAL_RCC_OscConfig+0x552>
 80015f8:	e01b      	b.n	8001632 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80015fa:	4b42      	ldr	r3, [pc, #264]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80015fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015fe:	4b41      	ldr	r3, [pc, #260]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001600:	4943      	ldr	r1, [pc, #268]	; (8001710 <HAL_RCC_OscConfig+0x688>)
 8001602:	400a      	ands	r2, r1
 8001604:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001606:	f7ff f911 	bl	800082c <HAL_GetTick>
 800160a:	0003      	movs	r3, r0
 800160c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001610:	f7ff f90c 	bl	800082c <HAL_GetTick>
 8001614:	0002      	movs	r2, r0
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e0b2      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001622:	4b38      	ldr	r3, [pc, #224]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001626:	2380      	movs	r3, #128	; 0x80
 8001628:	025b      	lsls	r3, r3, #9
 800162a:	4013      	ands	r3, r2
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0x588>
 800162e:	e000      	b.n	8001632 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001630:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	2b00      	cmp	r3, #0
 8001638:	d100      	bne.n	800163c <HAL_RCC_OscConfig+0x5b4>
 800163a:	e0a4      	b.n	8001786 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800163c:	4b31      	ldr	r3, [pc, #196]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	220c      	movs	r2, #12
 8001642:	4013      	ands	r3, r2
 8001644:	2b08      	cmp	r3, #8
 8001646:	d100      	bne.n	800164a <HAL_RCC_OscConfig+0x5c2>
 8001648:	e078      	b.n	800173c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164e:	2b02      	cmp	r3, #2
 8001650:	d14c      	bne.n	80016ec <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001652:	4b2c      	ldr	r3, [pc, #176]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	4b2b      	ldr	r3, [pc, #172]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001658:	492e      	ldr	r1, [pc, #184]	; (8001714 <HAL_RCC_OscConfig+0x68c>)
 800165a:	400a      	ands	r2, r1
 800165c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165e:	f7ff f8e5 	bl	800082c <HAL_GetTick>
 8001662:	0003      	movs	r3, r0
 8001664:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001668:	f7ff f8e0 	bl	800082c <HAL_GetTick>
 800166c:	0002      	movs	r2, r0
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e086      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800167a:	4b22      	ldr	r3, [pc, #136]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	2380      	movs	r3, #128	; 0x80
 8001680:	049b      	lsls	r3, r3, #18
 8001682:	4013      	ands	r3, r2
 8001684:	d1f0      	bne.n	8001668 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001686:	4b1f      	ldr	r3, [pc, #124]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168a:	220f      	movs	r2, #15
 800168c:	4393      	bics	r3, r2
 800168e:	0019      	movs	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001694:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001696:	430a      	orrs	r2, r1
 8001698:	62da      	str	r2, [r3, #44]	; 0x2c
 800169a:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	4a1e      	ldr	r2, [pc, #120]	; (8001718 <HAL_RCC_OscConfig+0x690>)
 80016a0:	4013      	ands	r3, r2
 80016a2:	0019      	movs	r1, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ac:	431a      	orrs	r2, r3
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80016b0:	430a      	orrs	r2, r1
 80016b2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016b4:	4b13      	ldr	r3, [pc, #76]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80016ba:	2180      	movs	r1, #128	; 0x80
 80016bc:	0449      	lsls	r1, r1, #17
 80016be:	430a      	orrs	r2, r1
 80016c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c2:	f7ff f8b3 	bl	800082c <HAL_GetTick>
 80016c6:	0003      	movs	r3, r0
 80016c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016cc:	f7ff f8ae 	bl	800082c <HAL_GetTick>
 80016d0:	0002      	movs	r2, r0
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e054      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	2380      	movs	r3, #128	; 0x80
 80016e4:	049b      	lsls	r3, r3, #18
 80016e6:	4013      	ands	r3, r2
 80016e8:	d0f0      	beq.n	80016cc <HAL_RCC_OscConfig+0x644>
 80016ea:	e04c      	b.n	8001786 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4b04      	ldr	r3, [pc, #16]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80016f2:	4908      	ldr	r1, [pc, #32]	; (8001714 <HAL_RCC_OscConfig+0x68c>)
 80016f4:	400a      	ands	r2, r1
 80016f6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f8:	f7ff f898 	bl	800082c <HAL_GetTick>
 80016fc:	0003      	movs	r3, r0
 80016fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001700:	e015      	b.n	800172e <HAL_RCC_OscConfig+0x6a6>
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	40021000 	.word	0x40021000
 8001708:	00001388 	.word	0x00001388
 800170c:	efffffff 	.word	0xefffffff
 8001710:	fffeffff 	.word	0xfffeffff
 8001714:	feffffff 	.word	0xfeffffff
 8001718:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800171c:	f7ff f886 	bl	800082c <HAL_GetTick>
 8001720:	0002      	movs	r2, r0
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e02c      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800172e:	4b18      	ldr	r3, [pc, #96]	; (8001790 <HAL_RCC_OscConfig+0x708>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	2380      	movs	r3, #128	; 0x80
 8001734:	049b      	lsls	r3, r3, #18
 8001736:	4013      	ands	r3, r2
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0x694>
 800173a:	e024      	b.n	8001786 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001740:	2b01      	cmp	r3, #1
 8001742:	d101      	bne.n	8001748 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e01f      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001748:	4b11      	ldr	r3, [pc, #68]	; (8001790 <HAL_RCC_OscConfig+0x708>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <HAL_RCC_OscConfig+0x708>)
 8001750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001752:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	23c0      	movs	r3, #192	; 0xc0
 8001758:	025b      	lsls	r3, r3, #9
 800175a:	401a      	ands	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001760:	429a      	cmp	r2, r3
 8001762:	d10e      	bne.n	8001782 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	220f      	movs	r2, #15
 8001768:	401a      	ands	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800176e:	429a      	cmp	r2, r3
 8001770:	d107      	bne.n	8001782 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	23f0      	movs	r3, #240	; 0xf0
 8001776:	039b      	lsls	r3, r3, #14
 8001778:	401a      	ands	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800177e:	429a      	cmp	r2, r3
 8001780:	d001      	beq.n	8001786 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001786:	2300      	movs	r3, #0
}
 8001788:	0018      	movs	r0, r3
 800178a:	46bd      	mov	sp, r7
 800178c:	b008      	add	sp, #32
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40021000 	.word	0x40021000

08001794 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e0bf      	b.n	8001928 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017a8:	4b61      	ldr	r3, [pc, #388]	; (8001930 <HAL_RCC_ClockConfig+0x19c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2201      	movs	r2, #1
 80017ae:	4013      	ands	r3, r2
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d911      	bls.n	80017da <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b6:	4b5e      	ldr	r3, [pc, #376]	; (8001930 <HAL_RCC_ClockConfig+0x19c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2201      	movs	r2, #1
 80017bc:	4393      	bics	r3, r2
 80017be:	0019      	movs	r1, r3
 80017c0:	4b5b      	ldr	r3, [pc, #364]	; (8001930 <HAL_RCC_ClockConfig+0x19c>)
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c8:	4b59      	ldr	r3, [pc, #356]	; (8001930 <HAL_RCC_ClockConfig+0x19c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2201      	movs	r2, #1
 80017ce:	4013      	ands	r3, r2
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d001      	beq.n	80017da <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e0a6      	b.n	8001928 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2202      	movs	r2, #2
 80017e0:	4013      	ands	r3, r2
 80017e2:	d015      	beq.n	8001810 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2204      	movs	r2, #4
 80017ea:	4013      	ands	r3, r2
 80017ec:	d006      	beq.n	80017fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80017ee:	4b51      	ldr	r3, [pc, #324]	; (8001934 <HAL_RCC_ClockConfig+0x1a0>)
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	4b50      	ldr	r3, [pc, #320]	; (8001934 <HAL_RCC_ClockConfig+0x1a0>)
 80017f4:	21e0      	movs	r1, #224	; 0xe0
 80017f6:	00c9      	lsls	r1, r1, #3
 80017f8:	430a      	orrs	r2, r1
 80017fa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017fc:	4b4d      	ldr	r3, [pc, #308]	; (8001934 <HAL_RCC_ClockConfig+0x1a0>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	22f0      	movs	r2, #240	; 0xf0
 8001802:	4393      	bics	r3, r2
 8001804:	0019      	movs	r1, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689a      	ldr	r2, [r3, #8]
 800180a:	4b4a      	ldr	r3, [pc, #296]	; (8001934 <HAL_RCC_ClockConfig+0x1a0>)
 800180c:	430a      	orrs	r2, r1
 800180e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2201      	movs	r2, #1
 8001816:	4013      	ands	r3, r2
 8001818:	d04c      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d107      	bne.n	8001832 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001822:	4b44      	ldr	r3, [pc, #272]	; (8001934 <HAL_RCC_ClockConfig+0x1a0>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	2380      	movs	r3, #128	; 0x80
 8001828:	029b      	lsls	r3, r3, #10
 800182a:	4013      	ands	r3, r2
 800182c:	d120      	bne.n	8001870 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e07a      	b.n	8001928 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b02      	cmp	r3, #2
 8001838:	d107      	bne.n	800184a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800183a:	4b3e      	ldr	r3, [pc, #248]	; (8001934 <HAL_RCC_ClockConfig+0x1a0>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	049b      	lsls	r3, r3, #18
 8001842:	4013      	ands	r3, r2
 8001844:	d114      	bne.n	8001870 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e06e      	b.n	8001928 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b03      	cmp	r3, #3
 8001850:	d107      	bne.n	8001862 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001852:	4b38      	ldr	r3, [pc, #224]	; (8001934 <HAL_RCC_ClockConfig+0x1a0>)
 8001854:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001856:	2380      	movs	r3, #128	; 0x80
 8001858:	025b      	lsls	r3, r3, #9
 800185a:	4013      	ands	r3, r2
 800185c:	d108      	bne.n	8001870 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e062      	b.n	8001928 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001862:	4b34      	ldr	r3, [pc, #208]	; (8001934 <HAL_RCC_ClockConfig+0x1a0>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2202      	movs	r2, #2
 8001868:	4013      	ands	r3, r2
 800186a:	d101      	bne.n	8001870 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e05b      	b.n	8001928 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001870:	4b30      	ldr	r3, [pc, #192]	; (8001934 <HAL_RCC_ClockConfig+0x1a0>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2203      	movs	r2, #3
 8001876:	4393      	bics	r3, r2
 8001878:	0019      	movs	r1, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	4b2d      	ldr	r3, [pc, #180]	; (8001934 <HAL_RCC_ClockConfig+0x1a0>)
 8001880:	430a      	orrs	r2, r1
 8001882:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001884:	f7fe ffd2 	bl	800082c <HAL_GetTick>
 8001888:	0003      	movs	r3, r0
 800188a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188c:	e009      	b.n	80018a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800188e:	f7fe ffcd 	bl	800082c <HAL_GetTick>
 8001892:	0002      	movs	r2, r0
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	4a27      	ldr	r2, [pc, #156]	; (8001938 <HAL_RCC_ClockConfig+0x1a4>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e042      	b.n	8001928 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a2:	4b24      	ldr	r3, [pc, #144]	; (8001934 <HAL_RCC_ClockConfig+0x1a0>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	220c      	movs	r2, #12
 80018a8:	401a      	ands	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d1ec      	bne.n	800188e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018b4:	4b1e      	ldr	r3, [pc, #120]	; (8001930 <HAL_RCC_ClockConfig+0x19c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2201      	movs	r2, #1
 80018ba:	4013      	ands	r3, r2
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d211      	bcs.n	80018e6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c2:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <HAL_RCC_ClockConfig+0x19c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2201      	movs	r2, #1
 80018c8:	4393      	bics	r3, r2
 80018ca:	0019      	movs	r1, r3
 80018cc:	4b18      	ldr	r3, [pc, #96]	; (8001930 <HAL_RCC_ClockConfig+0x19c>)
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d4:	4b16      	ldr	r3, [pc, #88]	; (8001930 <HAL_RCC_ClockConfig+0x19c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2201      	movs	r2, #1
 80018da:	4013      	ands	r3, r2
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d001      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e020      	b.n	8001928 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2204      	movs	r2, #4
 80018ec:	4013      	ands	r3, r2
 80018ee:	d009      	beq.n	8001904 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018f0:	4b10      	ldr	r3, [pc, #64]	; (8001934 <HAL_RCC_ClockConfig+0x1a0>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	4a11      	ldr	r2, [pc, #68]	; (800193c <HAL_RCC_ClockConfig+0x1a8>)
 80018f6:	4013      	ands	r3, r2
 80018f8:	0019      	movs	r1, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <HAL_RCC_ClockConfig+0x1a0>)
 8001900:	430a      	orrs	r2, r1
 8001902:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001904:	f000 f820 	bl	8001948 <HAL_RCC_GetSysClockFreq>
 8001908:	0001      	movs	r1, r0
 800190a:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <HAL_RCC_ClockConfig+0x1a0>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	091b      	lsrs	r3, r3, #4
 8001910:	220f      	movs	r2, #15
 8001912:	4013      	ands	r3, r2
 8001914:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <HAL_RCC_ClockConfig+0x1ac>)
 8001916:	5cd3      	ldrb	r3, [r2, r3]
 8001918:	000a      	movs	r2, r1
 800191a:	40da      	lsrs	r2, r3
 800191c:	4b09      	ldr	r3, [pc, #36]	; (8001944 <HAL_RCC_ClockConfig+0x1b0>)
 800191e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001920:	2000      	movs	r0, #0
 8001922:	f7fe ff3d 	bl	80007a0 <HAL_InitTick>
  
  return HAL_OK;
 8001926:	2300      	movs	r3, #0
}
 8001928:	0018      	movs	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	b004      	add	sp, #16
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40022000 	.word	0x40022000
 8001934:	40021000 	.word	0x40021000
 8001938:	00001388 	.word	0x00001388
 800193c:	fffff8ff 	.word	0xfffff8ff
 8001940:	08003c00 	.word	0x08003c00
 8001944:	20000000 	.word	0x20000000

08001948 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b08f      	sub	sp, #60	; 0x3c
 800194c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800194e:	2314      	movs	r3, #20
 8001950:	18fb      	adds	r3, r7, r3
 8001952:	4a38      	ldr	r2, [pc, #224]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xec>)
 8001954:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001956:	c313      	stmia	r3!, {r0, r1, r4}
 8001958:	6812      	ldr	r2, [r2, #0]
 800195a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	4a36      	ldr	r2, [pc, #216]	; (8001a38 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001960:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001962:	c313      	stmia	r3!, {r0, r1, r4}
 8001964:	6812      	ldr	r2, [r2, #0]
 8001966:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800196c:	2300      	movs	r3, #0
 800196e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001970:	2300      	movs	r3, #0
 8001972:	637b      	str	r3, [r7, #52]	; 0x34
 8001974:	2300      	movs	r3, #0
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800197c:	4b2f      	ldr	r3, [pc, #188]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xf4>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001984:	220c      	movs	r2, #12
 8001986:	4013      	ands	r3, r2
 8001988:	2b0c      	cmp	r3, #12
 800198a:	d047      	beq.n	8001a1c <HAL_RCC_GetSysClockFreq+0xd4>
 800198c:	d849      	bhi.n	8001a22 <HAL_RCC_GetSysClockFreq+0xda>
 800198e:	2b04      	cmp	r3, #4
 8001990:	d002      	beq.n	8001998 <HAL_RCC_GetSysClockFreq+0x50>
 8001992:	2b08      	cmp	r3, #8
 8001994:	d003      	beq.n	800199e <HAL_RCC_GetSysClockFreq+0x56>
 8001996:	e044      	b.n	8001a22 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001998:	4b29      	ldr	r3, [pc, #164]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 800199a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800199c:	e044      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800199e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a0:	0c9b      	lsrs	r3, r3, #18
 80019a2:	220f      	movs	r2, #15
 80019a4:	4013      	ands	r3, r2
 80019a6:	2214      	movs	r2, #20
 80019a8:	18ba      	adds	r2, r7, r2
 80019aa:	5cd3      	ldrb	r3, [r2, r3]
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80019ae:	4b23      	ldr	r3, [pc, #140]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xf4>)
 80019b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b2:	220f      	movs	r2, #15
 80019b4:	4013      	ands	r3, r2
 80019b6:	1d3a      	adds	r2, r7, #4
 80019b8:	5cd3      	ldrb	r3, [r2, r3]
 80019ba:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80019bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019be:	23c0      	movs	r3, #192	; 0xc0
 80019c0:	025b      	lsls	r3, r3, #9
 80019c2:	401a      	ands	r2, r3
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	025b      	lsls	r3, r3, #9
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d109      	bne.n	80019e0 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019ce:	481c      	ldr	r0, [pc, #112]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019d0:	f7fe fb9a 	bl	8000108 <__udivsi3>
 80019d4:	0003      	movs	r3, r0
 80019d6:	001a      	movs	r2, r3
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	4353      	muls	r3, r2
 80019dc:	637b      	str	r3, [r7, #52]	; 0x34
 80019de:	e01a      	b.n	8001a16 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80019e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019e2:	23c0      	movs	r3, #192	; 0xc0
 80019e4:	025b      	lsls	r3, r3, #9
 80019e6:	401a      	ands	r2, r3
 80019e8:	23c0      	movs	r3, #192	; 0xc0
 80019ea:	025b      	lsls	r3, r3, #9
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d109      	bne.n	8001a04 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019f2:	4814      	ldr	r0, [pc, #80]	; (8001a44 <HAL_RCC_GetSysClockFreq+0xfc>)
 80019f4:	f7fe fb88 	bl	8000108 <__udivsi3>
 80019f8:	0003      	movs	r3, r0
 80019fa:	001a      	movs	r2, r3
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	4353      	muls	r3, r2
 8001a00:	637b      	str	r3, [r7, #52]	; 0x34
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a06:	480e      	ldr	r0, [pc, #56]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a08:	f7fe fb7e 	bl	8000108 <__udivsi3>
 8001a0c:	0003      	movs	r3, r0
 8001a0e:	001a      	movs	r2, r3
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	4353      	muls	r3, r2
 8001a14:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a18:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a1a:	e005      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001a1c:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a1e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a20:	e002      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a22:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a24:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a26:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	b00f      	add	sp, #60	; 0x3c
 8001a30:	bd90      	pop	{r4, r7, pc}
 8001a32:	46c0      	nop			; (mov r8, r8)
 8001a34:	08003be0 	.word	0x08003be0
 8001a38:	08003bf0 	.word	0x08003bf0
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	007a1200 	.word	0x007a1200
 8001a44:	02dc6c00 	.word	0x02dc6c00

08001a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a4c:	4b02      	ldr	r3, [pc, #8]	; (8001a58 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
}
 8001a50:	0018      	movs	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	20000000 	.word	0x20000000

08001a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001a60:	f7ff fff2 	bl	8001a48 <HAL_RCC_GetHCLKFreq>
 8001a64:	0001      	movs	r1, r0
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	0a1b      	lsrs	r3, r3, #8
 8001a6c:	2207      	movs	r2, #7
 8001a6e:	4013      	ands	r3, r2
 8001a70:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a72:	5cd3      	ldrb	r3, [r2, r3]
 8001a74:	40d9      	lsrs	r1, r3
 8001a76:	000b      	movs	r3, r1
}    
 8001a78:	0018      	movs	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	46c0      	nop			; (mov r8, r8)
 8001a80:	40021000 	.word	0x40021000
 8001a84:	08003c10 	.word	0x08003c10

08001a88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e04e      	b.n	8001b38 <HAL_TIM_PWM_Init+0xb0>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	223d      	movs	r2, #61	; 0x3d
 8001a9e:	5c9b      	ldrb	r3, [r3, r2]
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d113      	bne.n	8001ace <HAL_TIM_PWM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	223c      	movs	r2, #60	; 0x3c
 8001aaa:	2100      	movs	r1, #0
 8001aac:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f000 ff23 	bl	80028fc <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d102      	bne.n	8001ac4 <HAL_TIM_PWM_Init+0x3c>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a1f      	ldr	r2, [pc, #124]	; (8001b40 <HAL_TIM_PWM_Init+0xb8>)
 8001ac2:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	0010      	movs	r0, r2
 8001acc:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	223d      	movs	r2, #61	; 0x3d
 8001ad2:	2102      	movs	r1, #2
 8001ad4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3304      	adds	r3, #4
 8001ade:	0019      	movs	r1, r3
 8001ae0:	0010      	movs	r0, r2
 8001ae2:	f000 fc91 	bl	8002408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2246      	movs	r2, #70	; 0x46
 8001aea:	2101      	movs	r1, #1
 8001aec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	223e      	movs	r2, #62	; 0x3e
 8001af2:	2101      	movs	r1, #1
 8001af4:	5499      	strb	r1, [r3, r2]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	223f      	movs	r2, #63	; 0x3f
 8001afa:	2101      	movs	r1, #1
 8001afc:	5499      	strb	r1, [r3, r2]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2240      	movs	r2, #64	; 0x40
 8001b02:	2101      	movs	r1, #1
 8001b04:	5499      	strb	r1, [r3, r2]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2241      	movs	r2, #65	; 0x41
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2242      	movs	r2, #66	; 0x42
 8001b12:	2101      	movs	r1, #1
 8001b14:	5499      	strb	r1, [r3, r2]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2243      	movs	r2, #67	; 0x43
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	5499      	strb	r1, [r3, r2]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2244      	movs	r2, #68	; 0x44
 8001b22:	2101      	movs	r1, #1
 8001b24:	5499      	strb	r1, [r3, r2]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2245      	movs	r2, #69	; 0x45
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	223d      	movs	r2, #61	; 0x3d
 8001b32:	2101      	movs	r1, #1
 8001b34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	0018      	movs	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	b002      	add	sp, #8
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	080004cd 	.word	0x080004cd

08001b44 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
 8001b50:	001a      	movs	r2, r3
 8001b52:	1cbb      	adds	r3, r7, #2
 8001b54:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b56:	2317      	movs	r3, #23
 8001b58:	18fb      	adds	r3, r7, r3
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d108      	bne.n	8001b76 <HAL_TIM_PWM_Start_DMA+0x32>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	223e      	movs	r2, #62	; 0x3e
 8001b68:	5c9b      	ldrb	r3, [r3, r2]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	3b02      	subs	r3, #2
 8001b6e:	425a      	negs	r2, r3
 8001b70:	4153      	adcs	r3, r2
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	e01f      	b.n	8001bb6 <HAL_TIM_PWM_Start_DMA+0x72>
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	2b04      	cmp	r3, #4
 8001b7a:	d108      	bne.n	8001b8e <HAL_TIM_PWM_Start_DMA+0x4a>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	223f      	movs	r2, #63	; 0x3f
 8001b80:	5c9b      	ldrb	r3, [r3, r2]
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	3b02      	subs	r3, #2
 8001b86:	425a      	negs	r2, r3
 8001b88:	4153      	adcs	r3, r2
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	e013      	b.n	8001bb6 <HAL_TIM_PWM_Start_DMA+0x72>
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d108      	bne.n	8001ba6 <HAL_TIM_PWM_Start_DMA+0x62>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2240      	movs	r2, #64	; 0x40
 8001b98:	5c9b      	ldrb	r3, [r3, r2]
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	3b02      	subs	r3, #2
 8001b9e:	425a      	negs	r2, r3
 8001ba0:	4153      	adcs	r3, r2
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	e007      	b.n	8001bb6 <HAL_TIM_PWM_Start_DMA+0x72>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2241      	movs	r2, #65	; 0x41
 8001baa:	5c9b      	ldrb	r3, [r3, r2]
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	3b02      	subs	r3, #2
 8001bb0:	425a      	negs	r2, r3
 8001bb2:	4153      	adcs	r3, r2
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e15a      	b.n	8001e74 <HAL_TIM_PWM_Start_DMA+0x330>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d108      	bne.n	8001bd6 <HAL_TIM_PWM_Start_DMA+0x92>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	223e      	movs	r2, #62	; 0x3e
 8001bc8:	5c9b      	ldrb	r3, [r3, r2]
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	425a      	negs	r2, r3
 8001bd0:	4153      	adcs	r3, r2
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	e01f      	b.n	8001c16 <HAL_TIM_PWM_Start_DMA+0xd2>
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2b04      	cmp	r3, #4
 8001bda:	d108      	bne.n	8001bee <HAL_TIM_PWM_Start_DMA+0xaa>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	223f      	movs	r2, #63	; 0x3f
 8001be0:	5c9b      	ldrb	r3, [r3, r2]
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	3b01      	subs	r3, #1
 8001be6:	425a      	negs	r2, r3
 8001be8:	4153      	adcs	r3, r2
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	e013      	b.n	8001c16 <HAL_TIM_PWM_Start_DMA+0xd2>
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d108      	bne.n	8001c06 <HAL_TIM_PWM_Start_DMA+0xc2>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2240      	movs	r2, #64	; 0x40
 8001bf8:	5c9b      	ldrb	r3, [r3, r2]
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	425a      	negs	r2, r3
 8001c00:	4153      	adcs	r3, r2
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	e007      	b.n	8001c16 <HAL_TIM_PWM_Start_DMA+0xd2>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2241      	movs	r2, #65	; 0x41
 8001c0a:	5c9b      	ldrb	r3, [r3, r2]
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	425a      	negs	r2, r3
 8001c12:	4153      	adcs	r3, r2
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d025      	beq.n	8001c66 <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) && (Length > 0U))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d105      	bne.n	8001c2c <HAL_TIM_PWM_Start_DMA+0xe8>
 8001c20:	1cbb      	adds	r3, r7, #2
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e123      	b.n	8001e74 <HAL_TIM_PWM_Start_DMA+0x330>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d104      	bne.n	8001c3c <HAL_TIM_PWM_Start_DMA+0xf8>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	223e      	movs	r2, #62	; 0x3e
 8001c36:	2102      	movs	r1, #2
 8001c38:	5499      	strb	r1, [r3, r2]
 8001c3a:	e016      	b.n	8001c6a <HAL_TIM_PWM_Start_DMA+0x126>
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d104      	bne.n	8001c4c <HAL_TIM_PWM_Start_DMA+0x108>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	223f      	movs	r2, #63	; 0x3f
 8001c46:	2102      	movs	r1, #2
 8001c48:	5499      	strb	r1, [r3, r2]
 8001c4a:	e00e      	b.n	8001c6a <HAL_TIM_PWM_Start_DMA+0x126>
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	2b08      	cmp	r3, #8
 8001c50:	d104      	bne.n	8001c5c <HAL_TIM_PWM_Start_DMA+0x118>
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2240      	movs	r2, #64	; 0x40
 8001c56:	2102      	movs	r1, #2
 8001c58:	5499      	strb	r1, [r3, r2]
 8001c5a:	e006      	b.n	8001c6a <HAL_TIM_PWM_Start_DMA+0x126>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2241      	movs	r2, #65	; 0x41
 8001c60:	2102      	movs	r1, #2
 8001c62:	5499      	strb	r1, [r3, r2]
 8001c64:	e001      	b.n	8001c6a <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e104      	b.n	8001e74 <HAL_TIM_PWM_Start_DMA+0x330>
  }

  switch (Channel)
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	2b0c      	cmp	r3, #12
 8001c6e:	d100      	bne.n	8001c72 <HAL_TIM_PWM_Start_DMA+0x12e>
 8001c70:	e080      	b.n	8001d74 <HAL_TIM_PWM_Start_DMA+0x230>
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	2b0c      	cmp	r3, #12
 8001c76:	d900      	bls.n	8001c7a <HAL_TIM_PWM_Start_DMA+0x136>
 8001c78:	e0a1      	b.n	8001dbe <HAL_TIM_PWM_Start_DMA+0x27a>
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	d054      	beq.n	8001d2a <HAL_TIM_PWM_Start_DMA+0x1e6>
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	2b08      	cmp	r3, #8
 8001c84:	d900      	bls.n	8001c88 <HAL_TIM_PWM_Start_DMA+0x144>
 8001c86:	e09a      	b.n	8001dbe <HAL_TIM_PWM_Start_DMA+0x27a>
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_TIM_PWM_Start_DMA+0x152>
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	2b04      	cmp	r3, #4
 8001c92:	d025      	beq.n	8001ce0 <HAL_TIM_PWM_Start_DMA+0x19c>
 8001c94:	e093      	b.n	8001dbe <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	4a78      	ldr	r2, [pc, #480]	; (8001e7c <HAL_TIM_PWM_Start_DMA+0x338>)
 8001c9c:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca2:	4a77      	ldr	r2, [pc, #476]	; (8001e80 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8001ca4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	4a76      	ldr	r2, [pc, #472]	; (8001e84 <HAL_TIM_PWM_Start_DMA+0x340>)
 8001cac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	3334      	adds	r3, #52	; 0x34
 8001cba:	001a      	movs	r2, r3
 8001cbc:	1cbb      	adds	r3, r7, #2
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	f7fe fee4 	bl	8000a8c <HAL_DMA_Start_IT>
 8001cc4:	1e03      	subs	r3, r0, #0
 8001cc6:	d001      	beq.n	8001ccc <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0d3      	b.n	8001e74 <HAL_TIM_PWM_Start_DMA+0x330>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2180      	movs	r1, #128	; 0x80
 8001cd8:	0089      	lsls	r1, r1, #2
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	60da      	str	r2, [r3, #12]
      break;
 8001cde:	e073      	b.n	8001dc8 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce4:	4a65      	ldr	r2, [pc, #404]	; (8001e7c <HAL_TIM_PWM_Start_DMA+0x338>)
 8001ce6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cec:	4a64      	ldr	r2, [pc, #400]	; (8001e80 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8001cee:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf4:	4a63      	ldr	r2, [pc, #396]	; (8001e84 <HAL_TIM_PWM_Start_DMA+0x340>)
 8001cf6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	3338      	adds	r3, #56	; 0x38
 8001d04:	001a      	movs	r2, r3
 8001d06:	1cbb      	adds	r3, r7, #2
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	f7fe febf 	bl	8000a8c <HAL_DMA_Start_IT>
 8001d0e:	1e03      	subs	r3, r0, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e0ae      	b.n	8001e74 <HAL_TIM_PWM_Start_DMA+0x330>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68da      	ldr	r2, [r3, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2180      	movs	r1, #128	; 0x80
 8001d22:	00c9      	lsls	r1, r1, #3
 8001d24:	430a      	orrs	r2, r1
 8001d26:	60da      	str	r2, [r3, #12]
      break;
 8001d28:	e04e      	b.n	8001dc8 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2e:	4a53      	ldr	r2, [pc, #332]	; (8001e7c <HAL_TIM_PWM_Start_DMA+0x338>)
 8001d30:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d36:	4a52      	ldr	r2, [pc, #328]	; (8001e80 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8001d38:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3e:	4a51      	ldr	r2, [pc, #324]	; (8001e84 <HAL_TIM_PWM_Start_DMA+0x340>)
 8001d40:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	333c      	adds	r3, #60	; 0x3c
 8001d4e:	001a      	movs	r2, r3
 8001d50:	1cbb      	adds	r3, r7, #2
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	f7fe fe9a 	bl	8000a8c <HAL_DMA_Start_IT>
 8001d58:	1e03      	subs	r3, r0, #0
 8001d5a:	d001      	beq.n	8001d60 <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e089      	b.n	8001e74 <HAL_TIM_PWM_Start_DMA+0x330>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68da      	ldr	r2, [r3, #12]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2180      	movs	r1, #128	; 0x80
 8001d6c:	0109      	lsls	r1, r1, #4
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	60da      	str	r2, [r3, #12]
      break;
 8001d72:	e029      	b.n	8001dc8 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d78:	4a40      	ldr	r2, [pc, #256]	; (8001e7c <HAL_TIM_PWM_Start_DMA+0x338>)
 8001d7a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d80:	4a3f      	ldr	r2, [pc, #252]	; (8001e80 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8001d82:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d88:	4a3e      	ldr	r2, [pc, #248]	; (8001e84 <HAL_TIM_PWM_Start_DMA+0x340>)
 8001d8a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	3340      	adds	r3, #64	; 0x40
 8001d98:	001a      	movs	r2, r3
 8001d9a:	1cbb      	adds	r3, r7, #2
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	f7fe fe75 	bl	8000a8c <HAL_DMA_Start_IT>
 8001da2:	1e03      	subs	r3, r0, #0
 8001da4:	d001      	beq.n	8001daa <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e064      	b.n	8001e74 <HAL_TIM_PWM_Start_DMA+0x330>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2180      	movs	r1, #128	; 0x80
 8001db6:	0149      	lsls	r1, r1, #5
 8001db8:	430a      	orrs	r2, r1
 8001dba:	60da      	str	r2, [r3, #12]
      break;
 8001dbc:	e004      	b.n	8001dc8 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 8001dbe:	2317      	movs	r3, #23
 8001dc0:	18fb      	adds	r3, r7, r3
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	701a      	strb	r2, [r3, #0]
      break;
 8001dc6:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8001dc8:	2317      	movs	r3, #23
 8001dca:	18fb      	adds	r3, r7, r3
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d14d      	bne.n	8001e6e <HAL_TIM_PWM_Start_DMA+0x32a>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68b9      	ldr	r1, [r7, #8]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f000 fd6a 	bl	80028b4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a28      	ldr	r2, [pc, #160]	; (8001e88 <HAL_TIM_PWM_Start_DMA+0x344>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d009      	beq.n	8001dfe <HAL_TIM_PWM_Start_DMA+0x2ba>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a27      	ldr	r2, [pc, #156]	; (8001e8c <HAL_TIM_PWM_Start_DMA+0x348>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d004      	beq.n	8001dfe <HAL_TIM_PWM_Start_DMA+0x2ba>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a25      	ldr	r2, [pc, #148]	; (8001e90 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d101      	bne.n	8001e02 <HAL_TIM_PWM_Start_DMA+0x2be>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <HAL_TIM_PWM_Start_DMA+0x2c0>
 8001e02:	2300      	movs	r3, #0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d008      	beq.n	8001e1a <HAL_TIM_PWM_Start_DMA+0x2d6>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2180      	movs	r1, #128	; 0x80
 8001e14:	0209      	lsls	r1, r1, #8
 8001e16:	430a      	orrs	r2, r1
 8001e18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a1a      	ldr	r2, [pc, #104]	; (8001e88 <HAL_TIM_PWM_Start_DMA+0x344>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d00a      	beq.n	8001e3a <HAL_TIM_PWM_Start_DMA+0x2f6>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	05db      	lsls	r3, r3, #23
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d004      	beq.n	8001e3a <HAL_TIM_PWM_Start_DMA+0x2f6>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a17      	ldr	r2, [pc, #92]	; (8001e94 <HAL_TIM_PWM_Start_DMA+0x350>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d111      	bne.n	8001e5e <HAL_TIM_PWM_Start_DMA+0x31a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	2207      	movs	r2, #7
 8001e42:	4013      	ands	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	2b06      	cmp	r3, #6
 8001e4a:	d010      	beq.n	8001e6e <HAL_TIM_PWM_Start_DMA+0x32a>
      {
        __HAL_TIM_ENABLE(htim);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2101      	movs	r1, #1
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e5c:	e007      	b.n	8001e6e <HAL_TIM_PWM_Start_DMA+0x32a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2101      	movs	r1, #1
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001e6e:	2317      	movs	r3, #23
 8001e70:	18fb      	adds	r3, r7, r3
 8001e72:	781b      	ldrb	r3, [r3, #0]
}
 8001e74:	0018      	movs	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	b006      	add	sp, #24
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	080022ed 	.word	0x080022ed
 8001e80:	0800239b 	.word	0x0800239b
 8001e84:	08002255 	.word	0x08002255
 8001e88:	40012c00 	.word	0x40012c00
 8001e8c:	40014400 	.word	0x40014400
 8001e90:	40014800 	.word	0x40014800
 8001e94:	40000400 	.word	0x40000400

08001e98 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ea2:	230f      	movs	r3, #15
 8001ea4:	18fb      	adds	r3, r7, r3
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	2b0c      	cmp	r3, #12
 8001eae:	d039      	beq.n	8001f24 <HAL_TIM_PWM_Stop_DMA+0x8c>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	2b0c      	cmp	r3, #12
 8001eb4:	d844      	bhi.n	8001f40 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d025      	beq.n	8001f08 <HAL_TIM_PWM_Stop_DMA+0x70>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	2b08      	cmp	r3, #8
 8001ec0:	d83e      	bhi.n	8001f40 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <HAL_TIM_PWM_Stop_DMA+0x38>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	d00e      	beq.n	8001eec <HAL_TIM_PWM_Stop_DMA+0x54>
 8001ece:	e037      	b.n	8001f40 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68da      	ldr	r2, [r3, #12]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4951      	ldr	r1, [pc, #324]	; (8002020 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8001edc:	400a      	ands	r2, r1
 8001ede:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f7fe fe37 	bl	8000b58 <HAL_DMA_Abort_IT>
      break;
 8001eea:	e02e      	b.n	8001f4a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	494b      	ldr	r1, [pc, #300]	; (8002024 <HAL_TIM_PWM_Stop_DMA+0x18c>)
 8001ef8:	400a      	ands	r2, r1
 8001efa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f00:	0018      	movs	r0, r3
 8001f02:	f7fe fe29 	bl	8000b58 <HAL_DMA_Abort_IT>
      break;
 8001f06:	e020      	b.n	8001f4a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4945      	ldr	r1, [pc, #276]	; (8002028 <HAL_TIM_PWM_Stop_DMA+0x190>)
 8001f14:	400a      	ands	r2, r1
 8001f16:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	f7fe fe1b 	bl	8000b58 <HAL_DMA_Abort_IT>
      break;
 8001f22:	e012      	b.n	8001f4a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68da      	ldr	r2, [r3, #12]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	493f      	ldr	r1, [pc, #252]	; (800202c <HAL_TIM_PWM_Stop_DMA+0x194>)
 8001f30:	400a      	ands	r2, r1
 8001f32:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f7fe fe0d 	bl	8000b58 <HAL_DMA_Abort_IT>
      break;
 8001f3e:	e004      	b.n	8001f4a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8001f40:	230f      	movs	r3, #15
 8001f42:	18fb      	adds	r3, r7, r3
 8001f44:	2201      	movs	r2, #1
 8001f46:	701a      	strb	r2, [r3, #0]
      break;
 8001f48:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8001f4a:	230f      	movs	r3, #15
 8001f4c:	18fb      	adds	r3, r7, r3
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d15e      	bne.n	8002012 <HAL_TIM_PWM_Stop_DMA+0x17a>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6839      	ldr	r1, [r7, #0]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	f000 fca9 	bl	80028b4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a32      	ldr	r2, [pc, #200]	; (8002030 <HAL_TIM_PWM_Stop_DMA+0x198>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d009      	beq.n	8001f80 <HAL_TIM_PWM_Stop_DMA+0xe8>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a30      	ldr	r2, [pc, #192]	; (8002034 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d004      	beq.n	8001f80 <HAL_TIM_PWM_Stop_DMA+0xe8>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a2f      	ldr	r2, [pc, #188]	; (8002038 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d101      	bne.n	8001f84 <HAL_TIM_PWM_Stop_DMA+0xec>
 8001f80:	2301      	movs	r3, #1
 8001f82:	e000      	b.n	8001f86 <HAL_TIM_PWM_Stop_DMA+0xee>
 8001f84:	2300      	movs	r3, #0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d013      	beq.n	8001fb2 <HAL_TIM_PWM_Stop_DMA+0x11a>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	4a2a      	ldr	r2, [pc, #168]	; (800203c <HAL_TIM_PWM_Stop_DMA+0x1a4>)
 8001f92:	4013      	ands	r3, r2
 8001f94:	d10d      	bne.n	8001fb2 <HAL_TIM_PWM_Stop_DMA+0x11a>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	4a28      	ldr	r2, [pc, #160]	; (8002040 <HAL_TIM_PWM_Stop_DMA+0x1a8>)
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d107      	bne.n	8001fb2 <HAL_TIM_PWM_Stop_DMA+0x11a>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4925      	ldr	r1, [pc, #148]	; (8002044 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 8001fae:	400a      	ands	r2, r1
 8001fb0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	4a20      	ldr	r2, [pc, #128]	; (800203c <HAL_TIM_PWM_Stop_DMA+0x1a4>)
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d10d      	bne.n	8001fda <HAL_TIM_PWM_Stop_DMA+0x142>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	4a1e      	ldr	r2, [pc, #120]	; (8002040 <HAL_TIM_PWM_Stop_DMA+0x1a8>)
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d107      	bne.n	8001fda <HAL_TIM_PWM_Stop_DMA+0x142>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	438a      	bics	r2, r1
 8001fd8:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d104      	bne.n	8001fea <HAL_TIM_PWM_Stop_DMA+0x152>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	223e      	movs	r2, #62	; 0x3e
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	5499      	strb	r1, [r3, r2]
 8001fe8:	e013      	b.n	8002012 <HAL_TIM_PWM_Stop_DMA+0x17a>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	2b04      	cmp	r3, #4
 8001fee:	d104      	bne.n	8001ffa <HAL_TIM_PWM_Stop_DMA+0x162>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	223f      	movs	r2, #63	; 0x3f
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	5499      	strb	r1, [r3, r2]
 8001ff8:	e00b      	b.n	8002012 <HAL_TIM_PWM_Stop_DMA+0x17a>
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	d104      	bne.n	800200a <HAL_TIM_PWM_Stop_DMA+0x172>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2240      	movs	r2, #64	; 0x40
 8002004:	2101      	movs	r1, #1
 8002006:	5499      	strb	r1, [r3, r2]
 8002008:	e003      	b.n	8002012 <HAL_TIM_PWM_Stop_DMA+0x17a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2241      	movs	r2, #65	; 0x41
 800200e:	2101      	movs	r1, #1
 8002010:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8002012:	230f      	movs	r3, #15
 8002014:	18fb      	adds	r3, r7, r3
 8002016:	781b      	ldrb	r3, [r3, #0]
}
 8002018:	0018      	movs	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	b004      	add	sp, #16
 800201e:	bd80      	pop	{r7, pc}
 8002020:	fffffdff 	.word	0xfffffdff
 8002024:	fffffbff 	.word	0xfffffbff
 8002028:	fffff7ff 	.word	0xfffff7ff
 800202c:	ffffefff 	.word	0xffffefff
 8002030:	40012c00 	.word	0x40012c00
 8002034:	40014400 	.word	0x40014400
 8002038:	40014800 	.word	0x40014800
 800203c:	00001111 	.word	0x00001111
 8002040:	00000444 	.word	0x00000444
 8002044:	ffff7fff 	.word	0xffff7fff

08002048 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002054:	2317      	movs	r3, #23
 8002056:	18fb      	adds	r3, r7, r3
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	223c      	movs	r2, #60	; 0x3c
 8002060:	5c9b      	ldrb	r3, [r3, r2]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d101      	bne.n	800206a <HAL_TIM_PWM_ConfigChannel+0x22>
 8002066:	2302      	movs	r3, #2
 8002068:	e0ad      	b.n	80021c6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	223c      	movs	r2, #60	; 0x3c
 800206e:	2101      	movs	r1, #1
 8002070:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b0c      	cmp	r3, #12
 8002076:	d100      	bne.n	800207a <HAL_TIM_PWM_ConfigChannel+0x32>
 8002078:	e076      	b.n	8002168 <HAL_TIM_PWM_ConfigChannel+0x120>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b0c      	cmp	r3, #12
 800207e:	d900      	bls.n	8002082 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002080:	e095      	b.n	80021ae <HAL_TIM_PWM_ConfigChannel+0x166>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b08      	cmp	r3, #8
 8002086:	d04e      	beq.n	8002126 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b08      	cmp	r3, #8
 800208c:	d900      	bls.n	8002090 <HAL_TIM_PWM_ConfigChannel+0x48>
 800208e:	e08e      	b.n	80021ae <HAL_TIM_PWM_ConfigChannel+0x166>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_TIM_PWM_ConfigChannel+0x56>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b04      	cmp	r3, #4
 800209a:	d021      	beq.n	80020e0 <HAL_TIM_PWM_ConfigChannel+0x98>
 800209c:	e087      	b.n	80021ae <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	0011      	movs	r1, r2
 80020a6:	0018      	movs	r0, r3
 80020a8:	f000 fa24 	bl	80024f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	699a      	ldr	r2, [r3, #24]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2108      	movs	r1, #8
 80020b8:	430a      	orrs	r2, r1
 80020ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	699a      	ldr	r2, [r3, #24]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2104      	movs	r1, #4
 80020c8:	438a      	bics	r2, r1
 80020ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6999      	ldr	r1, [r3, #24]
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	691a      	ldr	r2, [r3, #16]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	619a      	str	r2, [r3, #24]
      break;
 80020de:	e06b      	b.n	80021b8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	0011      	movs	r1, r2
 80020e8:	0018      	movs	r0, r3
 80020ea:	f000 fa81 	bl	80025f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	699a      	ldr	r2, [r3, #24]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2180      	movs	r1, #128	; 0x80
 80020fa:	0109      	lsls	r1, r1, #4
 80020fc:	430a      	orrs	r2, r1
 80020fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	699a      	ldr	r2, [r3, #24]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4931      	ldr	r1, [pc, #196]	; (80021d0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800210c:	400a      	ands	r2, r1
 800210e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6999      	ldr	r1, [r3, #24]
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	021a      	lsls	r2, r3, #8
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	619a      	str	r2, [r3, #24]
      break;
 8002124:	e048      	b.n	80021b8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	0011      	movs	r1, r2
 800212e:	0018      	movs	r0, r3
 8002130:	f000 fadc 	bl	80026ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	69da      	ldr	r2, [r3, #28]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2108      	movs	r1, #8
 8002140:	430a      	orrs	r2, r1
 8002142:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	69da      	ldr	r2, [r3, #28]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2104      	movs	r1, #4
 8002150:	438a      	bics	r2, r1
 8002152:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	69d9      	ldr	r1, [r3, #28]
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	691a      	ldr	r2, [r3, #16]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	61da      	str	r2, [r3, #28]
      break;
 8002166:	e027      	b.n	80021b8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	0011      	movs	r1, r2
 8002170:	0018      	movs	r0, r3
 8002172:	f000 fb3b 	bl	80027ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	69da      	ldr	r2, [r3, #28]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2180      	movs	r1, #128	; 0x80
 8002182:	0109      	lsls	r1, r1, #4
 8002184:	430a      	orrs	r2, r1
 8002186:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	69da      	ldr	r2, [r3, #28]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	490f      	ldr	r1, [pc, #60]	; (80021d0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002194:	400a      	ands	r2, r1
 8002196:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	69d9      	ldr	r1, [r3, #28]
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	021a      	lsls	r2, r3, #8
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	61da      	str	r2, [r3, #28]
      break;
 80021ac:	e004      	b.n	80021b8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80021ae:	2317      	movs	r3, #23
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	2201      	movs	r2, #1
 80021b4:	701a      	strb	r2, [r3, #0]
      break;
 80021b6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	223c      	movs	r2, #60	; 0x3c
 80021bc:	2100      	movs	r1, #0
 80021be:	5499      	strb	r1, [r3, r2]

  return status;
 80021c0:	2317      	movs	r3, #23
 80021c2:	18fb      	adds	r3, r7, r3
 80021c4:	781b      	ldrb	r3, [r3, #0]
}
 80021c6:	0018      	movs	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	b006      	add	sp, #24
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	fffffbff 	.word	0xfffffbff

080021d4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80021dc:	46c0      	nop			; (mov r8, r8)
 80021de:	46bd      	mov	sp, r7
 80021e0:	b002      	add	sp, #8
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80021ec:	46c0      	nop			; (mov r8, r8)
 80021ee:	46bd      	mov	sp, r7
 80021f0:	b002      	add	sp, #8
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021fc:	46c0      	nop			; (mov r8, r8)
 80021fe:	46bd      	mov	sp, r7
 8002200:	b002      	add	sp, #8
 8002202:	bd80      	pop	{r7, pc}

08002204 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800220c:	46c0      	nop			; (mov r8, r8)
 800220e:	46bd      	mov	sp, r7
 8002210:	b002      	add	sp, #8
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800221c:	46c0      	nop			; (mov r8, r8)
 800221e:	46bd      	mov	sp, r7
 8002220:	b002      	add	sp, #8
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800222c:	46c0      	nop			; (mov r8, r8)
 800222e:	46bd      	mov	sp, r7
 8002230:	b002      	add	sp, #8
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800223c:	46c0      	nop			; (mov r8, r8)
 800223e:	46bd      	mov	sp, r7
 8002240:	b002      	add	sp, #8
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800224c:	46c0      	nop			; (mov r8, r8)
 800224e:	46bd      	mov	sp, r7
 8002250:	b002      	add	sp, #8
 8002252:	bd80      	pop	{r7, pc}

08002254 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	429a      	cmp	r2, r3
 800226a:	d107      	bne.n	800227c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2201      	movs	r2, #1
 8002270:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	223e      	movs	r2, #62	; 0x3e
 8002276:	2101      	movs	r1, #1
 8002278:	5499      	strb	r1, [r3, r2]
 800227a:	e02a      	b.n	80022d2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	429a      	cmp	r2, r3
 8002284:	d107      	bne.n	8002296 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2202      	movs	r2, #2
 800228a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	223f      	movs	r2, #63	; 0x3f
 8002290:	2101      	movs	r1, #1
 8002292:	5499      	strb	r1, [r3, r2]
 8002294:	e01d      	b.n	80022d2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	429a      	cmp	r2, r3
 800229e:	d107      	bne.n	80022b0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2204      	movs	r2, #4
 80022a4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2240      	movs	r2, #64	; 0x40
 80022aa:	2101      	movs	r1, #1
 80022ac:	5499      	strb	r1, [r3, r2]
 80022ae:	e010      	b.n	80022d2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d107      	bne.n	80022ca <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2208      	movs	r2, #8
 80022be:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2241      	movs	r2, #65	; 0x41
 80022c4:	2101      	movs	r1, #1
 80022c6:	5499      	strb	r1, [r3, r2]
 80022c8:	e003      	b.n	80022d2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	223d      	movs	r2, #61	; 0x3d
 80022ce:	2101      	movs	r1, #1
 80022d0:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	22a4      	movs	r2, #164	; 0xa4
 80022d6:	589b      	ldr	r3, [r3, r2]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	0010      	movs	r0, r2
 80022dc:	4798      	blx	r3
#else
  HAL_TIM_ErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	771a      	strb	r2, [r3, #28]
}
 80022e4:	46c0      	nop			; (mov r8, r8)
 80022e6:	46bd      	mov	sp, r7
 80022e8:	b004      	add	sp, #16
 80022ea:	bd80      	pop	{r7, pc}

080022ec <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	429a      	cmp	r2, r3
 8002302:	d10b      	bne.n	800231c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2201      	movs	r2, #1
 8002308:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d136      	bne.n	8002380 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	223e      	movs	r2, #62	; 0x3e
 8002316:	2101      	movs	r1, #1
 8002318:	5499      	strb	r1, [r3, r2]
 800231a:	e031      	b.n	8002380 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	429a      	cmp	r2, r3
 8002324:	d10b      	bne.n	800233e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2202      	movs	r2, #2
 800232a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d125      	bne.n	8002380 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	223f      	movs	r2, #63	; 0x3f
 8002338:	2101      	movs	r1, #1
 800233a:	5499      	strb	r1, [r3, r2]
 800233c:	e020      	b.n	8002380 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	429a      	cmp	r2, r3
 8002346:	d10b      	bne.n	8002360 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2204      	movs	r2, #4
 800234c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d114      	bne.n	8002380 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2240      	movs	r2, #64	; 0x40
 800235a:	2101      	movs	r1, #1
 800235c:	5499      	strb	r1, [r3, r2]
 800235e:	e00f      	b.n	8002380 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	429a      	cmp	r2, r3
 8002368:	d10a      	bne.n	8002380 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2208      	movs	r2, #8
 800236e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d103      	bne.n	8002380 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2241      	movs	r2, #65	; 0x41
 800237c:	2101      	movs	r1, #1
 800237e:	5499      	strb	r1, [r3, r2]
  {
    /* nothing to do */
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	229c      	movs	r2, #156	; 0x9c
 8002384:	589b      	ldr	r3, [r3, r2]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	0010      	movs	r0, r2
 800238a:	4798      	blx	r3
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	771a      	strb	r2, [r3, #28]
}
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	46bd      	mov	sp, r7
 8002396:	b004      	add	sp, #16
 8002398:	bd80      	pop	{r7, pc}

0800239a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b084      	sub	sp, #16
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d103      	bne.n	80023ba <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2201      	movs	r2, #1
 80023b6:	771a      	strb	r2, [r3, #28]
 80023b8:	e019      	b.n	80023ee <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d103      	bne.n	80023cc <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2202      	movs	r2, #2
 80023c8:	771a      	strb	r2, [r3, #28]
 80023ca:	e010      	b.n	80023ee <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d103      	bne.n	80023de <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2204      	movs	r2, #4
 80023da:	771a      	strb	r2, [r3, #28]
 80023dc:	e007      	b.n	80023ee <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d102      	bne.n	80023ee <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2208      	movs	r2, #8
 80023ec:	771a      	strb	r2, [r3, #28]
  {
    /* nothing to do */
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	22a0      	movs	r2, #160	; 0xa0
 80023f2:	589b      	ldr	r3, [r3, r2]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	0010      	movs	r0, r2
 80023f8:	4798      	blx	r3
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	771a      	strb	r2, [r3, #28]
}
 8002400:	46c0      	nop			; (mov r8, r8)
 8002402:	46bd      	mov	sp, r7
 8002404:	b004      	add	sp, #16
 8002406:	bd80      	pop	{r7, pc}

08002408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a30      	ldr	r2, [pc, #192]	; (80024dc <TIM_Base_SetConfig+0xd4>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d008      	beq.n	8002432 <TIM_Base_SetConfig+0x2a>
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	2380      	movs	r3, #128	; 0x80
 8002424:	05db      	lsls	r3, r3, #23
 8002426:	429a      	cmp	r2, r3
 8002428:	d003      	beq.n	8002432 <TIM_Base_SetConfig+0x2a>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a2c      	ldr	r2, [pc, #176]	; (80024e0 <TIM_Base_SetConfig+0xd8>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d108      	bne.n	8002444 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2270      	movs	r2, #112	; 0x70
 8002436:	4393      	bics	r3, r2
 8002438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	4313      	orrs	r3, r2
 8002442:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a25      	ldr	r2, [pc, #148]	; (80024dc <TIM_Base_SetConfig+0xd4>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d014      	beq.n	8002476 <TIM_Base_SetConfig+0x6e>
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	2380      	movs	r3, #128	; 0x80
 8002450:	05db      	lsls	r3, r3, #23
 8002452:	429a      	cmp	r2, r3
 8002454:	d00f      	beq.n	8002476 <TIM_Base_SetConfig+0x6e>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a21      	ldr	r2, [pc, #132]	; (80024e0 <TIM_Base_SetConfig+0xd8>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d00b      	beq.n	8002476 <TIM_Base_SetConfig+0x6e>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a20      	ldr	r2, [pc, #128]	; (80024e4 <TIM_Base_SetConfig+0xdc>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d007      	beq.n	8002476 <TIM_Base_SetConfig+0x6e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a1f      	ldr	r2, [pc, #124]	; (80024e8 <TIM_Base_SetConfig+0xe0>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d003      	beq.n	8002476 <TIM_Base_SetConfig+0x6e>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a1e      	ldr	r2, [pc, #120]	; (80024ec <TIM_Base_SetConfig+0xe4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d108      	bne.n	8002488 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4a1d      	ldr	r2, [pc, #116]	; (80024f0 <TIM_Base_SetConfig+0xe8>)
 800247a:	4013      	ands	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	4313      	orrs	r3, r2
 8002486:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2280      	movs	r2, #128	; 0x80
 800248c:	4393      	bics	r3, r2
 800248e:	001a      	movs	r2, r3
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	4313      	orrs	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a0a      	ldr	r2, [pc, #40]	; (80024dc <TIM_Base_SetConfig+0xd4>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d007      	beq.n	80024c6 <TIM_Base_SetConfig+0xbe>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a0b      	ldr	r2, [pc, #44]	; (80024e8 <TIM_Base_SetConfig+0xe0>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d003      	beq.n	80024c6 <TIM_Base_SetConfig+0xbe>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a0a      	ldr	r2, [pc, #40]	; (80024ec <TIM_Base_SetConfig+0xe4>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d103      	bne.n	80024ce <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	691a      	ldr	r2, [r3, #16]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	615a      	str	r2, [r3, #20]
}
 80024d4:	46c0      	nop			; (mov r8, r8)
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b004      	add	sp, #16
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40012c00 	.word	0x40012c00
 80024e0:	40000400 	.word	0x40000400
 80024e4:	40002000 	.word	0x40002000
 80024e8:	40014400 	.word	0x40014400
 80024ec:	40014800 	.word	0x40014800
 80024f0:	fffffcff 	.word	0xfffffcff

080024f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	2201      	movs	r2, #1
 8002504:	4393      	bics	r3, r2
 8002506:	001a      	movs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2270      	movs	r2, #112	; 0x70
 8002522:	4393      	bics	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2203      	movs	r2, #3
 800252a:	4393      	bics	r3, r2
 800252c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4313      	orrs	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	2202      	movs	r2, #2
 800253c:	4393      	bics	r3, r2
 800253e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	4313      	orrs	r3, r2
 8002548:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a23      	ldr	r2, [pc, #140]	; (80025dc <TIM_OC1_SetConfig+0xe8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d007      	beq.n	8002562 <TIM_OC1_SetConfig+0x6e>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a22      	ldr	r2, [pc, #136]	; (80025e0 <TIM_OC1_SetConfig+0xec>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d003      	beq.n	8002562 <TIM_OC1_SetConfig+0x6e>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a21      	ldr	r2, [pc, #132]	; (80025e4 <TIM_OC1_SetConfig+0xf0>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d10c      	bne.n	800257c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	2208      	movs	r2, #8
 8002566:	4393      	bics	r3, r2
 8002568:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	4313      	orrs	r3, r2
 8002572:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	2204      	movs	r2, #4
 8002578:	4393      	bics	r3, r2
 800257a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a17      	ldr	r2, [pc, #92]	; (80025dc <TIM_OC1_SetConfig+0xe8>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d007      	beq.n	8002594 <TIM_OC1_SetConfig+0xa0>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a16      	ldr	r2, [pc, #88]	; (80025e0 <TIM_OC1_SetConfig+0xec>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d003      	beq.n	8002594 <TIM_OC1_SetConfig+0xa0>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a15      	ldr	r2, [pc, #84]	; (80025e4 <TIM_OC1_SetConfig+0xf0>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d111      	bne.n	80025b8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	4a14      	ldr	r2, [pc, #80]	; (80025e8 <TIM_OC1_SetConfig+0xf4>)
 8002598:	4013      	ands	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4a13      	ldr	r2, [pc, #76]	; (80025ec <TIM_OC1_SetConfig+0xf8>)
 80025a0:	4013      	ands	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	621a      	str	r2, [r3, #32]
}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	46bd      	mov	sp, r7
 80025d6:	b006      	add	sp, #24
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	40012c00 	.word	0x40012c00
 80025e0:	40014400 	.word	0x40014400
 80025e4:	40014800 	.word	0x40014800
 80025e8:	fffffeff 	.word	0xfffffeff
 80025ec:	fffffdff 	.word	0xfffffdff

080025f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	2210      	movs	r2, #16
 8002600:	4393      	bics	r3, r2
 8002602:	001a      	movs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	4a2c      	ldr	r2, [pc, #176]	; (80026d0 <TIM_OC2_SetConfig+0xe0>)
 800261e:	4013      	ands	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	4a2b      	ldr	r2, [pc, #172]	; (80026d4 <TIM_OC2_SetConfig+0xe4>)
 8002626:	4013      	ands	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	021b      	lsls	r3, r3, #8
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	4313      	orrs	r3, r2
 8002634:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	2220      	movs	r2, #32
 800263a:	4393      	bics	r3, r2
 800263c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	4313      	orrs	r3, r2
 8002648:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a22      	ldr	r2, [pc, #136]	; (80026d8 <TIM_OC2_SetConfig+0xe8>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d10d      	bne.n	800266e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	2280      	movs	r2, #128	; 0x80
 8002656:	4393      	bics	r3, r2
 8002658:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	4313      	orrs	r3, r2
 8002664:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	2240      	movs	r2, #64	; 0x40
 800266a:	4393      	bics	r3, r2
 800266c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a19      	ldr	r2, [pc, #100]	; (80026d8 <TIM_OC2_SetConfig+0xe8>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d007      	beq.n	8002686 <TIM_OC2_SetConfig+0x96>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a18      	ldr	r2, [pc, #96]	; (80026dc <TIM_OC2_SetConfig+0xec>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d003      	beq.n	8002686 <TIM_OC2_SetConfig+0x96>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a17      	ldr	r2, [pc, #92]	; (80026e0 <TIM_OC2_SetConfig+0xf0>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d113      	bne.n	80026ae <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4a16      	ldr	r2, [pc, #88]	; (80026e4 <TIM_OC2_SetConfig+0xf4>)
 800268a:	4013      	ands	r3, r2
 800268c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4a15      	ldr	r2, [pc, #84]	; (80026e8 <TIM_OC2_SetConfig+0xf8>)
 8002692:	4013      	ands	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	4313      	orrs	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	621a      	str	r2, [r3, #32]
}
 80026c8:	46c0      	nop			; (mov r8, r8)
 80026ca:	46bd      	mov	sp, r7
 80026cc:	b006      	add	sp, #24
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	ffff8fff 	.word	0xffff8fff
 80026d4:	fffffcff 	.word	0xfffffcff
 80026d8:	40012c00 	.word	0x40012c00
 80026dc:	40014400 	.word	0x40014400
 80026e0:	40014800 	.word	0x40014800
 80026e4:	fffffbff 	.word	0xfffffbff
 80026e8:	fffff7ff 	.word	0xfffff7ff

080026ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	4a33      	ldr	r2, [pc, #204]	; (80027c8 <TIM_OC3_SetConfig+0xdc>)
 80026fc:	401a      	ands	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2270      	movs	r2, #112	; 0x70
 8002718:	4393      	bics	r3, r2
 800271a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2203      	movs	r2, #3
 8002720:	4393      	bics	r3, r2
 8002722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4313      	orrs	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	4a26      	ldr	r2, [pc, #152]	; (80027cc <TIM_OC3_SetConfig+0xe0>)
 8002732:	4013      	ands	r3, r2
 8002734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	021b      	lsls	r3, r3, #8
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	4313      	orrs	r3, r2
 8002740:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a22      	ldr	r2, [pc, #136]	; (80027d0 <TIM_OC3_SetConfig+0xe4>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d10d      	bne.n	8002766 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	4a21      	ldr	r2, [pc, #132]	; (80027d4 <TIM_OC3_SetConfig+0xe8>)
 800274e:	4013      	ands	r3, r2
 8002750:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	021b      	lsls	r3, r3, #8
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	4313      	orrs	r3, r2
 800275c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	4a1d      	ldr	r2, [pc, #116]	; (80027d8 <TIM_OC3_SetConfig+0xec>)
 8002762:	4013      	ands	r3, r2
 8002764:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a19      	ldr	r2, [pc, #100]	; (80027d0 <TIM_OC3_SetConfig+0xe4>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d007      	beq.n	800277e <TIM_OC3_SetConfig+0x92>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a1a      	ldr	r2, [pc, #104]	; (80027dc <TIM_OC3_SetConfig+0xf0>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d003      	beq.n	800277e <TIM_OC3_SetConfig+0x92>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a19      	ldr	r2, [pc, #100]	; (80027e0 <TIM_OC3_SetConfig+0xf4>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d113      	bne.n	80027a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	4a18      	ldr	r2, [pc, #96]	; (80027e4 <TIM_OC3_SetConfig+0xf8>)
 8002782:	4013      	ands	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	4a17      	ldr	r2, [pc, #92]	; (80027e8 <TIM_OC3_SetConfig+0xfc>)
 800278a:	4013      	ands	r3, r2
 800278c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	4313      	orrs	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	621a      	str	r2, [r3, #32]
}
 80027c0:	46c0      	nop			; (mov r8, r8)
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b006      	add	sp, #24
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	fffffeff 	.word	0xfffffeff
 80027cc:	fffffdff 	.word	0xfffffdff
 80027d0:	40012c00 	.word	0x40012c00
 80027d4:	fffff7ff 	.word	0xfffff7ff
 80027d8:	fffffbff 	.word	0xfffffbff
 80027dc:	40014400 	.word	0x40014400
 80027e0:	40014800 	.word	0x40014800
 80027e4:	ffffefff 	.word	0xffffefff
 80027e8:	ffffdfff 	.word	0xffffdfff

080027ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	4a26      	ldr	r2, [pc, #152]	; (8002894 <TIM_OC4_SetConfig+0xa8>)
 80027fc:	401a      	ands	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4a20      	ldr	r2, [pc, #128]	; (8002898 <TIM_OC4_SetConfig+0xac>)
 8002818:	4013      	ands	r3, r2
 800281a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4a1f      	ldr	r2, [pc, #124]	; (800289c <TIM_OC4_SetConfig+0xb0>)
 8002820:	4013      	ands	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	021b      	lsls	r3, r3, #8
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	4313      	orrs	r3, r2
 800282e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	4a1b      	ldr	r2, [pc, #108]	; (80028a0 <TIM_OC4_SetConfig+0xb4>)
 8002834:	4013      	ands	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	031b      	lsls	r3, r3, #12
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4313      	orrs	r3, r2
 8002842:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a17      	ldr	r2, [pc, #92]	; (80028a4 <TIM_OC4_SetConfig+0xb8>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d007      	beq.n	800285c <TIM_OC4_SetConfig+0x70>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a16      	ldr	r2, [pc, #88]	; (80028a8 <TIM_OC4_SetConfig+0xbc>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d003      	beq.n	800285c <TIM_OC4_SetConfig+0x70>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a15      	ldr	r2, [pc, #84]	; (80028ac <TIM_OC4_SetConfig+0xc0>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d109      	bne.n	8002870 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	4a14      	ldr	r2, [pc, #80]	; (80028b0 <TIM_OC4_SetConfig+0xc4>)
 8002860:	4013      	ands	r3, r2
 8002862:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	019b      	lsls	r3, r3, #6
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	4313      	orrs	r3, r2
 800286e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	621a      	str	r2, [r3, #32]
}
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	46bd      	mov	sp, r7
 800288e:	b006      	add	sp, #24
 8002890:	bd80      	pop	{r7, pc}
 8002892:	46c0      	nop			; (mov r8, r8)
 8002894:	ffffefff 	.word	0xffffefff
 8002898:	ffff8fff 	.word	0xffff8fff
 800289c:	fffffcff 	.word	0xfffffcff
 80028a0:	ffffdfff 	.word	0xffffdfff
 80028a4:	40012c00 	.word	0x40012c00
 80028a8:	40014400 	.word	0x40014400
 80028ac:	40014800 	.word	0x40014800
 80028b0:	ffffbfff 	.word	0xffffbfff

080028b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	221f      	movs	r2, #31
 80028c4:	4013      	ands	r3, r2
 80028c6:	2201      	movs	r2, #1
 80028c8:	409a      	lsls	r2, r3
 80028ca:	0013      	movs	r3, r2
 80028cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	43d2      	mvns	r2, r2
 80028d6:	401a      	ands	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a1a      	ldr	r2, [r3, #32]
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	211f      	movs	r1, #31
 80028e4:	400b      	ands	r3, r1
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4099      	lsls	r1, r3
 80028ea:	000b      	movs	r3, r1
 80028ec:	431a      	orrs	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	621a      	str	r2, [r3, #32]
}
 80028f2:	46c0      	nop			; (mov r8, r8)
 80028f4:	46bd      	mov	sp, r7
 80028f6:	b006      	add	sp, #24
 80028f8:	bd80      	pop	{r7, pc}
	...

080028fc <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2180      	movs	r1, #128	; 0x80
 8002908:	4a1a      	ldr	r2, [pc, #104]	; (8002974 <TIM_ResetCallback+0x78>)
 800290a:	505a      	str	r2, [r3, r1]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2184      	movs	r1, #132	; 0x84
 8002910:	4a19      	ldr	r2, [pc, #100]	; (8002978 <TIM_ResetCallback+0x7c>)
 8002912:	505a      	str	r2, [r3, r1]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2188      	movs	r1, #136	; 0x88
 8002918:	4a18      	ldr	r2, [pc, #96]	; (800297c <TIM_ResetCallback+0x80>)
 800291a:	505a      	str	r2, [r3, r1]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	218c      	movs	r1, #140	; 0x8c
 8002920:	4a17      	ldr	r2, [pc, #92]	; (8002980 <TIM_ResetCallback+0x84>)
 8002922:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2190      	movs	r1, #144	; 0x90
 8002928:	4a16      	ldr	r2, [pc, #88]	; (8002984 <TIM_ResetCallback+0x88>)
 800292a:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2194      	movs	r1, #148	; 0x94
 8002930:	4a15      	ldr	r2, [pc, #84]	; (8002988 <TIM_ResetCallback+0x8c>)
 8002932:	505a      	str	r2, [r3, r1]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2198      	movs	r1, #152	; 0x98
 8002938:	4a14      	ldr	r2, [pc, #80]	; (800298c <TIM_ResetCallback+0x90>)
 800293a:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	219c      	movs	r1, #156	; 0x9c
 8002940:	4a13      	ldr	r2, [pc, #76]	; (8002990 <TIM_ResetCallback+0x94>)
 8002942:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	21a0      	movs	r1, #160	; 0xa0
 8002948:	4a12      	ldr	r2, [pc, #72]	; (8002994 <TIM_ResetCallback+0x98>)
 800294a:	505a      	str	r2, [r3, r1]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	21a4      	movs	r1, #164	; 0xa4
 8002950:	4a11      	ldr	r2, [pc, #68]	; (8002998 <TIM_ResetCallback+0x9c>)
 8002952:	505a      	str	r2, [r3, r1]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	21a8      	movs	r1, #168	; 0xa8
 8002958:	4a10      	ldr	r2, [pc, #64]	; (800299c <TIM_ResetCallback+0xa0>)
 800295a:	505a      	str	r2, [r3, r1]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	21ac      	movs	r1, #172	; 0xac
 8002960:	4a0f      	ldr	r2, [pc, #60]	; (80029a0 <TIM_ResetCallback+0xa4>)
 8002962:	505a      	str	r2, [r3, r1]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	21b0      	movs	r1, #176	; 0xb0
 8002968:	4a0e      	ldr	r2, [pc, #56]	; (80029a4 <TIM_ResetCallback+0xa8>)
 800296a:	505a      	str	r2, [r3, r1]
}
 800296c:	46c0      	nop			; (mov r8, r8)
 800296e:	46bd      	mov	sp, r7
 8002970:	b002      	add	sp, #8
 8002972:	bd80      	pop	{r7, pc}
 8002974:	080021d5 	.word	0x080021d5
 8002978:	080021e5 	.word	0x080021e5
 800297c:	08002225 	.word	0x08002225
 8002980:	08002235 	.word	0x08002235
 8002984:	08002205 	.word	0x08002205
 8002988:	08002215 	.word	0x08002215
 800298c:	080021f5 	.word	0x080021f5
 8002990:	080031cd 	.word	0x080031cd
 8002994:	080031ed 	.word	0x080031ed
 8002998:	08002245 	.word	0x08002245
 800299c:	08002a59 	.word	0x08002a59
 80029a0:	08002a69 	.word	0x08002a69
 80029a4:	08002a79 	.word	0x08002a79

080029a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	223c      	movs	r2, #60	; 0x3c
 80029b6:	5c9b      	ldrb	r3, [r3, r2]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d101      	bne.n	80029c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029bc:	2302      	movs	r3, #2
 80029be:	e042      	b.n	8002a46 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	223c      	movs	r2, #60	; 0x3c
 80029c4:	2101      	movs	r1, #1
 80029c6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	223d      	movs	r2, #61	; 0x3d
 80029cc:	2102      	movs	r1, #2
 80029ce:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2270      	movs	r2, #112	; 0x70
 80029e4:	4393      	bics	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a14      	ldr	r2, [pc, #80]	; (8002a50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d00a      	beq.n	8002a1a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	2380      	movs	r3, #128	; 0x80
 8002a0a:	05db      	lsls	r3, r3, #23
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d004      	beq.n	8002a1a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a0f      	ldr	r2, [pc, #60]	; (8002a54 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d10c      	bne.n	8002a34 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2280      	movs	r2, #128	; 0x80
 8002a1e:	4393      	bics	r3, r2
 8002a20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	68ba      	ldr	r2, [r7, #8]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68ba      	ldr	r2, [r7, #8]
 8002a32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	223d      	movs	r2, #61	; 0x3d
 8002a38:	2101      	movs	r1, #1
 8002a3a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	223c      	movs	r2, #60	; 0x3c
 8002a40:	2100      	movs	r1, #0
 8002a42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	0018      	movs	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b004      	add	sp, #16
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	40012c00 	.word	0x40012c00
 8002a54:	40000400 	.word	0x40000400

08002a58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a60:	46c0      	nop			; (mov r8, r8)
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b002      	add	sp, #8
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8002a70:	46c0      	nop			; (mov r8, r8)
 8002a72:	46bd      	mov	sp, r7
 8002a74:	b002      	add	sp, #8
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a80:	46c0      	nop			; (mov r8, r8)
 8002a82:	46bd      	mov	sp, r7
 8002a84:	b002      	add	sp, #8
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e044      	b.n	8002b24 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d107      	bne.n	8002ab2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2274      	movs	r2, #116	; 0x74
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	0018      	movs	r0, r3
 8002aae:	f7fd fdd3 	bl	8000658 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2224      	movs	r2, #36	; 0x24
 8002ab6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	438a      	bics	r2, r1
 8002ac6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	0018      	movs	r0, r3
 8002acc:	f000 f830 	bl	8002b30 <UART_SetConfig>
 8002ad0:	0003      	movs	r3, r0
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d101      	bne.n	8002ada <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e024      	b.n	8002b24 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	f000 f963 	bl	8002db0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	490d      	ldr	r1, [pc, #52]	; (8002b2c <HAL_UART_Init+0xa4>)
 8002af6:	400a      	ands	r2, r1
 8002af8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	212a      	movs	r1, #42	; 0x2a
 8002b06:	438a      	bics	r2, r1
 8002b08:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2101      	movs	r1, #1
 8002b16:	430a      	orrs	r2, r1
 8002b18:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f000 f9fb 	bl	8002f18 <UART_CheckIdleState>
 8002b22:	0003      	movs	r3, r0
}
 8002b24:	0018      	movs	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	b002      	add	sp, #8
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	ffffb7ff 	.word	0xffffb7ff

08002b30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b088      	sub	sp, #32
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b38:	231e      	movs	r3, #30
 8002b3a:	18fb      	adds	r3, r7, r3
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a8d      	ldr	r2, [pc, #564]	; (8002d94 <UART_SetConfig+0x264>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	0019      	movs	r1, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	4a88      	ldr	r2, [pc, #544]	; (8002d98 <UART_SetConfig+0x268>)
 8002b76:	4013      	ands	r3, r2
 8002b78:	0019      	movs	r1, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68da      	ldr	r2, [r3, #12]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	4a7f      	ldr	r2, [pc, #508]	; (8002d9c <UART_SetConfig+0x26c>)
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	0019      	movs	r1, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a7b      	ldr	r2, [pc, #492]	; (8002da0 <UART_SetConfig+0x270>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d127      	bne.n	8002c06 <UART_SetConfig+0xd6>
 8002bb6:	4b7b      	ldr	r3, [pc, #492]	; (8002da4 <UART_SetConfig+0x274>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	2203      	movs	r2, #3
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	2b03      	cmp	r3, #3
 8002bc0:	d00d      	beq.n	8002bde <UART_SetConfig+0xae>
 8002bc2:	d81b      	bhi.n	8002bfc <UART_SetConfig+0xcc>
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d014      	beq.n	8002bf2 <UART_SetConfig+0xc2>
 8002bc8:	d818      	bhi.n	8002bfc <UART_SetConfig+0xcc>
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <UART_SetConfig+0xa4>
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d00a      	beq.n	8002be8 <UART_SetConfig+0xb8>
 8002bd2:	e013      	b.n	8002bfc <UART_SetConfig+0xcc>
 8002bd4:	231f      	movs	r3, #31
 8002bd6:	18fb      	adds	r3, r7, r3
 8002bd8:	2200      	movs	r2, #0
 8002bda:	701a      	strb	r2, [r3, #0]
 8002bdc:	e021      	b.n	8002c22 <UART_SetConfig+0xf2>
 8002bde:	231f      	movs	r3, #31
 8002be0:	18fb      	adds	r3, r7, r3
 8002be2:	2202      	movs	r2, #2
 8002be4:	701a      	strb	r2, [r3, #0]
 8002be6:	e01c      	b.n	8002c22 <UART_SetConfig+0xf2>
 8002be8:	231f      	movs	r3, #31
 8002bea:	18fb      	adds	r3, r7, r3
 8002bec:	2204      	movs	r2, #4
 8002bee:	701a      	strb	r2, [r3, #0]
 8002bf0:	e017      	b.n	8002c22 <UART_SetConfig+0xf2>
 8002bf2:	231f      	movs	r3, #31
 8002bf4:	18fb      	adds	r3, r7, r3
 8002bf6:	2208      	movs	r2, #8
 8002bf8:	701a      	strb	r2, [r3, #0]
 8002bfa:	e012      	b.n	8002c22 <UART_SetConfig+0xf2>
 8002bfc:	231f      	movs	r3, #31
 8002bfe:	18fb      	adds	r3, r7, r3
 8002c00:	2210      	movs	r2, #16
 8002c02:	701a      	strb	r2, [r3, #0]
 8002c04:	e00d      	b.n	8002c22 <UART_SetConfig+0xf2>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a67      	ldr	r2, [pc, #412]	; (8002da8 <UART_SetConfig+0x278>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d104      	bne.n	8002c1a <UART_SetConfig+0xea>
 8002c10:	231f      	movs	r3, #31
 8002c12:	18fb      	adds	r3, r7, r3
 8002c14:	2200      	movs	r2, #0
 8002c16:	701a      	strb	r2, [r3, #0]
 8002c18:	e003      	b.n	8002c22 <UART_SetConfig+0xf2>
 8002c1a:	231f      	movs	r3, #31
 8002c1c:	18fb      	adds	r3, r7, r3
 8002c1e:	2210      	movs	r2, #16
 8002c20:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69da      	ldr	r2, [r3, #28]
 8002c26:	2380      	movs	r3, #128	; 0x80
 8002c28:	021b      	lsls	r3, r3, #8
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d15d      	bne.n	8002cea <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8002c2e:	231f      	movs	r3, #31
 8002c30:	18fb      	adds	r3, r7, r3
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d015      	beq.n	8002c64 <UART_SetConfig+0x134>
 8002c38:	dc18      	bgt.n	8002c6c <UART_SetConfig+0x13c>
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d00d      	beq.n	8002c5a <UART_SetConfig+0x12a>
 8002c3e:	dc15      	bgt.n	8002c6c <UART_SetConfig+0x13c>
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d002      	beq.n	8002c4a <UART_SetConfig+0x11a>
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d005      	beq.n	8002c54 <UART_SetConfig+0x124>
 8002c48:	e010      	b.n	8002c6c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c4a:	f7fe ff07 	bl	8001a5c <HAL_RCC_GetPCLK1Freq>
 8002c4e:	0003      	movs	r3, r0
 8002c50:	61bb      	str	r3, [r7, #24]
        break;
 8002c52:	e012      	b.n	8002c7a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c54:	4b55      	ldr	r3, [pc, #340]	; (8002dac <UART_SetConfig+0x27c>)
 8002c56:	61bb      	str	r3, [r7, #24]
        break;
 8002c58:	e00f      	b.n	8002c7a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c5a:	f7fe fe75 	bl	8001948 <HAL_RCC_GetSysClockFreq>
 8002c5e:	0003      	movs	r3, r0
 8002c60:	61bb      	str	r3, [r7, #24]
        break;
 8002c62:	e00a      	b.n	8002c7a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c64:	2380      	movs	r3, #128	; 0x80
 8002c66:	021b      	lsls	r3, r3, #8
 8002c68:	61bb      	str	r3, [r7, #24]
        break;
 8002c6a:	e006      	b.n	8002c7a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c70:	231e      	movs	r3, #30
 8002c72:	18fb      	adds	r3, r7, r3
 8002c74:	2201      	movs	r2, #1
 8002c76:	701a      	strb	r2, [r3, #0]
        break;
 8002c78:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d100      	bne.n	8002c82 <UART_SetConfig+0x152>
 8002c80:	e07b      	b.n	8002d7a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	005a      	lsls	r2, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	085b      	lsrs	r3, r3, #1
 8002c8c:	18d2      	adds	r2, r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	0019      	movs	r1, r3
 8002c94:	0010      	movs	r0, r2
 8002c96:	f7fd fa37 	bl	8000108 <__udivsi3>
 8002c9a:	0003      	movs	r3, r0
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	2b0f      	cmp	r3, #15
 8002ca4:	d91c      	bls.n	8002ce0 <UART_SetConfig+0x1b0>
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	2380      	movs	r3, #128	; 0x80
 8002caa:	025b      	lsls	r3, r3, #9
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d217      	bcs.n	8002ce0 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	200e      	movs	r0, #14
 8002cb6:	183b      	adds	r3, r7, r0
 8002cb8:	210f      	movs	r1, #15
 8002cba:	438a      	bics	r2, r1
 8002cbc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	085b      	lsrs	r3, r3, #1
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	2207      	movs	r2, #7
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	b299      	uxth	r1, r3
 8002cca:	183b      	adds	r3, r7, r0
 8002ccc:	183a      	adds	r2, r7, r0
 8002cce:	8812      	ldrh	r2, [r2, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	183a      	adds	r2, r7, r0
 8002cda:	8812      	ldrh	r2, [r2, #0]
 8002cdc:	60da      	str	r2, [r3, #12]
 8002cde:	e04c      	b.n	8002d7a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002ce0:	231e      	movs	r3, #30
 8002ce2:	18fb      	adds	r3, r7, r3
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	701a      	strb	r2, [r3, #0]
 8002ce8:	e047      	b.n	8002d7a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002cea:	231f      	movs	r3, #31
 8002cec:	18fb      	adds	r3, r7, r3
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d015      	beq.n	8002d20 <UART_SetConfig+0x1f0>
 8002cf4:	dc18      	bgt.n	8002d28 <UART_SetConfig+0x1f8>
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d00d      	beq.n	8002d16 <UART_SetConfig+0x1e6>
 8002cfa:	dc15      	bgt.n	8002d28 <UART_SetConfig+0x1f8>
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d002      	beq.n	8002d06 <UART_SetConfig+0x1d6>
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d005      	beq.n	8002d10 <UART_SetConfig+0x1e0>
 8002d04:	e010      	b.n	8002d28 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d06:	f7fe fea9 	bl	8001a5c <HAL_RCC_GetPCLK1Freq>
 8002d0a:	0003      	movs	r3, r0
 8002d0c:	61bb      	str	r3, [r7, #24]
        break;
 8002d0e:	e012      	b.n	8002d36 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d10:	4b26      	ldr	r3, [pc, #152]	; (8002dac <UART_SetConfig+0x27c>)
 8002d12:	61bb      	str	r3, [r7, #24]
        break;
 8002d14:	e00f      	b.n	8002d36 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d16:	f7fe fe17 	bl	8001948 <HAL_RCC_GetSysClockFreq>
 8002d1a:	0003      	movs	r3, r0
 8002d1c:	61bb      	str	r3, [r7, #24]
        break;
 8002d1e:	e00a      	b.n	8002d36 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d20:	2380      	movs	r3, #128	; 0x80
 8002d22:	021b      	lsls	r3, r3, #8
 8002d24:	61bb      	str	r3, [r7, #24]
        break;
 8002d26:	e006      	b.n	8002d36 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d2c:	231e      	movs	r3, #30
 8002d2e:	18fb      	adds	r3, r7, r3
 8002d30:	2201      	movs	r2, #1
 8002d32:	701a      	strb	r2, [r3, #0]
        break;
 8002d34:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d01e      	beq.n	8002d7a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	085a      	lsrs	r2, r3, #1
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	18d2      	adds	r2, r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	0019      	movs	r1, r3
 8002d4c:	0010      	movs	r0, r2
 8002d4e:	f7fd f9db 	bl	8000108 <__udivsi3>
 8002d52:	0003      	movs	r3, r0
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	2b0f      	cmp	r3, #15
 8002d5c:	d909      	bls.n	8002d72 <UART_SetConfig+0x242>
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	2380      	movs	r3, #128	; 0x80
 8002d62:	025b      	lsls	r3, r3, #9
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d204      	bcs.n	8002d72 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	60da      	str	r2, [r3, #12]
 8002d70:	e003      	b.n	8002d7a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002d72:	231e      	movs	r3, #30
 8002d74:	18fb      	adds	r3, r7, r3
 8002d76:	2201      	movs	r2, #1
 8002d78:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002d86:	231e      	movs	r3, #30
 8002d88:	18fb      	adds	r3, r7, r3
 8002d8a:	781b      	ldrb	r3, [r3, #0]
}
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b008      	add	sp, #32
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	efff69f3 	.word	0xefff69f3
 8002d98:	ffffcfff 	.word	0xffffcfff
 8002d9c:	fffff4ff 	.word	0xfffff4ff
 8002da0:	40013800 	.word	0x40013800
 8002da4:	40021000 	.word	0x40021000
 8002da8:	40004400 	.word	0x40004400
 8002dac:	007a1200 	.word	0x007a1200

08002db0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	d00b      	beq.n	8002dda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	4a4a      	ldr	r2, [pc, #296]	; (8002ef4 <UART_AdvFeatureConfig+0x144>)
 8002dca:	4013      	ands	r3, r2
 8002dcc:	0019      	movs	r1, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	2202      	movs	r2, #2
 8002de0:	4013      	ands	r3, r2
 8002de2:	d00b      	beq.n	8002dfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	4a43      	ldr	r2, [pc, #268]	; (8002ef8 <UART_AdvFeatureConfig+0x148>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	0019      	movs	r1, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	2204      	movs	r2, #4
 8002e02:	4013      	ands	r3, r2
 8002e04:	d00b      	beq.n	8002e1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	4a3b      	ldr	r2, [pc, #236]	; (8002efc <UART_AdvFeatureConfig+0x14c>)
 8002e0e:	4013      	ands	r3, r2
 8002e10:	0019      	movs	r1, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	2208      	movs	r2, #8
 8002e24:	4013      	ands	r3, r2
 8002e26:	d00b      	beq.n	8002e40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	4a34      	ldr	r2, [pc, #208]	; (8002f00 <UART_AdvFeatureConfig+0x150>)
 8002e30:	4013      	ands	r3, r2
 8002e32:	0019      	movs	r1, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	2210      	movs	r2, #16
 8002e46:	4013      	ands	r3, r2
 8002e48:	d00b      	beq.n	8002e62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	4a2c      	ldr	r2, [pc, #176]	; (8002f04 <UART_AdvFeatureConfig+0x154>)
 8002e52:	4013      	ands	r3, r2
 8002e54:	0019      	movs	r1, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	2220      	movs	r2, #32
 8002e68:	4013      	ands	r3, r2
 8002e6a:	d00b      	beq.n	8002e84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	4a25      	ldr	r2, [pc, #148]	; (8002f08 <UART_AdvFeatureConfig+0x158>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	0019      	movs	r1, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	2240      	movs	r2, #64	; 0x40
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	d01d      	beq.n	8002eca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	4a1d      	ldr	r2, [pc, #116]	; (8002f0c <UART_AdvFeatureConfig+0x15c>)
 8002e96:	4013      	ands	r3, r2
 8002e98:	0019      	movs	r1, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eaa:	2380      	movs	r3, #128	; 0x80
 8002eac:	035b      	lsls	r3, r3, #13
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d10b      	bne.n	8002eca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	4a15      	ldr	r2, [pc, #84]	; (8002f10 <UART_AdvFeatureConfig+0x160>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	0019      	movs	r1, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	2280      	movs	r2, #128	; 0x80
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	d00b      	beq.n	8002eec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	4a0e      	ldr	r2, [pc, #56]	; (8002f14 <UART_AdvFeatureConfig+0x164>)
 8002edc:	4013      	ands	r3, r2
 8002ede:	0019      	movs	r1, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	605a      	str	r2, [r3, #4]
  }
}
 8002eec:	46c0      	nop			; (mov r8, r8)
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	b002      	add	sp, #8
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	fffdffff 	.word	0xfffdffff
 8002ef8:	fffeffff 	.word	0xfffeffff
 8002efc:	fffbffff 	.word	0xfffbffff
 8002f00:	ffff7fff 	.word	0xffff7fff
 8002f04:	ffffefff 	.word	0xffffefff
 8002f08:	ffffdfff 	.word	0xffffdfff
 8002f0c:	ffefffff 	.word	0xffefffff
 8002f10:	ff9fffff 	.word	0xff9fffff
 8002f14:	fff7ffff 	.word	0xfff7ffff

08002f18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2280      	movs	r2, #128	; 0x80
 8002f24:	2100      	movs	r1, #0
 8002f26:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f28:	f7fd fc80 	bl	800082c <HAL_GetTick>
 8002f2c:	0003      	movs	r3, r0
 8002f2e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2208      	movs	r2, #8
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	d10c      	bne.n	8002f58 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2280      	movs	r2, #128	; 0x80
 8002f42:	0391      	lsls	r1, r2, #14
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	4a17      	ldr	r2, [pc, #92]	; (8002fa4 <UART_CheckIdleState+0x8c>)
 8002f48:	9200      	str	r2, [sp, #0]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f000 f82c 	bl	8002fa8 <UART_WaitOnFlagUntilTimeout>
 8002f50:	1e03      	subs	r3, r0, #0
 8002f52:	d001      	beq.n	8002f58 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e021      	b.n	8002f9c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2204      	movs	r2, #4
 8002f60:	4013      	ands	r3, r2
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d10c      	bne.n	8002f80 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2280      	movs	r2, #128	; 0x80
 8002f6a:	03d1      	lsls	r1, r2, #15
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	4a0d      	ldr	r2, [pc, #52]	; (8002fa4 <UART_CheckIdleState+0x8c>)
 8002f70:	9200      	str	r2, [sp, #0]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f000 f818 	bl	8002fa8 <UART_WaitOnFlagUntilTimeout>
 8002f78:	1e03      	subs	r3, r0, #0
 8002f7a:	d001      	beq.n	8002f80 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e00d      	b.n	8002f9c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2220      	movs	r2, #32
 8002f84:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2274      	movs	r2, #116	; 0x74
 8002f96:	2100      	movs	r1, #0
 8002f98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b004      	add	sp, #16
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	01ffffff 	.word	0x01ffffff

08002fa8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b094      	sub	sp, #80	; 0x50
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	603b      	str	r3, [r7, #0]
 8002fb4:	1dfb      	adds	r3, r7, #7
 8002fb6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fb8:	e0a3      	b.n	8003102 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	d100      	bne.n	8002fc2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002fc0:	e09f      	b.n	8003102 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc2:	f7fd fc33 	bl	800082c <HAL_GetTick>
 8002fc6:	0002      	movs	r2, r0
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d302      	bcc.n	8002fd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002fd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d13d      	bne.n	8003054 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8002fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fe0:	647b      	str	r3, [r7, #68]	; 0x44
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe8:	f383 8810 	msr	PRIMASK, r3
}
 8002fec:	46c0      	nop			; (mov r8, r8)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	494c      	ldr	r1, [pc, #304]	; (800312c <UART_WaitOnFlagUntilTimeout+0x184>)
 8002ffa:	400a      	ands	r2, r1
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003000:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003004:	f383 8810 	msr	PRIMASK, r3
}
 8003008:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800300a:	f3ef 8310 	mrs	r3, PRIMASK
 800300e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003012:	643b      	str	r3, [r7, #64]	; 0x40
 8003014:	2301      	movs	r3, #1
 8003016:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301a:	f383 8810 	msr	PRIMASK, r3
}
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689a      	ldr	r2, [r3, #8]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2101      	movs	r1, #1
 800302c:	438a      	bics	r2, r1
 800302e:	609a      	str	r2, [r3, #8]
 8003030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003032:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003036:	f383 8810 	msr	PRIMASK, r3
}
 800303a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2220      	movs	r2, #32
 8003040:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2220      	movs	r2, #32
 8003046:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2274      	movs	r2, #116	; 0x74
 800304c:	2100      	movs	r1, #0
 800304e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e067      	b.n	8003124 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2204      	movs	r2, #4
 800305c:	4013      	ands	r3, r2
 800305e:	d050      	beq.n	8003102 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	69da      	ldr	r2, [r3, #28]
 8003066:	2380      	movs	r3, #128	; 0x80
 8003068:	011b      	lsls	r3, r3, #4
 800306a:	401a      	ands	r2, r3
 800306c:	2380      	movs	r3, #128	; 0x80
 800306e:	011b      	lsls	r3, r3, #4
 8003070:	429a      	cmp	r2, r3
 8003072:	d146      	bne.n	8003102 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2280      	movs	r2, #128	; 0x80
 800307a:	0112      	lsls	r2, r2, #4
 800307c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800307e:	f3ef 8310 	mrs	r3, PRIMASK
 8003082:	613b      	str	r3, [r7, #16]
  return(result);
 8003084:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003086:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003088:	2301      	movs	r3, #1
 800308a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	f383 8810 	msr	PRIMASK, r3
}
 8003092:	46c0      	nop			; (mov r8, r8)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4923      	ldr	r1, [pc, #140]	; (800312c <UART_WaitOnFlagUntilTimeout+0x184>)
 80030a0:	400a      	ands	r2, r1
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	f383 8810 	msr	PRIMASK, r3
}
 80030ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030b0:	f3ef 8310 	mrs	r3, PRIMASK
 80030b4:	61fb      	str	r3, [r7, #28]
  return(result);
 80030b6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80030ba:	2301      	movs	r3, #1
 80030bc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	f383 8810 	msr	PRIMASK, r3
}
 80030c4:	46c0      	nop			; (mov r8, r8)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2101      	movs	r1, #1
 80030d2:	438a      	bics	r2, r1
 80030d4:	609a      	str	r2, [r3, #8]
 80030d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	f383 8810 	msr	PRIMASK, r3
}
 80030e0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2220      	movs	r2, #32
 80030e6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2220      	movs	r2, #32
 80030ec:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2280      	movs	r2, #128	; 0x80
 80030f2:	2120      	movs	r1, #32
 80030f4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2274      	movs	r2, #116	; 0x74
 80030fa:	2100      	movs	r1, #0
 80030fc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e010      	b.n	8003124 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	4013      	ands	r3, r2
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	425a      	negs	r2, r3
 8003112:	4153      	adcs	r3, r2
 8003114:	b2db      	uxtb	r3, r3
 8003116:	001a      	movs	r2, r3
 8003118:	1dfb      	adds	r3, r7, #7
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	429a      	cmp	r2, r3
 800311e:	d100      	bne.n	8003122 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003120:	e74b      	b.n	8002fba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	0018      	movs	r0, r3
 8003126:	46bd      	mov	sp, r7
 8003128:	b014      	add	sp, #80	; 0x50
 800312a:	bd80      	pop	{r7, pc}
 800312c:	fffffe5f 	.word	0xfffffe5f

08003130 <test_main>:
};

static bool transferNewFrame = false;

void test_main(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0

	if (transferNewFrame)
 8003134:	4b07      	ldr	r3, [pc, #28]	; (8003154 <test_main+0x24>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d008      	beq.n	800314e <test_main+0x1e>
	{
		ws2812b_transferFrame(LedFrame, 6, 2);
 800313c:	4b06      	ldr	r3, [pc, #24]	; (8003158 <test_main+0x28>)
 800313e:	2202      	movs	r2, #2
 8003140:	2106      	movs	r1, #6
 8003142:	0018      	movs	r0, r3
 8003144:	f000 f814 	bl	8003170 <ws2812b_transferFrame>
		transferNewFrame = false;
 8003148:	4b02      	ldr	r3, [pc, #8]	; (8003154 <test_main+0x24>)
 800314a:	2200      	movs	r2, #0
 800314c:	701a      	strb	r2, [r3, #0]
	}

}
 800314e:	46c0      	nop			; (mov r8, r8)
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	2000003c 	.word	0x2000003c
 8003158:	2000000c 	.word	0x2000000c

0800315c <ws2812b_init>:
static void fillTheSecondHalfOfBuffer(void);

static void finishSequenze(void);

void ws2812b_init (void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
//	Led[8].Blue = 200;

//	fillTheFirstHalfOfBuffer();
////	HAL_DMA_Start_IT(&hdma_tim3_ch4_up, (uint32_t)mg_dma2PwmBitBuffer, (uint32_t)&htim3.Instance->CCR4, c_sizeOfBitBuffer);
//	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4, (uint32_t*)mg_dma2PwmBitBuffer, c_sizeOfBitBuffer);
}
 8003160:	46c0      	nop			; (mov r8, r8)
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <ws2812b_main>:

void ws2812b_main(void)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	af00      	add	r7, sp, #0

}
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <ws2812b_transferFrame>:

void ws2812b_transferFrame(ws2812bLed_t ledFrm[], uint16_t frameEntries, uint16_t numOfRepeat)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	0008      	movs	r0, r1
 800317a:	0011      	movs	r1, r2
 800317c:	1cbb      	adds	r3, r7, #2
 800317e:	1c02      	adds	r2, r0, #0
 8003180:	801a      	strh	r2, [r3, #0]
 8003182:	003b      	movs	r3, r7
 8003184:	1c0a      	adds	r2, r1, #0
 8003186:	801a      	strh	r2, [r3, #0]
	pmg_LedFrame = ledFrm;
 8003188:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <ws2812b_transferFrame+0x48>)
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	601a      	str	r2, [r3, #0]
	mg_LedFrameNumOfLed = frameEntries;
 800318e:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <ws2812b_transferFrame+0x4c>)
 8003190:	1cba      	adds	r2, r7, #2
 8003192:	8812      	ldrh	r2, [r2, #0]
 8003194:	801a      	strh	r2, [r3, #0]
	mg_numOfRepeats = numOfRepeat;
 8003196:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <ws2812b_transferFrame+0x50>)
 8003198:	003a      	movs	r2, r7
 800319a:	8812      	ldrh	r2, [r2, #0]
 800319c:	801a      	strh	r2, [r3, #0]

	fillTheFirstHalfOfBuffer();
 800319e:	f000 f835 	bl	800320c <fillTheFirstHalfOfBuffer>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4, (uint32_t*)mg_dma2PwmBitBuffer, c_sizeOfBitBuffer);
 80031a2:	2330      	movs	r3, #48	; 0x30
 80031a4:	4a07      	ldr	r2, [pc, #28]	; (80031c4 <ws2812b_transferFrame+0x54>)
 80031a6:	4808      	ldr	r0, [pc, #32]	; (80031c8 <ws2812b_transferFrame+0x58>)
 80031a8:	210c      	movs	r1, #12
 80031aa:	f7fe fccb 	bl	8001b44 <HAL_TIM_PWM_Start_DMA>
}
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	46bd      	mov	sp, r7
 80031b2:	b002      	add	sp, #8
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	20000070 	.word	0x20000070
 80031bc:	20000074 	.word	0x20000074
 80031c0:	2000001e 	.word	0x2000001e
 80031c4:	20000040 	.word	0x20000040
 80031c8:	2000007c 	.word	0x2000007c

080031cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	4b04      	ldr	r3, [pc, #16]	; (80031e8 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 80031d8:	429a      	cmp	r2, r3
 80031da:	d101      	bne.n	80031e0 <HAL_TIM_PWM_PulseFinishedCallback+0x14>
	{
		fillTheSecondHalfOfBuffer();
 80031dc:	f000 fa5a 	bl	8003694 <fillTheSecondHalfOfBuffer>
	}

}
 80031e0:	46c0      	nop			; (mov r8, r8)
 80031e2:	46bd      	mov	sp, r7
 80031e4:	b002      	add	sp, #8
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	2000007c 	.word	0x2000007c

080031ec <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	4b04      	ldr	r3, [pc, #16]	; (8003208 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x1c>)
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d101      	bne.n	8003200 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x14>
	{
		fillTheFirstHalfOfBuffer();
 80031fc:	f000 f806 	bl	800320c <fillTheFirstHalfOfBuffer>
	}
}
 8003200:	46c0      	nop			; (mov r8, r8)
 8003202:	46bd      	mov	sp, r7
 8003204:	b002      	add	sp, #8
 8003206:	bd80      	pop	{r7, pc}
 8003208:	2000007c 	.word	0x2000007c

0800320c <fillTheFirstHalfOfBuffer>:
//	fillTheFirstHalfOfBuffer();
//}

// wenn die erste hälfte übertragen wurde
void fillTheFirstHalfOfBuffer(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
//		for (uint8_t i = 0; i < 23; ++i)
//		{
//			mg_dma2PwmBitBuffer[i] = 0;
//		}
//	}
	if (mg_posInBufferToRead >= mg_LedFrameNumOfLed)
 8003212:	4bc6      	ldr	r3, [pc, #792]	; (800352c <fillTheFirstHalfOfBuffer+0x320>)
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	b29a      	uxth	r2, r3
 8003218:	4bc5      	ldr	r3, [pc, #788]	; (8003530 <fillTheFirstHalfOfBuffer+0x324>)
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	b29b      	uxth	r3, r3
 800321e:	429a      	cmp	r2, r3
 8003220:	d309      	bcc.n	8003236 <fillTheFirstHalfOfBuffer+0x2a>
	{
		mg_posInBufferToRead = 0;
 8003222:	4bc2      	ldr	r3, [pc, #776]	; (800352c <fillTheFirstHalfOfBuffer+0x320>)
 8003224:	2200      	movs	r2, #0
 8003226:	801a      	strh	r2, [r3, #0]
		mg_numOfRepeatsCnt++;
 8003228:	4bc2      	ldr	r3, [pc, #776]	; (8003534 <fillTheFirstHalfOfBuffer+0x328>)
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	b29b      	uxth	r3, r3
 800322e:	3301      	adds	r3, #1
 8003230:	b29a      	uxth	r2, r3
 8003232:	4bc0      	ldr	r3, [pc, #768]	; (8003534 <fillTheFirstHalfOfBuffer+0x328>)
 8003234:	801a      	strh	r2, [r3, #0]
	}

	if (mg_numOfRepeatsCnt >= mg_numOfRepeats)
 8003236:	4bbf      	ldr	r3, [pc, #764]	; (8003534 <fillTheFirstHalfOfBuffer+0x328>)
 8003238:	881b      	ldrh	r3, [r3, #0]
 800323a:	b29a      	uxth	r2, r3
 800323c:	4bbe      	ldr	r3, [pc, #760]	; (8003538 <fillTheFirstHalfOfBuffer+0x32c>)
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	b29b      	uxth	r3, r3
 8003242:	429a      	cmp	r2, r3
 8003244:	d312      	bcc.n	800326c <fillTheFirstHalfOfBuffer+0x60>
	{
		for (uint8_t i = 0; i < 23; ++i)
 8003246:	1dfb      	adds	r3, r7, #7
 8003248:	2200      	movs	r2, #0
 800324a:	701a      	strb	r2, [r3, #0]
 800324c:	e009      	b.n	8003262 <fillTheFirstHalfOfBuffer+0x56>
		{
			mg_dma2PwmBitBuffer[i] = 0;
 800324e:	1dfb      	adds	r3, r7, #7
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	4aba      	ldr	r2, [pc, #744]	; (800353c <fillTheFirstHalfOfBuffer+0x330>)
 8003254:	2100      	movs	r1, #0
 8003256:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 23; ++i)
 8003258:	1dfb      	adds	r3, r7, #7
 800325a:	1dfa      	adds	r2, r7, #7
 800325c:	7812      	ldrb	r2, [r2, #0]
 800325e:	3201      	adds	r2, #1
 8003260:	701a      	strb	r2, [r3, #0]
 8003262:	1dfb      	adds	r3, r7, #7
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b16      	cmp	r3, #22
 8003268:	d9f1      	bls.n	800324e <fillTheFirstHalfOfBuffer+0x42>
 800326a:	e201      	b.n	8003670 <fillTheFirstHalfOfBuffer+0x464>
		}
	}
	else
	{
		/* Green */
		mg_dma2PwmBitBuffer[0]  = (pmg_LedFrame[mg_posInBufferToRead].Green & 0x80) ? c_PulseLogic1 : c_PulseLogic0;
 800326c:	4bb4      	ldr	r3, [pc, #720]	; (8003540 <fillTheFirstHalfOfBuffer+0x334>)
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	4bae      	ldr	r3, [pc, #696]	; (800352c <fillTheFirstHalfOfBuffer+0x320>)
 8003272:	881b      	ldrh	r3, [r3, #0]
 8003274:	b29b      	uxth	r3, r3
 8003276:	0019      	movs	r1, r3
 8003278:	000b      	movs	r3, r1
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	185b      	adds	r3, r3, r1
 800327e:	18d3      	adds	r3, r2, r3
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	b2db      	uxtb	r3, r3
 8003284:	b25b      	sxtb	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	da01      	bge.n	800328e <fillTheFirstHalfOfBuffer+0x82>
 800328a:	2228      	movs	r2, #40	; 0x28
 800328c:	e000      	b.n	8003290 <fillTheFirstHalfOfBuffer+0x84>
 800328e:	2213      	movs	r2, #19
 8003290:	4baa      	ldr	r3, [pc, #680]	; (800353c <fillTheFirstHalfOfBuffer+0x330>)
 8003292:	701a      	strb	r2, [r3, #0]
		mg_dma2PwmBitBuffer[1]  = (pmg_LedFrame[mg_posInBufferToRead].Green & 0x40) ? c_PulseLogic1 : c_PulseLogic0;
 8003294:	4baa      	ldr	r3, [pc, #680]	; (8003540 <fillTheFirstHalfOfBuffer+0x334>)
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	4ba4      	ldr	r3, [pc, #656]	; (800352c <fillTheFirstHalfOfBuffer+0x320>)
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	b29b      	uxth	r3, r3
 800329e:	0019      	movs	r1, r3
 80032a0:	000b      	movs	r3, r1
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	185b      	adds	r3, r3, r1
 80032a6:	18d3      	adds	r3, r2, r3
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	001a      	movs	r2, r3
 80032ae:	2340      	movs	r3, #64	; 0x40
 80032b0:	4013      	ands	r3, r2
 80032b2:	d001      	beq.n	80032b8 <fillTheFirstHalfOfBuffer+0xac>
 80032b4:	2228      	movs	r2, #40	; 0x28
 80032b6:	e000      	b.n	80032ba <fillTheFirstHalfOfBuffer+0xae>
 80032b8:	2213      	movs	r2, #19
 80032ba:	4ba0      	ldr	r3, [pc, #640]	; (800353c <fillTheFirstHalfOfBuffer+0x330>)
 80032bc:	705a      	strb	r2, [r3, #1]
		mg_dma2PwmBitBuffer[2]  = (pmg_LedFrame[mg_posInBufferToRead].Green & 0x20) ? c_PulseLogic1 : c_PulseLogic0;
 80032be:	4ba0      	ldr	r3, [pc, #640]	; (8003540 <fillTheFirstHalfOfBuffer+0x334>)
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	4b9a      	ldr	r3, [pc, #616]	; (800352c <fillTheFirstHalfOfBuffer+0x320>)
 80032c4:	881b      	ldrh	r3, [r3, #0]
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	0019      	movs	r1, r3
 80032ca:	000b      	movs	r3, r1
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	185b      	adds	r3, r3, r1
 80032d0:	18d3      	adds	r3, r2, r3
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	001a      	movs	r2, r3
 80032d8:	2320      	movs	r3, #32
 80032da:	4013      	ands	r3, r2
 80032dc:	d001      	beq.n	80032e2 <fillTheFirstHalfOfBuffer+0xd6>
 80032de:	2228      	movs	r2, #40	; 0x28
 80032e0:	e000      	b.n	80032e4 <fillTheFirstHalfOfBuffer+0xd8>
 80032e2:	2213      	movs	r2, #19
 80032e4:	4b95      	ldr	r3, [pc, #596]	; (800353c <fillTheFirstHalfOfBuffer+0x330>)
 80032e6:	709a      	strb	r2, [r3, #2]
		mg_dma2PwmBitBuffer[3]  = (pmg_LedFrame[mg_posInBufferToRead].Green & 0x10) ? c_PulseLogic1 : c_PulseLogic0;
 80032e8:	4b95      	ldr	r3, [pc, #596]	; (8003540 <fillTheFirstHalfOfBuffer+0x334>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	4b8f      	ldr	r3, [pc, #572]	; (800352c <fillTheFirstHalfOfBuffer+0x320>)
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	0019      	movs	r1, r3
 80032f4:	000b      	movs	r3, r1
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	185b      	adds	r3, r3, r1
 80032fa:	18d3      	adds	r3, r2, r3
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	001a      	movs	r2, r3
 8003302:	2310      	movs	r3, #16
 8003304:	4013      	ands	r3, r2
 8003306:	d001      	beq.n	800330c <fillTheFirstHalfOfBuffer+0x100>
 8003308:	2228      	movs	r2, #40	; 0x28
 800330a:	e000      	b.n	800330e <fillTheFirstHalfOfBuffer+0x102>
 800330c:	2213      	movs	r2, #19
 800330e:	4b8b      	ldr	r3, [pc, #556]	; (800353c <fillTheFirstHalfOfBuffer+0x330>)
 8003310:	70da      	strb	r2, [r3, #3]
		mg_dma2PwmBitBuffer[4]  = (pmg_LedFrame[mg_posInBufferToRead].Green & 0x08) ? c_PulseLogic1 : c_PulseLogic0;
 8003312:	4b8b      	ldr	r3, [pc, #556]	; (8003540 <fillTheFirstHalfOfBuffer+0x334>)
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	4b85      	ldr	r3, [pc, #532]	; (800352c <fillTheFirstHalfOfBuffer+0x320>)
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	b29b      	uxth	r3, r3
 800331c:	0019      	movs	r1, r3
 800331e:	000b      	movs	r3, r1
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	185b      	adds	r3, r3, r1
 8003324:	18d3      	adds	r3, r2, r3
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	b2db      	uxtb	r3, r3
 800332a:	001a      	movs	r2, r3
 800332c:	2308      	movs	r3, #8
 800332e:	4013      	ands	r3, r2
 8003330:	d001      	beq.n	8003336 <fillTheFirstHalfOfBuffer+0x12a>
 8003332:	2228      	movs	r2, #40	; 0x28
 8003334:	e000      	b.n	8003338 <fillTheFirstHalfOfBuffer+0x12c>
 8003336:	2213      	movs	r2, #19
 8003338:	4b80      	ldr	r3, [pc, #512]	; (800353c <fillTheFirstHalfOfBuffer+0x330>)
 800333a:	711a      	strb	r2, [r3, #4]
		mg_dma2PwmBitBuffer[5]  = (pmg_LedFrame[mg_posInBufferToRead].Green & 0x04) ? c_PulseLogic1 : c_PulseLogic0;
 800333c:	4b80      	ldr	r3, [pc, #512]	; (8003540 <fillTheFirstHalfOfBuffer+0x334>)
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	4b7a      	ldr	r3, [pc, #488]	; (800352c <fillTheFirstHalfOfBuffer+0x320>)
 8003342:	881b      	ldrh	r3, [r3, #0]
 8003344:	b29b      	uxth	r3, r3
 8003346:	0019      	movs	r1, r3
 8003348:	000b      	movs	r3, r1
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	185b      	adds	r3, r3, r1
 800334e:	18d3      	adds	r3, r2, r3
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	b2db      	uxtb	r3, r3
 8003354:	001a      	movs	r2, r3
 8003356:	2304      	movs	r3, #4
 8003358:	4013      	ands	r3, r2
 800335a:	d001      	beq.n	8003360 <fillTheFirstHalfOfBuffer+0x154>
 800335c:	2228      	movs	r2, #40	; 0x28
 800335e:	e000      	b.n	8003362 <fillTheFirstHalfOfBuffer+0x156>
 8003360:	2213      	movs	r2, #19
 8003362:	4b76      	ldr	r3, [pc, #472]	; (800353c <fillTheFirstHalfOfBuffer+0x330>)
 8003364:	715a      	strb	r2, [r3, #5]
		mg_dma2PwmBitBuffer[6]  = (pmg_LedFrame[mg_posInBufferToRead].Green & 0x02) ? c_PulseLogic1 : c_PulseLogic0;
 8003366:	4b76      	ldr	r3, [pc, #472]	; (8003540 <fillTheFirstHalfOfBuffer+0x334>)
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	4b70      	ldr	r3, [pc, #448]	; (800352c <fillTheFirstHalfOfBuffer+0x320>)
 800336c:	881b      	ldrh	r3, [r3, #0]
 800336e:	b29b      	uxth	r3, r3
 8003370:	0019      	movs	r1, r3
 8003372:	000b      	movs	r3, r1
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	185b      	adds	r3, r3, r1
 8003378:	18d3      	adds	r3, r2, r3
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	001a      	movs	r2, r3
 8003380:	2302      	movs	r3, #2
 8003382:	4013      	ands	r3, r2
 8003384:	d001      	beq.n	800338a <fillTheFirstHalfOfBuffer+0x17e>
 8003386:	2228      	movs	r2, #40	; 0x28
 8003388:	e000      	b.n	800338c <fillTheFirstHalfOfBuffer+0x180>
 800338a:	2213      	movs	r2, #19
 800338c:	4b6b      	ldr	r3, [pc, #428]	; (800353c <fillTheFirstHalfOfBuffer+0x330>)
 800338e:	719a      	strb	r2, [r3, #6]
		mg_dma2PwmBitBuffer[7]  = (pmg_LedFrame[mg_posInBufferToRead].Green & 0x01) ? c_PulseLogic1 : c_PulseLogic0;
 8003390:	4b6b      	ldr	r3, [pc, #428]	; (8003540 <fillTheFirstHalfOfBuffer+0x334>)
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	4b65      	ldr	r3, [pc, #404]	; (800352c <fillTheFirstHalfOfBuffer+0x320>)
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	b29b      	uxth	r3, r3
 800339a:	0019      	movs	r1, r3
 800339c:	000b      	movs	r3, r1
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	185b      	adds	r3, r3, r1
 80033a2:	18d3      	adds	r3, r2, r3
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	001a      	movs	r2, r3
 80033aa:	2301      	movs	r3, #1
 80033ac:	4013      	ands	r3, r2
 80033ae:	d001      	beq.n	80033b4 <fillTheFirstHalfOfBuffer+0x1a8>
 80033b0:	2228      	movs	r2, #40	; 0x28
 80033b2:	e000      	b.n	80033b6 <fillTheFirstHalfOfBuffer+0x1aa>
 80033b4:	2213      	movs	r2, #19
 80033b6:	4b61      	ldr	r3, [pc, #388]	; (800353c <fillTheFirstHalfOfBuffer+0x330>)
 80033b8:	71da      	strb	r2, [r3, #7]
		/* Red */
		mg_dma2PwmBitBuffer[8]  = (pmg_LedFrame[mg_posInBufferToRead].Red & 0x80) ? c_PulseLogic1 : c_PulseLogic0;
 80033ba:	4b61      	ldr	r3, [pc, #388]	; (8003540 <fillTheFirstHalfOfBuffer+0x334>)
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	4b5b      	ldr	r3, [pc, #364]	; (800352c <fillTheFirstHalfOfBuffer+0x320>)
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	0019      	movs	r1, r3
 80033c6:	000b      	movs	r3, r1
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	185b      	adds	r3, r3, r1
 80033cc:	18d3      	adds	r3, r2, r3
 80033ce:	785b      	ldrb	r3, [r3, #1]
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	b25b      	sxtb	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	da01      	bge.n	80033dc <fillTheFirstHalfOfBuffer+0x1d0>
 80033d8:	2228      	movs	r2, #40	; 0x28
 80033da:	e000      	b.n	80033de <fillTheFirstHalfOfBuffer+0x1d2>
 80033dc:	2213      	movs	r2, #19
 80033de:	4b57      	ldr	r3, [pc, #348]	; (800353c <fillTheFirstHalfOfBuffer+0x330>)
 80033e0:	721a      	strb	r2, [r3, #8]
		mg_dma2PwmBitBuffer[9]  = (pmg_LedFrame[mg_posInBufferToRead].Red & 0x40) ? c_PulseLogic1 : c_PulseLogic0;
 80033e2:	4b57      	ldr	r3, [pc, #348]	; (8003540 <fillTheFirstHalfOfBuffer+0x334>)
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	4b51      	ldr	r3, [pc, #324]	; (800352c <fillTheFirstHalfOfBuffer+0x320>)
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	0019      	movs	r1, r3
 80033ee:	000b      	movs	r3, r1
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	185b      	adds	r3, r3, r1
 80033f4:	18d3      	adds	r3, r2, r3
 80033f6:	785b      	ldrb	r3, [r3, #1]
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	001a      	movs	r2, r3
 80033fc:	2340      	movs	r3, #64	; 0x40
 80033fe:	4013      	ands	r3, r2
 8003400:	d001      	beq.n	8003406 <fillTheFirstHalfOfBuffer+0x1fa>
 8003402:	2228      	movs	r2, #40	; 0x28
 8003404:	e000      	b.n	8003408 <fillTheFirstHalfOfBuffer+0x1fc>
 8003406:	2213      	movs	r2, #19
 8003408:	4b4c      	ldr	r3, [pc, #304]	; (800353c <fillTheFirstHalfOfBuffer+0x330>)
 800340a:	725a      	strb	r2, [r3, #9]
		mg_dma2PwmBitBuffer[10] = (pmg_LedFrame[mg_posInBufferToRead].Red & 0x20) ? c_PulseLogic1 : c_PulseLogic0;
 800340c:	4b4c      	ldr	r3, [pc, #304]	; (8003540 <fillTheFirstHalfOfBuffer+0x334>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	4b46      	ldr	r3, [pc, #280]	; (800352c <fillTheFirstHalfOfBuffer+0x320>)
 8003412:	881b      	ldrh	r3, [r3, #0]
 8003414:	b29b      	uxth	r3, r3
 8003416:	0019      	movs	r1, r3
 8003418:	000b      	movs	r3, r1
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	185b      	adds	r3, r3, r1
 800341e:	18d3      	adds	r3, r2, r3
 8003420:	785b      	ldrb	r3, [r3, #1]
 8003422:	b2db      	uxtb	r3, r3
 8003424:	001a      	movs	r2, r3
 8003426:	2320      	movs	r3, #32
 8003428:	4013      	ands	r3, r2
 800342a:	d001      	beq.n	8003430 <fillTheFirstHalfOfBuffer+0x224>
 800342c:	2228      	movs	r2, #40	; 0x28
 800342e:	e000      	b.n	8003432 <fillTheFirstHalfOfBuffer+0x226>
 8003430:	2213      	movs	r2, #19
 8003432:	4b42      	ldr	r3, [pc, #264]	; (800353c <fillTheFirstHalfOfBuffer+0x330>)
 8003434:	729a      	strb	r2, [r3, #10]
		mg_dma2PwmBitBuffer[11] = (pmg_LedFrame[mg_posInBufferToRead].Red & 0x10) ? c_PulseLogic1 : c_PulseLogic0;
 8003436:	4b42      	ldr	r3, [pc, #264]	; (8003540 <fillTheFirstHalfOfBuffer+0x334>)
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	4b3c      	ldr	r3, [pc, #240]	; (800352c <fillTheFirstHalfOfBuffer+0x320>)
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	b29b      	uxth	r3, r3
 8003440:	0019      	movs	r1, r3
 8003442:	000b      	movs	r3, r1
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	185b      	adds	r3, r3, r1
 8003448:	18d3      	adds	r3, r2, r3
 800344a:	785b      	ldrb	r3, [r3, #1]
 800344c:	b2db      	uxtb	r3, r3
 800344e:	001a      	movs	r2, r3
 8003450:	2310      	movs	r3, #16
 8003452:	4013      	ands	r3, r2
 8003454:	d001      	beq.n	800345a <fillTheFirstHalfOfBuffer+0x24e>
 8003456:	2228      	movs	r2, #40	; 0x28
 8003458:	e000      	b.n	800345c <fillTheFirstHalfOfBuffer+0x250>
 800345a:	2213      	movs	r2, #19
 800345c:	4b37      	ldr	r3, [pc, #220]	; (800353c <fillTheFirstHalfOfBuffer+0x330>)
 800345e:	72da      	strb	r2, [r3, #11]
		mg_dma2PwmBitBuffer[12] = (pmg_LedFrame[mg_posInBufferToRead].Red & 0x08) ? c_PulseLogic1 : c_PulseLogic0;
 8003460:	4b37      	ldr	r3, [pc, #220]	; (8003540 <fillTheFirstHalfOfBuffer+0x334>)
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	4b31      	ldr	r3, [pc, #196]	; (800352c <fillTheFirstHalfOfBuffer+0x320>)
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	b29b      	uxth	r3, r3
 800346a:	0019      	movs	r1, r3
 800346c:	000b      	movs	r3, r1
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	185b      	adds	r3, r3, r1
 8003472:	18d3      	adds	r3, r2, r3
 8003474:	785b      	ldrb	r3, [r3, #1]
 8003476:	b2db      	uxtb	r3, r3
 8003478:	001a      	movs	r2, r3
 800347a:	2308      	movs	r3, #8
 800347c:	4013      	ands	r3, r2
 800347e:	d001      	beq.n	8003484 <fillTheFirstHalfOfBuffer+0x278>
 8003480:	2228      	movs	r2, #40	; 0x28
 8003482:	e000      	b.n	8003486 <fillTheFirstHalfOfBuffer+0x27a>
 8003484:	2213      	movs	r2, #19
 8003486:	4b2d      	ldr	r3, [pc, #180]	; (800353c <fillTheFirstHalfOfBuffer+0x330>)
 8003488:	731a      	strb	r2, [r3, #12]
		mg_dma2PwmBitBuffer[13] = (pmg_LedFrame[mg_posInBufferToRead].Red & 0x04) ? c_PulseLogic1 : c_PulseLogic0;
 800348a:	4b2d      	ldr	r3, [pc, #180]	; (8003540 <fillTheFirstHalfOfBuffer+0x334>)
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	4b27      	ldr	r3, [pc, #156]	; (800352c <fillTheFirstHalfOfBuffer+0x320>)
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	b29b      	uxth	r3, r3
 8003494:	0019      	movs	r1, r3
 8003496:	000b      	movs	r3, r1
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	185b      	adds	r3, r3, r1
 800349c:	18d3      	adds	r3, r2, r3
 800349e:	785b      	ldrb	r3, [r3, #1]
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	001a      	movs	r2, r3
 80034a4:	2304      	movs	r3, #4
 80034a6:	4013      	ands	r3, r2
 80034a8:	d001      	beq.n	80034ae <fillTheFirstHalfOfBuffer+0x2a2>
 80034aa:	2228      	movs	r2, #40	; 0x28
 80034ac:	e000      	b.n	80034b0 <fillTheFirstHalfOfBuffer+0x2a4>
 80034ae:	2213      	movs	r2, #19
 80034b0:	4b22      	ldr	r3, [pc, #136]	; (800353c <fillTheFirstHalfOfBuffer+0x330>)
 80034b2:	735a      	strb	r2, [r3, #13]
		mg_dma2PwmBitBuffer[14] = (pmg_LedFrame[mg_posInBufferToRead].Red & 0x02) ? c_PulseLogic1 : c_PulseLogic0;
 80034b4:	4b22      	ldr	r3, [pc, #136]	; (8003540 <fillTheFirstHalfOfBuffer+0x334>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	4b1c      	ldr	r3, [pc, #112]	; (800352c <fillTheFirstHalfOfBuffer+0x320>)
 80034ba:	881b      	ldrh	r3, [r3, #0]
 80034bc:	b29b      	uxth	r3, r3
 80034be:	0019      	movs	r1, r3
 80034c0:	000b      	movs	r3, r1
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	185b      	adds	r3, r3, r1
 80034c6:	18d3      	adds	r3, r2, r3
 80034c8:	785b      	ldrb	r3, [r3, #1]
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	001a      	movs	r2, r3
 80034ce:	2302      	movs	r3, #2
 80034d0:	4013      	ands	r3, r2
 80034d2:	d001      	beq.n	80034d8 <fillTheFirstHalfOfBuffer+0x2cc>
 80034d4:	2228      	movs	r2, #40	; 0x28
 80034d6:	e000      	b.n	80034da <fillTheFirstHalfOfBuffer+0x2ce>
 80034d8:	2213      	movs	r2, #19
 80034da:	4b18      	ldr	r3, [pc, #96]	; (800353c <fillTheFirstHalfOfBuffer+0x330>)
 80034dc:	739a      	strb	r2, [r3, #14]
		mg_dma2PwmBitBuffer[15] = (pmg_LedFrame[mg_posInBufferToRead].Red & 0x01) ? c_PulseLogic1 : c_PulseLogic0;
 80034de:	4b18      	ldr	r3, [pc, #96]	; (8003540 <fillTheFirstHalfOfBuffer+0x334>)
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	4b12      	ldr	r3, [pc, #72]	; (800352c <fillTheFirstHalfOfBuffer+0x320>)
 80034e4:	881b      	ldrh	r3, [r3, #0]
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	0019      	movs	r1, r3
 80034ea:	000b      	movs	r3, r1
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	185b      	adds	r3, r3, r1
 80034f0:	18d3      	adds	r3, r2, r3
 80034f2:	785b      	ldrb	r3, [r3, #1]
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	001a      	movs	r2, r3
 80034f8:	2301      	movs	r3, #1
 80034fa:	4013      	ands	r3, r2
 80034fc:	d001      	beq.n	8003502 <fillTheFirstHalfOfBuffer+0x2f6>
 80034fe:	2228      	movs	r2, #40	; 0x28
 8003500:	e000      	b.n	8003504 <fillTheFirstHalfOfBuffer+0x2f8>
 8003502:	2213      	movs	r2, #19
 8003504:	4b0d      	ldr	r3, [pc, #52]	; (800353c <fillTheFirstHalfOfBuffer+0x330>)
 8003506:	73da      	strb	r2, [r3, #15]
		/* Blue */
		mg_dma2PwmBitBuffer[16] = (pmg_LedFrame[mg_posInBufferToRead].Blue & 0x80) ? c_PulseLogic1 : c_PulseLogic0;
 8003508:	4b0d      	ldr	r3, [pc, #52]	; (8003540 <fillTheFirstHalfOfBuffer+0x334>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	4b07      	ldr	r3, [pc, #28]	; (800352c <fillTheFirstHalfOfBuffer+0x320>)
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	b29b      	uxth	r3, r3
 8003512:	0019      	movs	r1, r3
 8003514:	000b      	movs	r3, r1
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	185b      	adds	r3, r3, r1
 800351a:	18d3      	adds	r3, r2, r3
 800351c:	789b      	ldrb	r3, [r3, #2]
 800351e:	b2db      	uxtb	r3, r3
 8003520:	b25b      	sxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	da0e      	bge.n	8003544 <fillTheFirstHalfOfBuffer+0x338>
 8003526:	2228      	movs	r2, #40	; 0x28
 8003528:	e00d      	b.n	8003546 <fillTheFirstHalfOfBuffer+0x33a>
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	20000076 	.word	0x20000076
 8003530:	20000074 	.word	0x20000074
 8003534:	20000078 	.word	0x20000078
 8003538:	2000001e 	.word	0x2000001e
 800353c:	20000040 	.word	0x20000040
 8003540:	20000070 	.word	0x20000070
 8003544:	2213      	movs	r2, #19
 8003546:	4b50      	ldr	r3, [pc, #320]	; (8003688 <fillTheFirstHalfOfBuffer+0x47c>)
 8003548:	741a      	strb	r2, [r3, #16]
		mg_dma2PwmBitBuffer[17] = (pmg_LedFrame[mg_posInBufferToRead].Blue & 0x40) ? c_PulseLogic1 : c_PulseLogic0;
 800354a:	4b50      	ldr	r3, [pc, #320]	; (800368c <fillTheFirstHalfOfBuffer+0x480>)
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	4b50      	ldr	r3, [pc, #320]	; (8003690 <fillTheFirstHalfOfBuffer+0x484>)
 8003550:	881b      	ldrh	r3, [r3, #0]
 8003552:	b29b      	uxth	r3, r3
 8003554:	0019      	movs	r1, r3
 8003556:	000b      	movs	r3, r1
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	185b      	adds	r3, r3, r1
 800355c:	18d3      	adds	r3, r2, r3
 800355e:	789b      	ldrb	r3, [r3, #2]
 8003560:	b2db      	uxtb	r3, r3
 8003562:	001a      	movs	r2, r3
 8003564:	2340      	movs	r3, #64	; 0x40
 8003566:	4013      	ands	r3, r2
 8003568:	d001      	beq.n	800356e <fillTheFirstHalfOfBuffer+0x362>
 800356a:	2228      	movs	r2, #40	; 0x28
 800356c:	e000      	b.n	8003570 <fillTheFirstHalfOfBuffer+0x364>
 800356e:	2213      	movs	r2, #19
 8003570:	4b45      	ldr	r3, [pc, #276]	; (8003688 <fillTheFirstHalfOfBuffer+0x47c>)
 8003572:	745a      	strb	r2, [r3, #17]
		mg_dma2PwmBitBuffer[18] = (pmg_LedFrame[mg_posInBufferToRead].Blue & 0x20) ? c_PulseLogic1 : c_PulseLogic0;
 8003574:	4b45      	ldr	r3, [pc, #276]	; (800368c <fillTheFirstHalfOfBuffer+0x480>)
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	4b45      	ldr	r3, [pc, #276]	; (8003690 <fillTheFirstHalfOfBuffer+0x484>)
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	b29b      	uxth	r3, r3
 800357e:	0019      	movs	r1, r3
 8003580:	000b      	movs	r3, r1
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	185b      	adds	r3, r3, r1
 8003586:	18d3      	adds	r3, r2, r3
 8003588:	789b      	ldrb	r3, [r3, #2]
 800358a:	b2db      	uxtb	r3, r3
 800358c:	001a      	movs	r2, r3
 800358e:	2320      	movs	r3, #32
 8003590:	4013      	ands	r3, r2
 8003592:	d001      	beq.n	8003598 <fillTheFirstHalfOfBuffer+0x38c>
 8003594:	2228      	movs	r2, #40	; 0x28
 8003596:	e000      	b.n	800359a <fillTheFirstHalfOfBuffer+0x38e>
 8003598:	2213      	movs	r2, #19
 800359a:	4b3b      	ldr	r3, [pc, #236]	; (8003688 <fillTheFirstHalfOfBuffer+0x47c>)
 800359c:	749a      	strb	r2, [r3, #18]
		mg_dma2PwmBitBuffer[19] = (pmg_LedFrame[mg_posInBufferToRead].Blue & 0x10) ? c_PulseLogic1 : c_PulseLogic0;
 800359e:	4b3b      	ldr	r3, [pc, #236]	; (800368c <fillTheFirstHalfOfBuffer+0x480>)
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	4b3b      	ldr	r3, [pc, #236]	; (8003690 <fillTheFirstHalfOfBuffer+0x484>)
 80035a4:	881b      	ldrh	r3, [r3, #0]
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	0019      	movs	r1, r3
 80035aa:	000b      	movs	r3, r1
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	185b      	adds	r3, r3, r1
 80035b0:	18d3      	adds	r3, r2, r3
 80035b2:	789b      	ldrb	r3, [r3, #2]
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	001a      	movs	r2, r3
 80035b8:	2310      	movs	r3, #16
 80035ba:	4013      	ands	r3, r2
 80035bc:	d001      	beq.n	80035c2 <fillTheFirstHalfOfBuffer+0x3b6>
 80035be:	2228      	movs	r2, #40	; 0x28
 80035c0:	e000      	b.n	80035c4 <fillTheFirstHalfOfBuffer+0x3b8>
 80035c2:	2213      	movs	r2, #19
 80035c4:	4b30      	ldr	r3, [pc, #192]	; (8003688 <fillTheFirstHalfOfBuffer+0x47c>)
 80035c6:	74da      	strb	r2, [r3, #19]
		mg_dma2PwmBitBuffer[20] = (pmg_LedFrame[mg_posInBufferToRead].Blue & 0x08) ? c_PulseLogic1 : c_PulseLogic0;
 80035c8:	4b30      	ldr	r3, [pc, #192]	; (800368c <fillTheFirstHalfOfBuffer+0x480>)
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	4b30      	ldr	r3, [pc, #192]	; (8003690 <fillTheFirstHalfOfBuffer+0x484>)
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	0019      	movs	r1, r3
 80035d4:	000b      	movs	r3, r1
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	185b      	adds	r3, r3, r1
 80035da:	18d3      	adds	r3, r2, r3
 80035dc:	789b      	ldrb	r3, [r3, #2]
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	001a      	movs	r2, r3
 80035e2:	2308      	movs	r3, #8
 80035e4:	4013      	ands	r3, r2
 80035e6:	d001      	beq.n	80035ec <fillTheFirstHalfOfBuffer+0x3e0>
 80035e8:	2228      	movs	r2, #40	; 0x28
 80035ea:	e000      	b.n	80035ee <fillTheFirstHalfOfBuffer+0x3e2>
 80035ec:	2213      	movs	r2, #19
 80035ee:	4b26      	ldr	r3, [pc, #152]	; (8003688 <fillTheFirstHalfOfBuffer+0x47c>)
 80035f0:	751a      	strb	r2, [r3, #20]
		mg_dma2PwmBitBuffer[21] = (pmg_LedFrame[mg_posInBufferToRead].Blue & 0x04) ? c_PulseLogic1 : c_PulseLogic0;
 80035f2:	4b26      	ldr	r3, [pc, #152]	; (800368c <fillTheFirstHalfOfBuffer+0x480>)
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	4b26      	ldr	r3, [pc, #152]	; (8003690 <fillTheFirstHalfOfBuffer+0x484>)
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	0019      	movs	r1, r3
 80035fe:	000b      	movs	r3, r1
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	185b      	adds	r3, r3, r1
 8003604:	18d3      	adds	r3, r2, r3
 8003606:	789b      	ldrb	r3, [r3, #2]
 8003608:	b2db      	uxtb	r3, r3
 800360a:	001a      	movs	r2, r3
 800360c:	2304      	movs	r3, #4
 800360e:	4013      	ands	r3, r2
 8003610:	d001      	beq.n	8003616 <fillTheFirstHalfOfBuffer+0x40a>
 8003612:	2228      	movs	r2, #40	; 0x28
 8003614:	e000      	b.n	8003618 <fillTheFirstHalfOfBuffer+0x40c>
 8003616:	2213      	movs	r2, #19
 8003618:	4b1b      	ldr	r3, [pc, #108]	; (8003688 <fillTheFirstHalfOfBuffer+0x47c>)
 800361a:	755a      	strb	r2, [r3, #21]
		mg_dma2PwmBitBuffer[22] = (pmg_LedFrame[mg_posInBufferToRead].Blue & 0x02) ? c_PulseLogic1 : c_PulseLogic0;
 800361c:	4b1b      	ldr	r3, [pc, #108]	; (800368c <fillTheFirstHalfOfBuffer+0x480>)
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	4b1b      	ldr	r3, [pc, #108]	; (8003690 <fillTheFirstHalfOfBuffer+0x484>)
 8003622:	881b      	ldrh	r3, [r3, #0]
 8003624:	b29b      	uxth	r3, r3
 8003626:	0019      	movs	r1, r3
 8003628:	000b      	movs	r3, r1
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	185b      	adds	r3, r3, r1
 800362e:	18d3      	adds	r3, r2, r3
 8003630:	789b      	ldrb	r3, [r3, #2]
 8003632:	b2db      	uxtb	r3, r3
 8003634:	001a      	movs	r2, r3
 8003636:	2302      	movs	r3, #2
 8003638:	4013      	ands	r3, r2
 800363a:	d001      	beq.n	8003640 <fillTheFirstHalfOfBuffer+0x434>
 800363c:	2228      	movs	r2, #40	; 0x28
 800363e:	e000      	b.n	8003642 <fillTheFirstHalfOfBuffer+0x436>
 8003640:	2213      	movs	r2, #19
 8003642:	4b11      	ldr	r3, [pc, #68]	; (8003688 <fillTheFirstHalfOfBuffer+0x47c>)
 8003644:	759a      	strb	r2, [r3, #22]
		mg_dma2PwmBitBuffer[23] = (pmg_LedFrame[mg_posInBufferToRead].Blue & 0x01) ? c_PulseLogic1 : c_PulseLogic0;
 8003646:	4b11      	ldr	r3, [pc, #68]	; (800368c <fillTheFirstHalfOfBuffer+0x480>)
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	4b11      	ldr	r3, [pc, #68]	; (8003690 <fillTheFirstHalfOfBuffer+0x484>)
 800364c:	881b      	ldrh	r3, [r3, #0]
 800364e:	b29b      	uxth	r3, r3
 8003650:	0019      	movs	r1, r3
 8003652:	000b      	movs	r3, r1
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	185b      	adds	r3, r3, r1
 8003658:	18d3      	adds	r3, r2, r3
 800365a:	789b      	ldrb	r3, [r3, #2]
 800365c:	b2db      	uxtb	r3, r3
 800365e:	001a      	movs	r2, r3
 8003660:	2301      	movs	r3, #1
 8003662:	4013      	ands	r3, r2
 8003664:	d001      	beq.n	800366a <fillTheFirstHalfOfBuffer+0x45e>
 8003666:	2228      	movs	r2, #40	; 0x28
 8003668:	e000      	b.n	800366c <fillTheFirstHalfOfBuffer+0x460>
 800366a:	2213      	movs	r2, #19
 800366c:	4b06      	ldr	r3, [pc, #24]	; (8003688 <fillTheFirstHalfOfBuffer+0x47c>)
 800366e:	75da      	strb	r2, [r3, #23]

	}

	mg_posInBufferToRead++;
 8003670:	4b07      	ldr	r3, [pc, #28]	; (8003690 <fillTheFirstHalfOfBuffer+0x484>)
 8003672:	881b      	ldrh	r3, [r3, #0]
 8003674:	b29b      	uxth	r3, r3
 8003676:	3301      	adds	r3, #1
 8003678:	b29a      	uxth	r2, r3
 800367a:	4b05      	ldr	r3, [pc, #20]	; (8003690 <fillTheFirstHalfOfBuffer+0x484>)
 800367c:	801a      	strh	r2, [r3, #0]



}
 800367e:	46c0      	nop			; (mov r8, r8)
 8003680:	46bd      	mov	sp, r7
 8003682:	b002      	add	sp, #8
 8003684:	bd80      	pop	{r7, pc}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	20000040 	.word	0x20000040
 800368c:	20000070 	.word	0x20000070
 8003690:	20000076 	.word	0x20000076

08003694 <fillTheSecondHalfOfBuffer>:

// wenn komplet übertragen wurde
void fillTheSecondHalfOfBuffer(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0



	if (mg_posInBufferToRead >= mg_LedFrameNumOfLed)
 800369a:	4bcb      	ldr	r3, [pc, #812]	; (80039c8 <fillTheSecondHalfOfBuffer+0x334>)
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	b29a      	uxth	r2, r3
 80036a0:	4bca      	ldr	r3, [pc, #808]	; (80039cc <fillTheSecondHalfOfBuffer+0x338>)
 80036a2:	881b      	ldrh	r3, [r3, #0]
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d309      	bcc.n	80036be <fillTheSecondHalfOfBuffer+0x2a>
	{
		mg_posInBufferToRead = 0;
 80036aa:	4bc7      	ldr	r3, [pc, #796]	; (80039c8 <fillTheSecondHalfOfBuffer+0x334>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	801a      	strh	r2, [r3, #0]
		mg_numOfRepeatsCnt++;
 80036b0:	4bc7      	ldr	r3, [pc, #796]	; (80039d0 <fillTheSecondHalfOfBuffer+0x33c>)
 80036b2:	881b      	ldrh	r3, [r3, #0]
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	3301      	adds	r3, #1
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	4bc5      	ldr	r3, [pc, #788]	; (80039d0 <fillTheSecondHalfOfBuffer+0x33c>)
 80036bc:	801a      	strh	r2, [r3, #0]
	}

	if (mg_flagSequenzEnd)
 80036be:	4bc5      	ldr	r3, [pc, #788]	; (80039d4 <fillTheSecondHalfOfBuffer+0x340>)
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00e      	beq.n	80036e6 <fillTheSecondHalfOfBuffer+0x52>
	{
		HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_4);
 80036c8:	4bc3      	ldr	r3, [pc, #780]	; (80039d8 <fillTheSecondHalfOfBuffer+0x344>)
 80036ca:	210c      	movs	r1, #12
 80036cc:	0018      	movs	r0, r3
 80036ce:	f7fe fbe3 	bl	8001e98 <HAL_TIM_PWM_Stop_DMA>
		mg_flagSequenzEnd = false;
 80036d2:	4bc0      	ldr	r3, [pc, #768]	; (80039d4 <fillTheSecondHalfOfBuffer+0x340>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	701a      	strb	r2, [r3, #0]
		mg_numOfRepeatsCnt = 0;
 80036d8:	4bbd      	ldr	r3, [pc, #756]	; (80039d0 <fillTheSecondHalfOfBuffer+0x33c>)
 80036da:	2200      	movs	r2, #0
 80036dc:	801a      	strh	r2, [r3, #0]
		mg_posInBufferToRead = 0;
 80036de:	4bba      	ldr	r3, [pc, #744]	; (80039c8 <fillTheSecondHalfOfBuffer+0x334>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	801a      	strh	r2, [r3, #0]
 80036e4:	e233      	b.n	8003b4e <fillTheSecondHalfOfBuffer+0x4ba>
	}
	else if (mg_numOfRepeatsCnt >= mg_numOfRepeats)
 80036e6:	4bba      	ldr	r3, [pc, #744]	; (80039d0 <fillTheSecondHalfOfBuffer+0x33c>)
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	4bbb      	ldr	r3, [pc, #748]	; (80039dc <fillTheSecondHalfOfBuffer+0x348>)
 80036ee:	881b      	ldrh	r3, [r3, #0]
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d315      	bcc.n	8003722 <fillTheSecondHalfOfBuffer+0x8e>
	{
		for (uint8_t i = 0; i < 23; ++i)
 80036f6:	1dfb      	adds	r3, r7, #7
 80036f8:	2200      	movs	r2, #0
 80036fa:	701a      	strb	r2, [r3, #0]
 80036fc:	e009      	b.n	8003712 <fillTheSecondHalfOfBuffer+0x7e>
		{
			mg_dma2PwmBitBuffer[i] = 0;
 80036fe:	1dfb      	adds	r3, r7, #7
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	4ab7      	ldr	r2, [pc, #732]	; (80039e0 <fillTheSecondHalfOfBuffer+0x34c>)
 8003704:	2100      	movs	r1, #0
 8003706:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 23; ++i)
 8003708:	1dfb      	adds	r3, r7, #7
 800370a:	1dfa      	adds	r2, r7, #7
 800370c:	7812      	ldrb	r2, [r2, #0]
 800370e:	3201      	adds	r2, #1
 8003710:	701a      	strb	r2, [r3, #0]
 8003712:	1dfb      	adds	r3, r7, #7
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b16      	cmp	r3, #22
 8003718:	d9f1      	bls.n	80036fe <fillTheSecondHalfOfBuffer+0x6a>
		}
		mg_flagSequenzEnd = true;
 800371a:	4bae      	ldr	r3, [pc, #696]	; (80039d4 <fillTheSecondHalfOfBuffer+0x340>)
 800371c:	2201      	movs	r2, #1
 800371e:	701a      	strb	r2, [r3, #0]
 8003720:	e215      	b.n	8003b4e <fillTheSecondHalfOfBuffer+0x4ba>

	}
	else
	{
		/* Green */
		mg_dma2PwmBitBuffer[24] = (pmg_LedFrame[mg_posInBufferToRead].Green & 0x80) ? c_PulseLogic1 : c_PulseLogic0;
 8003722:	4bb0      	ldr	r3, [pc, #704]	; (80039e4 <fillTheSecondHalfOfBuffer+0x350>)
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	4ba8      	ldr	r3, [pc, #672]	; (80039c8 <fillTheSecondHalfOfBuffer+0x334>)
 8003728:	881b      	ldrh	r3, [r3, #0]
 800372a:	b29b      	uxth	r3, r3
 800372c:	0019      	movs	r1, r3
 800372e:	000b      	movs	r3, r1
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	185b      	adds	r3, r3, r1
 8003734:	18d3      	adds	r3, r2, r3
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	b2db      	uxtb	r3, r3
 800373a:	b25b      	sxtb	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	da01      	bge.n	8003744 <fillTheSecondHalfOfBuffer+0xb0>
 8003740:	2228      	movs	r2, #40	; 0x28
 8003742:	e000      	b.n	8003746 <fillTheSecondHalfOfBuffer+0xb2>
 8003744:	2213      	movs	r2, #19
 8003746:	4ba6      	ldr	r3, [pc, #664]	; (80039e0 <fillTheSecondHalfOfBuffer+0x34c>)
 8003748:	761a      	strb	r2, [r3, #24]
		mg_dma2PwmBitBuffer[25] = (pmg_LedFrame[mg_posInBufferToRead].Green & 0x40) ? c_PulseLogic1 : c_PulseLogic0;
 800374a:	4ba6      	ldr	r3, [pc, #664]	; (80039e4 <fillTheSecondHalfOfBuffer+0x350>)
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	4b9e      	ldr	r3, [pc, #632]	; (80039c8 <fillTheSecondHalfOfBuffer+0x334>)
 8003750:	881b      	ldrh	r3, [r3, #0]
 8003752:	b29b      	uxth	r3, r3
 8003754:	0019      	movs	r1, r3
 8003756:	000b      	movs	r3, r1
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	185b      	adds	r3, r3, r1
 800375c:	18d3      	adds	r3, r2, r3
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	b2db      	uxtb	r3, r3
 8003762:	001a      	movs	r2, r3
 8003764:	2340      	movs	r3, #64	; 0x40
 8003766:	4013      	ands	r3, r2
 8003768:	d001      	beq.n	800376e <fillTheSecondHalfOfBuffer+0xda>
 800376a:	2228      	movs	r2, #40	; 0x28
 800376c:	e000      	b.n	8003770 <fillTheSecondHalfOfBuffer+0xdc>
 800376e:	2213      	movs	r2, #19
 8003770:	4b9b      	ldr	r3, [pc, #620]	; (80039e0 <fillTheSecondHalfOfBuffer+0x34c>)
 8003772:	765a      	strb	r2, [r3, #25]
		mg_dma2PwmBitBuffer[26] = (pmg_LedFrame[mg_posInBufferToRead].Green & 0x20) ? c_PulseLogic1 : c_PulseLogic0;
 8003774:	4b9b      	ldr	r3, [pc, #620]	; (80039e4 <fillTheSecondHalfOfBuffer+0x350>)
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	4b93      	ldr	r3, [pc, #588]	; (80039c8 <fillTheSecondHalfOfBuffer+0x334>)
 800377a:	881b      	ldrh	r3, [r3, #0]
 800377c:	b29b      	uxth	r3, r3
 800377e:	0019      	movs	r1, r3
 8003780:	000b      	movs	r3, r1
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	185b      	adds	r3, r3, r1
 8003786:	18d3      	adds	r3, r2, r3
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	b2db      	uxtb	r3, r3
 800378c:	001a      	movs	r2, r3
 800378e:	2320      	movs	r3, #32
 8003790:	4013      	ands	r3, r2
 8003792:	d001      	beq.n	8003798 <fillTheSecondHalfOfBuffer+0x104>
 8003794:	2228      	movs	r2, #40	; 0x28
 8003796:	e000      	b.n	800379a <fillTheSecondHalfOfBuffer+0x106>
 8003798:	2213      	movs	r2, #19
 800379a:	4b91      	ldr	r3, [pc, #580]	; (80039e0 <fillTheSecondHalfOfBuffer+0x34c>)
 800379c:	769a      	strb	r2, [r3, #26]
		mg_dma2PwmBitBuffer[27] = (pmg_LedFrame[mg_posInBufferToRead].Green & 0x10) ? c_PulseLogic1 : c_PulseLogic0;
 800379e:	4b91      	ldr	r3, [pc, #580]	; (80039e4 <fillTheSecondHalfOfBuffer+0x350>)
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	4b89      	ldr	r3, [pc, #548]	; (80039c8 <fillTheSecondHalfOfBuffer+0x334>)
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	0019      	movs	r1, r3
 80037aa:	000b      	movs	r3, r1
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	185b      	adds	r3, r3, r1
 80037b0:	18d3      	adds	r3, r2, r3
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	001a      	movs	r2, r3
 80037b8:	2310      	movs	r3, #16
 80037ba:	4013      	ands	r3, r2
 80037bc:	d001      	beq.n	80037c2 <fillTheSecondHalfOfBuffer+0x12e>
 80037be:	2228      	movs	r2, #40	; 0x28
 80037c0:	e000      	b.n	80037c4 <fillTheSecondHalfOfBuffer+0x130>
 80037c2:	2213      	movs	r2, #19
 80037c4:	4b86      	ldr	r3, [pc, #536]	; (80039e0 <fillTheSecondHalfOfBuffer+0x34c>)
 80037c6:	76da      	strb	r2, [r3, #27]
		mg_dma2PwmBitBuffer[28] = (pmg_LedFrame[mg_posInBufferToRead].Green & 0x08) ? c_PulseLogic1 : c_PulseLogic0;
 80037c8:	4b86      	ldr	r3, [pc, #536]	; (80039e4 <fillTheSecondHalfOfBuffer+0x350>)
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	4b7e      	ldr	r3, [pc, #504]	; (80039c8 <fillTheSecondHalfOfBuffer+0x334>)
 80037ce:	881b      	ldrh	r3, [r3, #0]
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	0019      	movs	r1, r3
 80037d4:	000b      	movs	r3, r1
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	185b      	adds	r3, r3, r1
 80037da:	18d3      	adds	r3, r2, r3
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	001a      	movs	r2, r3
 80037e2:	2308      	movs	r3, #8
 80037e4:	4013      	ands	r3, r2
 80037e6:	d001      	beq.n	80037ec <fillTheSecondHalfOfBuffer+0x158>
 80037e8:	2228      	movs	r2, #40	; 0x28
 80037ea:	e000      	b.n	80037ee <fillTheSecondHalfOfBuffer+0x15a>
 80037ec:	2213      	movs	r2, #19
 80037ee:	4b7c      	ldr	r3, [pc, #496]	; (80039e0 <fillTheSecondHalfOfBuffer+0x34c>)
 80037f0:	771a      	strb	r2, [r3, #28]
		mg_dma2PwmBitBuffer[29] = (pmg_LedFrame[mg_posInBufferToRead].Green & 0x04) ? c_PulseLogic1 : c_PulseLogic0;
 80037f2:	4b7c      	ldr	r3, [pc, #496]	; (80039e4 <fillTheSecondHalfOfBuffer+0x350>)
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	4b74      	ldr	r3, [pc, #464]	; (80039c8 <fillTheSecondHalfOfBuffer+0x334>)
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	0019      	movs	r1, r3
 80037fe:	000b      	movs	r3, r1
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	185b      	adds	r3, r3, r1
 8003804:	18d3      	adds	r3, r2, r3
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	001a      	movs	r2, r3
 800380c:	2304      	movs	r3, #4
 800380e:	4013      	ands	r3, r2
 8003810:	d001      	beq.n	8003816 <fillTheSecondHalfOfBuffer+0x182>
 8003812:	2228      	movs	r2, #40	; 0x28
 8003814:	e000      	b.n	8003818 <fillTheSecondHalfOfBuffer+0x184>
 8003816:	2213      	movs	r2, #19
 8003818:	4b71      	ldr	r3, [pc, #452]	; (80039e0 <fillTheSecondHalfOfBuffer+0x34c>)
 800381a:	775a      	strb	r2, [r3, #29]
		mg_dma2PwmBitBuffer[30] = (pmg_LedFrame[mg_posInBufferToRead].Green & 0x02) ? c_PulseLogic1 : c_PulseLogic0;
 800381c:	4b71      	ldr	r3, [pc, #452]	; (80039e4 <fillTheSecondHalfOfBuffer+0x350>)
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	4b69      	ldr	r3, [pc, #420]	; (80039c8 <fillTheSecondHalfOfBuffer+0x334>)
 8003822:	881b      	ldrh	r3, [r3, #0]
 8003824:	b29b      	uxth	r3, r3
 8003826:	0019      	movs	r1, r3
 8003828:	000b      	movs	r3, r1
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	185b      	adds	r3, r3, r1
 800382e:	18d3      	adds	r3, r2, r3
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	b2db      	uxtb	r3, r3
 8003834:	001a      	movs	r2, r3
 8003836:	2302      	movs	r3, #2
 8003838:	4013      	ands	r3, r2
 800383a:	d001      	beq.n	8003840 <fillTheSecondHalfOfBuffer+0x1ac>
 800383c:	2228      	movs	r2, #40	; 0x28
 800383e:	e000      	b.n	8003842 <fillTheSecondHalfOfBuffer+0x1ae>
 8003840:	2213      	movs	r2, #19
 8003842:	4b67      	ldr	r3, [pc, #412]	; (80039e0 <fillTheSecondHalfOfBuffer+0x34c>)
 8003844:	779a      	strb	r2, [r3, #30]
		mg_dma2PwmBitBuffer[31] = (pmg_LedFrame[mg_posInBufferToRead].Green & 0x01) ? c_PulseLogic1 : c_PulseLogic0;
 8003846:	4b67      	ldr	r3, [pc, #412]	; (80039e4 <fillTheSecondHalfOfBuffer+0x350>)
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	4b5f      	ldr	r3, [pc, #380]	; (80039c8 <fillTheSecondHalfOfBuffer+0x334>)
 800384c:	881b      	ldrh	r3, [r3, #0]
 800384e:	b29b      	uxth	r3, r3
 8003850:	0019      	movs	r1, r3
 8003852:	000b      	movs	r3, r1
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	185b      	adds	r3, r3, r1
 8003858:	18d3      	adds	r3, r2, r3
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	b2db      	uxtb	r3, r3
 800385e:	001a      	movs	r2, r3
 8003860:	2301      	movs	r3, #1
 8003862:	4013      	ands	r3, r2
 8003864:	d001      	beq.n	800386a <fillTheSecondHalfOfBuffer+0x1d6>
 8003866:	2228      	movs	r2, #40	; 0x28
 8003868:	e000      	b.n	800386c <fillTheSecondHalfOfBuffer+0x1d8>
 800386a:	2213      	movs	r2, #19
 800386c:	4b5c      	ldr	r3, [pc, #368]	; (80039e0 <fillTheSecondHalfOfBuffer+0x34c>)
 800386e:	77da      	strb	r2, [r3, #31]
		/* Red */
		mg_dma2PwmBitBuffer[32] = (pmg_LedFrame[mg_posInBufferToRead].Red & 0x80) ? c_PulseLogic1 : c_PulseLogic0;
 8003870:	4b5c      	ldr	r3, [pc, #368]	; (80039e4 <fillTheSecondHalfOfBuffer+0x350>)
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	4b54      	ldr	r3, [pc, #336]	; (80039c8 <fillTheSecondHalfOfBuffer+0x334>)
 8003876:	881b      	ldrh	r3, [r3, #0]
 8003878:	b29b      	uxth	r3, r3
 800387a:	0019      	movs	r1, r3
 800387c:	000b      	movs	r3, r1
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	185b      	adds	r3, r3, r1
 8003882:	18d3      	adds	r3, r2, r3
 8003884:	785b      	ldrb	r3, [r3, #1]
 8003886:	b2db      	uxtb	r3, r3
 8003888:	b25b      	sxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	da01      	bge.n	8003892 <fillTheSecondHalfOfBuffer+0x1fe>
 800388e:	2128      	movs	r1, #40	; 0x28
 8003890:	e000      	b.n	8003894 <fillTheSecondHalfOfBuffer+0x200>
 8003892:	2113      	movs	r1, #19
 8003894:	4b52      	ldr	r3, [pc, #328]	; (80039e0 <fillTheSecondHalfOfBuffer+0x34c>)
 8003896:	2220      	movs	r2, #32
 8003898:	5499      	strb	r1, [r3, r2]
		mg_dma2PwmBitBuffer[33] = (pmg_LedFrame[mg_posInBufferToRead].Red & 0x40) ? c_PulseLogic1 : c_PulseLogic0;
 800389a:	4b52      	ldr	r3, [pc, #328]	; (80039e4 <fillTheSecondHalfOfBuffer+0x350>)
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	4b4a      	ldr	r3, [pc, #296]	; (80039c8 <fillTheSecondHalfOfBuffer+0x334>)
 80038a0:	881b      	ldrh	r3, [r3, #0]
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	0019      	movs	r1, r3
 80038a6:	000b      	movs	r3, r1
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	185b      	adds	r3, r3, r1
 80038ac:	18d3      	adds	r3, r2, r3
 80038ae:	785b      	ldrb	r3, [r3, #1]
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	001a      	movs	r2, r3
 80038b4:	2340      	movs	r3, #64	; 0x40
 80038b6:	4013      	ands	r3, r2
 80038b8:	d001      	beq.n	80038be <fillTheSecondHalfOfBuffer+0x22a>
 80038ba:	2128      	movs	r1, #40	; 0x28
 80038bc:	e000      	b.n	80038c0 <fillTheSecondHalfOfBuffer+0x22c>
 80038be:	2113      	movs	r1, #19
 80038c0:	4b47      	ldr	r3, [pc, #284]	; (80039e0 <fillTheSecondHalfOfBuffer+0x34c>)
 80038c2:	2221      	movs	r2, #33	; 0x21
 80038c4:	5499      	strb	r1, [r3, r2]
		mg_dma2PwmBitBuffer[34] = (pmg_LedFrame[mg_posInBufferToRead].Red & 0x20) ? c_PulseLogic1 : c_PulseLogic0;
 80038c6:	4b47      	ldr	r3, [pc, #284]	; (80039e4 <fillTheSecondHalfOfBuffer+0x350>)
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	4b3f      	ldr	r3, [pc, #252]	; (80039c8 <fillTheSecondHalfOfBuffer+0x334>)
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	0019      	movs	r1, r3
 80038d2:	000b      	movs	r3, r1
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	185b      	adds	r3, r3, r1
 80038d8:	18d3      	adds	r3, r2, r3
 80038da:	785b      	ldrb	r3, [r3, #1]
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	001a      	movs	r2, r3
 80038e0:	2320      	movs	r3, #32
 80038e2:	4013      	ands	r3, r2
 80038e4:	d001      	beq.n	80038ea <fillTheSecondHalfOfBuffer+0x256>
 80038e6:	2128      	movs	r1, #40	; 0x28
 80038e8:	e000      	b.n	80038ec <fillTheSecondHalfOfBuffer+0x258>
 80038ea:	2113      	movs	r1, #19
 80038ec:	4b3c      	ldr	r3, [pc, #240]	; (80039e0 <fillTheSecondHalfOfBuffer+0x34c>)
 80038ee:	2222      	movs	r2, #34	; 0x22
 80038f0:	5499      	strb	r1, [r3, r2]
		mg_dma2PwmBitBuffer[35] = (pmg_LedFrame[mg_posInBufferToRead].Red & 0x10) ? c_PulseLogic1 : c_PulseLogic0;
 80038f2:	4b3c      	ldr	r3, [pc, #240]	; (80039e4 <fillTheSecondHalfOfBuffer+0x350>)
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	4b34      	ldr	r3, [pc, #208]	; (80039c8 <fillTheSecondHalfOfBuffer+0x334>)
 80038f8:	881b      	ldrh	r3, [r3, #0]
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	0019      	movs	r1, r3
 80038fe:	000b      	movs	r3, r1
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	185b      	adds	r3, r3, r1
 8003904:	18d3      	adds	r3, r2, r3
 8003906:	785b      	ldrb	r3, [r3, #1]
 8003908:	b2db      	uxtb	r3, r3
 800390a:	001a      	movs	r2, r3
 800390c:	2310      	movs	r3, #16
 800390e:	4013      	ands	r3, r2
 8003910:	d001      	beq.n	8003916 <fillTheSecondHalfOfBuffer+0x282>
 8003912:	2128      	movs	r1, #40	; 0x28
 8003914:	e000      	b.n	8003918 <fillTheSecondHalfOfBuffer+0x284>
 8003916:	2113      	movs	r1, #19
 8003918:	4b31      	ldr	r3, [pc, #196]	; (80039e0 <fillTheSecondHalfOfBuffer+0x34c>)
 800391a:	2223      	movs	r2, #35	; 0x23
 800391c:	5499      	strb	r1, [r3, r2]
		mg_dma2PwmBitBuffer[36] = (pmg_LedFrame[mg_posInBufferToRead].Red & 0x08) ? c_PulseLogic1 : c_PulseLogic0;
 800391e:	4b31      	ldr	r3, [pc, #196]	; (80039e4 <fillTheSecondHalfOfBuffer+0x350>)
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	4b29      	ldr	r3, [pc, #164]	; (80039c8 <fillTheSecondHalfOfBuffer+0x334>)
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	b29b      	uxth	r3, r3
 8003928:	0019      	movs	r1, r3
 800392a:	000b      	movs	r3, r1
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	185b      	adds	r3, r3, r1
 8003930:	18d3      	adds	r3, r2, r3
 8003932:	785b      	ldrb	r3, [r3, #1]
 8003934:	b2db      	uxtb	r3, r3
 8003936:	001a      	movs	r2, r3
 8003938:	2308      	movs	r3, #8
 800393a:	4013      	ands	r3, r2
 800393c:	d001      	beq.n	8003942 <fillTheSecondHalfOfBuffer+0x2ae>
 800393e:	2128      	movs	r1, #40	; 0x28
 8003940:	e000      	b.n	8003944 <fillTheSecondHalfOfBuffer+0x2b0>
 8003942:	2113      	movs	r1, #19
 8003944:	4b26      	ldr	r3, [pc, #152]	; (80039e0 <fillTheSecondHalfOfBuffer+0x34c>)
 8003946:	2224      	movs	r2, #36	; 0x24
 8003948:	5499      	strb	r1, [r3, r2]
		mg_dma2PwmBitBuffer[37] = (pmg_LedFrame[mg_posInBufferToRead].Red & 0x04) ? c_PulseLogic1 : c_PulseLogic0;
 800394a:	4b26      	ldr	r3, [pc, #152]	; (80039e4 <fillTheSecondHalfOfBuffer+0x350>)
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	4b1e      	ldr	r3, [pc, #120]	; (80039c8 <fillTheSecondHalfOfBuffer+0x334>)
 8003950:	881b      	ldrh	r3, [r3, #0]
 8003952:	b29b      	uxth	r3, r3
 8003954:	0019      	movs	r1, r3
 8003956:	000b      	movs	r3, r1
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	185b      	adds	r3, r3, r1
 800395c:	18d3      	adds	r3, r2, r3
 800395e:	785b      	ldrb	r3, [r3, #1]
 8003960:	b2db      	uxtb	r3, r3
 8003962:	001a      	movs	r2, r3
 8003964:	2304      	movs	r3, #4
 8003966:	4013      	ands	r3, r2
 8003968:	d001      	beq.n	800396e <fillTheSecondHalfOfBuffer+0x2da>
 800396a:	2128      	movs	r1, #40	; 0x28
 800396c:	e000      	b.n	8003970 <fillTheSecondHalfOfBuffer+0x2dc>
 800396e:	2113      	movs	r1, #19
 8003970:	4b1b      	ldr	r3, [pc, #108]	; (80039e0 <fillTheSecondHalfOfBuffer+0x34c>)
 8003972:	2225      	movs	r2, #37	; 0x25
 8003974:	5499      	strb	r1, [r3, r2]
		mg_dma2PwmBitBuffer[38] = (pmg_LedFrame[mg_posInBufferToRead].Red & 0x02) ? c_PulseLogic1 : c_PulseLogic0;
 8003976:	4b1b      	ldr	r3, [pc, #108]	; (80039e4 <fillTheSecondHalfOfBuffer+0x350>)
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	4b13      	ldr	r3, [pc, #76]	; (80039c8 <fillTheSecondHalfOfBuffer+0x334>)
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	b29b      	uxth	r3, r3
 8003980:	0019      	movs	r1, r3
 8003982:	000b      	movs	r3, r1
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	185b      	adds	r3, r3, r1
 8003988:	18d3      	adds	r3, r2, r3
 800398a:	785b      	ldrb	r3, [r3, #1]
 800398c:	b2db      	uxtb	r3, r3
 800398e:	001a      	movs	r2, r3
 8003990:	2302      	movs	r3, #2
 8003992:	4013      	ands	r3, r2
 8003994:	d001      	beq.n	800399a <fillTheSecondHalfOfBuffer+0x306>
 8003996:	2128      	movs	r1, #40	; 0x28
 8003998:	e000      	b.n	800399c <fillTheSecondHalfOfBuffer+0x308>
 800399a:	2113      	movs	r1, #19
 800399c:	4b10      	ldr	r3, [pc, #64]	; (80039e0 <fillTheSecondHalfOfBuffer+0x34c>)
 800399e:	2226      	movs	r2, #38	; 0x26
 80039a0:	5499      	strb	r1, [r3, r2]
		mg_dma2PwmBitBuffer[39] = (pmg_LedFrame[mg_posInBufferToRead].Red & 0x01) ? c_PulseLogic1 : c_PulseLogic0;
 80039a2:	4b10      	ldr	r3, [pc, #64]	; (80039e4 <fillTheSecondHalfOfBuffer+0x350>)
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	4b08      	ldr	r3, [pc, #32]	; (80039c8 <fillTheSecondHalfOfBuffer+0x334>)
 80039a8:	881b      	ldrh	r3, [r3, #0]
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	0019      	movs	r1, r3
 80039ae:	000b      	movs	r3, r1
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	185b      	adds	r3, r3, r1
 80039b4:	18d3      	adds	r3, r2, r3
 80039b6:	785b      	ldrb	r3, [r3, #1]
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	001a      	movs	r2, r3
 80039bc:	2301      	movs	r3, #1
 80039be:	4013      	ands	r3, r2
 80039c0:	d012      	beq.n	80039e8 <fillTheSecondHalfOfBuffer+0x354>
 80039c2:	2128      	movs	r1, #40	; 0x28
 80039c4:	e011      	b.n	80039ea <fillTheSecondHalfOfBuffer+0x356>
 80039c6:	46c0      	nop			; (mov r8, r8)
 80039c8:	20000076 	.word	0x20000076
 80039cc:	20000074 	.word	0x20000074
 80039d0:	20000078 	.word	0x20000078
 80039d4:	2000007a 	.word	0x2000007a
 80039d8:	2000007c 	.word	0x2000007c
 80039dc:	2000001e 	.word	0x2000001e
 80039e0:	20000040 	.word	0x20000040
 80039e4:	20000070 	.word	0x20000070
 80039e8:	2113      	movs	r1, #19
 80039ea:	4b5e      	ldr	r3, [pc, #376]	; (8003b64 <fillTheSecondHalfOfBuffer+0x4d0>)
 80039ec:	2227      	movs	r2, #39	; 0x27
 80039ee:	5499      	strb	r1, [r3, r2]
		/* Blue */
		mg_dma2PwmBitBuffer[40] = (pmg_LedFrame[mg_posInBufferToRead].Blue & 0x80) ? c_PulseLogic1 : c_PulseLogic0;
 80039f0:	4b5d      	ldr	r3, [pc, #372]	; (8003b68 <fillTheSecondHalfOfBuffer+0x4d4>)
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	4b5d      	ldr	r3, [pc, #372]	; (8003b6c <fillTheSecondHalfOfBuffer+0x4d8>)
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	0019      	movs	r1, r3
 80039fc:	000b      	movs	r3, r1
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	185b      	adds	r3, r3, r1
 8003a02:	18d3      	adds	r3, r2, r3
 8003a04:	789b      	ldrb	r3, [r3, #2]
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	b25b      	sxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	da01      	bge.n	8003a12 <fillTheSecondHalfOfBuffer+0x37e>
 8003a0e:	2128      	movs	r1, #40	; 0x28
 8003a10:	e000      	b.n	8003a14 <fillTheSecondHalfOfBuffer+0x380>
 8003a12:	2113      	movs	r1, #19
 8003a14:	4b53      	ldr	r3, [pc, #332]	; (8003b64 <fillTheSecondHalfOfBuffer+0x4d0>)
 8003a16:	2228      	movs	r2, #40	; 0x28
 8003a18:	5499      	strb	r1, [r3, r2]
		mg_dma2PwmBitBuffer[41] = (pmg_LedFrame[mg_posInBufferToRead].Blue & 0x40) ? c_PulseLogic1 : c_PulseLogic0;
 8003a1a:	4b53      	ldr	r3, [pc, #332]	; (8003b68 <fillTheSecondHalfOfBuffer+0x4d4>)
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	4b53      	ldr	r3, [pc, #332]	; (8003b6c <fillTheSecondHalfOfBuffer+0x4d8>)
 8003a20:	881b      	ldrh	r3, [r3, #0]
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	0019      	movs	r1, r3
 8003a26:	000b      	movs	r3, r1
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	185b      	adds	r3, r3, r1
 8003a2c:	18d3      	adds	r3, r2, r3
 8003a2e:	789b      	ldrb	r3, [r3, #2]
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	001a      	movs	r2, r3
 8003a34:	2340      	movs	r3, #64	; 0x40
 8003a36:	4013      	ands	r3, r2
 8003a38:	d001      	beq.n	8003a3e <fillTheSecondHalfOfBuffer+0x3aa>
 8003a3a:	2128      	movs	r1, #40	; 0x28
 8003a3c:	e000      	b.n	8003a40 <fillTheSecondHalfOfBuffer+0x3ac>
 8003a3e:	2113      	movs	r1, #19
 8003a40:	4b48      	ldr	r3, [pc, #288]	; (8003b64 <fillTheSecondHalfOfBuffer+0x4d0>)
 8003a42:	2229      	movs	r2, #41	; 0x29
 8003a44:	5499      	strb	r1, [r3, r2]
		mg_dma2PwmBitBuffer[42] = (pmg_LedFrame[mg_posInBufferToRead].Blue & 0x20) ? c_PulseLogic1 : c_PulseLogic0;
 8003a46:	4b48      	ldr	r3, [pc, #288]	; (8003b68 <fillTheSecondHalfOfBuffer+0x4d4>)
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	4b48      	ldr	r3, [pc, #288]	; (8003b6c <fillTheSecondHalfOfBuffer+0x4d8>)
 8003a4c:	881b      	ldrh	r3, [r3, #0]
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	0019      	movs	r1, r3
 8003a52:	000b      	movs	r3, r1
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	185b      	adds	r3, r3, r1
 8003a58:	18d3      	adds	r3, r2, r3
 8003a5a:	789b      	ldrb	r3, [r3, #2]
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	001a      	movs	r2, r3
 8003a60:	2320      	movs	r3, #32
 8003a62:	4013      	ands	r3, r2
 8003a64:	d001      	beq.n	8003a6a <fillTheSecondHalfOfBuffer+0x3d6>
 8003a66:	2128      	movs	r1, #40	; 0x28
 8003a68:	e000      	b.n	8003a6c <fillTheSecondHalfOfBuffer+0x3d8>
 8003a6a:	2113      	movs	r1, #19
 8003a6c:	4b3d      	ldr	r3, [pc, #244]	; (8003b64 <fillTheSecondHalfOfBuffer+0x4d0>)
 8003a6e:	222a      	movs	r2, #42	; 0x2a
 8003a70:	5499      	strb	r1, [r3, r2]
		mg_dma2PwmBitBuffer[43] = (pmg_LedFrame[mg_posInBufferToRead].Blue & 0x10) ? c_PulseLogic1 : c_PulseLogic0;
 8003a72:	4b3d      	ldr	r3, [pc, #244]	; (8003b68 <fillTheSecondHalfOfBuffer+0x4d4>)
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	4b3d      	ldr	r3, [pc, #244]	; (8003b6c <fillTheSecondHalfOfBuffer+0x4d8>)
 8003a78:	881b      	ldrh	r3, [r3, #0]
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	0019      	movs	r1, r3
 8003a7e:	000b      	movs	r3, r1
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	185b      	adds	r3, r3, r1
 8003a84:	18d3      	adds	r3, r2, r3
 8003a86:	789b      	ldrb	r3, [r3, #2]
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	001a      	movs	r2, r3
 8003a8c:	2310      	movs	r3, #16
 8003a8e:	4013      	ands	r3, r2
 8003a90:	d001      	beq.n	8003a96 <fillTheSecondHalfOfBuffer+0x402>
 8003a92:	2128      	movs	r1, #40	; 0x28
 8003a94:	e000      	b.n	8003a98 <fillTheSecondHalfOfBuffer+0x404>
 8003a96:	2113      	movs	r1, #19
 8003a98:	4b32      	ldr	r3, [pc, #200]	; (8003b64 <fillTheSecondHalfOfBuffer+0x4d0>)
 8003a9a:	222b      	movs	r2, #43	; 0x2b
 8003a9c:	5499      	strb	r1, [r3, r2]
		mg_dma2PwmBitBuffer[44] = (pmg_LedFrame[mg_posInBufferToRead].Blue & 0x08) ? c_PulseLogic1 : c_PulseLogic0;
 8003a9e:	4b32      	ldr	r3, [pc, #200]	; (8003b68 <fillTheSecondHalfOfBuffer+0x4d4>)
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	4b32      	ldr	r3, [pc, #200]	; (8003b6c <fillTheSecondHalfOfBuffer+0x4d8>)
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	0019      	movs	r1, r3
 8003aaa:	000b      	movs	r3, r1
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	185b      	adds	r3, r3, r1
 8003ab0:	18d3      	adds	r3, r2, r3
 8003ab2:	789b      	ldrb	r3, [r3, #2]
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	001a      	movs	r2, r3
 8003ab8:	2308      	movs	r3, #8
 8003aba:	4013      	ands	r3, r2
 8003abc:	d001      	beq.n	8003ac2 <fillTheSecondHalfOfBuffer+0x42e>
 8003abe:	2128      	movs	r1, #40	; 0x28
 8003ac0:	e000      	b.n	8003ac4 <fillTheSecondHalfOfBuffer+0x430>
 8003ac2:	2113      	movs	r1, #19
 8003ac4:	4b27      	ldr	r3, [pc, #156]	; (8003b64 <fillTheSecondHalfOfBuffer+0x4d0>)
 8003ac6:	222c      	movs	r2, #44	; 0x2c
 8003ac8:	5499      	strb	r1, [r3, r2]
		mg_dma2PwmBitBuffer[45] = (pmg_LedFrame[mg_posInBufferToRead].Blue & 0x04) ? c_PulseLogic1 : c_PulseLogic0;
 8003aca:	4b27      	ldr	r3, [pc, #156]	; (8003b68 <fillTheSecondHalfOfBuffer+0x4d4>)
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	4b27      	ldr	r3, [pc, #156]	; (8003b6c <fillTheSecondHalfOfBuffer+0x4d8>)
 8003ad0:	881b      	ldrh	r3, [r3, #0]
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	0019      	movs	r1, r3
 8003ad6:	000b      	movs	r3, r1
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	185b      	adds	r3, r3, r1
 8003adc:	18d3      	adds	r3, r2, r3
 8003ade:	789b      	ldrb	r3, [r3, #2]
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	001a      	movs	r2, r3
 8003ae4:	2304      	movs	r3, #4
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	d001      	beq.n	8003aee <fillTheSecondHalfOfBuffer+0x45a>
 8003aea:	2128      	movs	r1, #40	; 0x28
 8003aec:	e000      	b.n	8003af0 <fillTheSecondHalfOfBuffer+0x45c>
 8003aee:	2113      	movs	r1, #19
 8003af0:	4b1c      	ldr	r3, [pc, #112]	; (8003b64 <fillTheSecondHalfOfBuffer+0x4d0>)
 8003af2:	222d      	movs	r2, #45	; 0x2d
 8003af4:	5499      	strb	r1, [r3, r2]
		mg_dma2PwmBitBuffer[46] = (pmg_LedFrame[mg_posInBufferToRead].Blue & 0x02) ? c_PulseLogic1 : c_PulseLogic0;
 8003af6:	4b1c      	ldr	r3, [pc, #112]	; (8003b68 <fillTheSecondHalfOfBuffer+0x4d4>)
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	4b1c      	ldr	r3, [pc, #112]	; (8003b6c <fillTheSecondHalfOfBuffer+0x4d8>)
 8003afc:	881b      	ldrh	r3, [r3, #0]
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	0019      	movs	r1, r3
 8003b02:	000b      	movs	r3, r1
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	185b      	adds	r3, r3, r1
 8003b08:	18d3      	adds	r3, r2, r3
 8003b0a:	789b      	ldrb	r3, [r3, #2]
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	001a      	movs	r2, r3
 8003b10:	2302      	movs	r3, #2
 8003b12:	4013      	ands	r3, r2
 8003b14:	d001      	beq.n	8003b1a <fillTheSecondHalfOfBuffer+0x486>
 8003b16:	2128      	movs	r1, #40	; 0x28
 8003b18:	e000      	b.n	8003b1c <fillTheSecondHalfOfBuffer+0x488>
 8003b1a:	2113      	movs	r1, #19
 8003b1c:	4b11      	ldr	r3, [pc, #68]	; (8003b64 <fillTheSecondHalfOfBuffer+0x4d0>)
 8003b1e:	222e      	movs	r2, #46	; 0x2e
 8003b20:	5499      	strb	r1, [r3, r2]
		mg_dma2PwmBitBuffer[47] = (pmg_LedFrame[mg_posInBufferToRead].Blue & 0x01) ? c_PulseLogic1 : c_PulseLogic0;
 8003b22:	4b11      	ldr	r3, [pc, #68]	; (8003b68 <fillTheSecondHalfOfBuffer+0x4d4>)
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	4b11      	ldr	r3, [pc, #68]	; (8003b6c <fillTheSecondHalfOfBuffer+0x4d8>)
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	0019      	movs	r1, r3
 8003b2e:	000b      	movs	r3, r1
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	185b      	adds	r3, r3, r1
 8003b34:	18d3      	adds	r3, r2, r3
 8003b36:	789b      	ldrb	r3, [r3, #2]
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	001a      	movs	r2, r3
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	4013      	ands	r3, r2
 8003b40:	d001      	beq.n	8003b46 <fillTheSecondHalfOfBuffer+0x4b2>
 8003b42:	2128      	movs	r1, #40	; 0x28
 8003b44:	e000      	b.n	8003b48 <fillTheSecondHalfOfBuffer+0x4b4>
 8003b46:	2113      	movs	r1, #19
 8003b48:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <fillTheSecondHalfOfBuffer+0x4d0>)
 8003b4a:	222f      	movs	r2, #47	; 0x2f
 8003b4c:	5499      	strb	r1, [r3, r2]

	}

	mg_posInBufferToRead++;
 8003b4e:	4b07      	ldr	r3, [pc, #28]	; (8003b6c <fillTheSecondHalfOfBuffer+0x4d8>)
 8003b50:	881b      	ldrh	r3, [r3, #0]
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	3301      	adds	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	4b04      	ldr	r3, [pc, #16]	; (8003b6c <fillTheSecondHalfOfBuffer+0x4d8>)
 8003b5a:	801a      	strh	r2, [r3, #0]
}
 8003b5c:	46c0      	nop			; (mov r8, r8)
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	b002      	add	sp, #8
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	20000040 	.word	0x20000040
 8003b68:	20000070 	.word	0x20000070
 8003b6c:	20000076 	.word	0x20000076

08003b70 <__libc_init_array>:
 8003b70:	b570      	push	{r4, r5, r6, lr}
 8003b72:	2600      	movs	r6, #0
 8003b74:	4d0c      	ldr	r5, [pc, #48]	; (8003ba8 <__libc_init_array+0x38>)
 8003b76:	4c0d      	ldr	r4, [pc, #52]	; (8003bac <__libc_init_array+0x3c>)
 8003b78:	1b64      	subs	r4, r4, r5
 8003b7a:	10a4      	asrs	r4, r4, #2
 8003b7c:	42a6      	cmp	r6, r4
 8003b7e:	d109      	bne.n	8003b94 <__libc_init_array+0x24>
 8003b80:	2600      	movs	r6, #0
 8003b82:	f000 f821 	bl	8003bc8 <_init>
 8003b86:	4d0a      	ldr	r5, [pc, #40]	; (8003bb0 <__libc_init_array+0x40>)
 8003b88:	4c0a      	ldr	r4, [pc, #40]	; (8003bb4 <__libc_init_array+0x44>)
 8003b8a:	1b64      	subs	r4, r4, r5
 8003b8c:	10a4      	asrs	r4, r4, #2
 8003b8e:	42a6      	cmp	r6, r4
 8003b90:	d105      	bne.n	8003b9e <__libc_init_array+0x2e>
 8003b92:	bd70      	pop	{r4, r5, r6, pc}
 8003b94:	00b3      	lsls	r3, r6, #2
 8003b96:	58eb      	ldr	r3, [r5, r3]
 8003b98:	4798      	blx	r3
 8003b9a:	3601      	adds	r6, #1
 8003b9c:	e7ee      	b.n	8003b7c <__libc_init_array+0xc>
 8003b9e:	00b3      	lsls	r3, r6, #2
 8003ba0:	58eb      	ldr	r3, [r5, r3]
 8003ba2:	4798      	blx	r3
 8003ba4:	3601      	adds	r6, #1
 8003ba6:	e7f2      	b.n	8003b8e <__libc_init_array+0x1e>
 8003ba8:	08003c18 	.word	0x08003c18
 8003bac:	08003c18 	.word	0x08003c18
 8003bb0:	08003c18 	.word	0x08003c18
 8003bb4:	08003c1c 	.word	0x08003c1c

08003bb8 <memset>:
 8003bb8:	0003      	movs	r3, r0
 8003bba:	1882      	adds	r2, r0, r2
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d100      	bne.n	8003bc2 <memset+0xa>
 8003bc0:	4770      	bx	lr
 8003bc2:	7019      	strb	r1, [r3, #0]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	e7f9      	b.n	8003bbc <memset+0x4>

08003bc8 <_init>:
 8003bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bce:	bc08      	pop	{r3}
 8003bd0:	469e      	mov	lr, r3
 8003bd2:	4770      	bx	lr

08003bd4 <_fini>:
 8003bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd6:	46c0      	nop			; (mov r8, r8)
 8003bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bda:	bc08      	pop	{r3}
 8003bdc:	469e      	mov	lr, r3
 8003bde:	4770      	bx	lr
